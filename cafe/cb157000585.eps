%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Seed-01.eps
%%Creator: Adobe Illustrator(R) 21.0
%%For: Юлия Асеева
%%CreationDate: 5/5/2017
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.0.2 x242 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Template_studio</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-05-05T13:15:48+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-05-05T13:15:48+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-05-05T13:15:48+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>188</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqtlkEcT&#xA;yFSwRS3FRVjQVoB44q8f0v8AOTUbTWb9NYAn0yFbhhIqpGEFvFJMHQqDyQ+m0ZJr05VpWuNjyknd&#xA;unADkp/lP5l1h/PesWGrXLXD3ZJjYGsbOkcb80BJIUt61B2+zsABjhkSVyRoPX9Qiklsp44/tsh4&#xA;jxPh9OXZQTEgNcDRDH7bX5LfQH9WQveQv9XDH4mPIclb58fxGYkc5GP+lyciWIGfkn+nwyQ2UMcp&#xA;LShQZCxqebbtv8zmXjiREAuPM2Uh8x+ZZ9Pvvq8LKnpRCVuYFHJJ+E9+3bOd7V7YlgzcETVRv3+X&#xA;9jstJofEhxHqa9yVax5yMkkDwMYVESTwp/NIRyII706Zrdf26ZTjw3ECIl8fP8d7lYOzqiepsj4M&#xA;6VuShqUqK0PvnbRNi3REU3hQgtZ1NdM0ye9aJ52iAEcESu7ySOQsaAIrn4nYCtNup2yMjQtlCPEa&#xA;eDeZ/wA9POY1KWC2QaMkJobd4o2lG3ST6xx3+SjNfPU5Cdtna49JjA39Sc+Q/wA8fMGp6pBpV5pp&#xA;1RpTx9e0QpKvizKOUZA70IplmLUyuiLas2kgBYNPXNe1f9FWS3PD1CZFTjWmxqx/BTmRny8EbcLF&#xA;j4zSTXvmaebVdLhsiy21x6UrgijGNjVifBVUb5jzzkziBybo4QIknmnNlr+nXt01tbOzyKC1eJC0&#xA;BpWuZEM8ZGg0ywyiLKpqrMI40BKhm3IJB2FQKjK9VIiOycABLEvNfmnU9K09FjkUu8vESsN+IUMQ&#xA;fE75r8+qmIgNkoiO4Tb/ABK/+DP0zx/eehzp/lca/rzK/MS8Hi6tfCOJkmbBpdirsVdirsVdirym&#xA;K+8mW2p6oifl5rrOfrltcStpxlt5o7crERCGlZOEySkQ8VHJARsBTIiATxFW/K6PyxceYdQuLLyn&#xA;5g0K+tYzwutdtjBC0dw4Z47ZxJIrbqCa7r27jBGAHJJkS9QybFiEOpaennaTRBoGqu0zG5OsPbD9&#xA;Fo8UQbacsDVvV4gcT8VfDKhhiDbM5CRTL8tYJD5p0TSbm2l1K8tLi8ks4WcW9pUzShAW4IlV5Mf2&#xA;RXNbrOycGomJzHqArm5eDW5MUeGJ2S3ypq+j+Yma2bytqWlJpkcJt31iyECsJUEnGFmaQsUrR/Bq&#xA;5d/J+CogwiRHle9fNr/M5LJ4jvzZhmY0OxV2KsB/MXy4NV1HTwPJNv5kikIW71Br1LGW3Xmo8PUl&#xA;HAswAbtTvXISxxlzDZDNKPIpj+W2gWmm6BHN/hhfK2o3Bb63p31iO9kXi5C1uUZ+YZQGArtXGGOM&#xA;eSzyylzLJ7uztbuEw3MSyxGhKMKiowyiJCiwjIjcMD1rzP8AmZY6re6bpX5cDU9Ft0MdhqCavZW4&#xA;nURghfQkUPEpaqbk+PTHhFUvEbtkvlTRIrKxhvJLSSy1C7gje6tJpVna3dlDPB6ifA3Bvh5LsaVy&#xA;vFgjDk2ZMspc0z1SOSTT5/SjM06ozwRKwQtIoJVQ7VC8jtU5OcBIUWEZEG3lDS/mTqFvbw6p+Wzy&#xA;LJN+/wCetWP7kBo1MqlVYuCruabH4OnxDMY6KJ5thzX0eq/oiw/Rn6N9IfU+Hp+n245f4MeHh6Nf&#xA;GbtGZaxdirsVdirsVdirQZSSAQSpoadjgtWwQa0NabHEFadhV2KuxVqSSONGkkYJGgLO7GgAG5JJ&#xA;wE0oDeFXYq7FXYqhLPU7W7nuIIifVtiBIp9+hGVwyiRIHRnLGQAe9VF5Abs2imsyoXYDoBUDc+Jr&#xA;h4xxcPVHCatfLNHDGZJWCovUnHJkjAcUjQWMTI0FO0vrS7TnbSCRaA7VGx6bGmQw6iGT6TdMp4pR&#xA;5hXBB6Zc1uxVxIAJJoBuScVdirsVdirsVdirsVdirF7yaWAO8TcbwB6gHdmCk0IHWrZp5SlEnvc6&#xA;gQln5Yanql4L9bwyOisCry1ryPUb5Ps4ys248zY3ZX5i/Sv6A1H9EGmq/VpfqP2SfX4H06c/hryp&#xA;9rbxzaSutmuFWL5PMV83/nJeR3NrHoUltqUmjRy26tGqxreLcLHKwkkonN4nZhGzGnFdutaeKfd0&#xA;cngxjr1el+WINXg8u6bDrMnq6sltEL6Soas3Ec/iGx+LvlsbrdxpkEmuTGvza1Wez0GG3iLKt5Lw&#xA;lZe6qPsk+9fwzC7QmREAdXK0UQZWejV3rl7a+f8ARYXLCHULBI5496cizsrfMNichGaPnH9aiAOI&#xA;+RZzme4bsVdirGrkHTPMsMygmO8DqR48t6D5PQ/TmCRwZb6FygeKFdyL8s2136U17dqUmumqqHqE&#xA;FSCfmTlmmgQDI8ywzSHIdEy1C0+t2rw8uBO6tStCPbJarT+LAxumGLJwStIm8v3llpl16MpluJQq&#xA;8YwVpGp3A75rJaCePHIg3KXd3OXHURlIWNg7yul+L66MiutrxooYELzBHQH2rkeyITjI2CI19qdZ&#xA;KJA70316DUJ9GvIdOf072SJlt3rxoxFNm7fPNzlBMSBzcPEQJAnkwy/8oedZ/Ki6fJqYvLsLKWE5&#xA;qxaRV4Dn39NuW7E9cxJYMhgAS5Uc+MTuqZT+j9W/wh+j/WX9L/o/6v69Tx+s+jw51pWnPfpmXwng&#xA;rrTjcUeO/wCG04yxqdirsVdirsVdirCPNFn+asmuyy+XYPLkmlegfq8mp/XRdC4EbceYhBjaP1OP&#xA;cELXqcgccSbIZCRCfeU4vNMelsPM6acmqGaQ/wC4kTC3MPL91X1/j58ftdq9MkIgckEk805woY6x&#xA;/MP/ABBahU0j/D3rT/XnLXP130OP+jiJePpc+X94WalOmKsixVB6tYpe2MkXowzzKC9stwCYhMAe&#xA;Banxca9adsjKAkKIZRkRySvyvaebJLdp/OUelSapFJ/ocmlrN6aRNFHyBNzV+frepuNuPHvXCYgm&#xA;0CR5MgwodirsVSTzZH5ueyiPldNNe/RnY/pb1vSH7lxEV9AFq+tw5f5HKm9MBAK2mtkLwWcAvjG1&#xA;76afWjAGERl4jn6YYlgvKvGprTCqtirHtaH5hHV4xoj6Smj/ALn1WvVuWuR/e+vxETKh/wB08Kn+&#xA;ev7OKshxVKvM/wDir9Dyf4WFidZ5x+kNT9YW3DmPV5ehWTl6deNO9K7Yqw27P/ORgmJs18nvBzfi&#xA;sx1NX9P1P3dSoYcjFs232t+m2Ks04+Z/0Bx9Sy/xB6f956cv1P1K/wAnP1eNP8quKpnirsVdirsV&#xA;dirsVd03OKoex1LTtQjaWwuobuJW4s8EiyKG8CUJFcAkDyZSiRzCIJAFTsB1OFihLHVtNv2mWzuE&#xA;nNuQsvDcAmtN+h6dsrhljO+E3SaReWIdiqGvNRs7IKbmQR8/s7E9Op2GwzHz6rHirjNW2QxSlyCJ&#xA;VgyhlNVIqCO4OXg2LDWXYVcSAKnYDqcVYfbefTfeZbfS7G3D2kjMpnavNgqkl1G1FFO+a2Ov48oh&#xA;EbMuHZmGbJioX17DZWr3Ep+BKADxLGgH0k5j6rUxw4zOXINmLEZy4Ql0HmexktbmVwY5LRBJJEd6&#xA;g7LxO1anbMDH2ziOOUzsYCyPur7nIOinxAD+I0t0HXHvp54JqeooEsfHpwJpT6Dg7M7ROcyEufMe&#xA;5dTp+AAj3JjqV6LKwnuivL0lLBfE9APvza5J8MSXGhHiICQah5yT9BwXtmAJ7hxHxbcIRQt8/tD7&#xA;8xMmr9AlHmXIhpvWQeQT76+n6K/SFP3fofWKe3DnmVx+ni8rcfg9VeaKyxg7FXYq7FXYq04YowU8&#xA;WIPFqVoexpirxS1/J7z7da3PcaprCQx3CSx3WoRTSyXEiuhTiEKqArV3BbpmDHTT4rJdlLWQEaiE&#xA;4/LL8uPOXlrzDLeahc2qWDRNHNFbSSSes1fgPF0TjQ71rXt3JyWDTyhK72YanVRyRqt3o2t6fNqO&#xA;lXFlDP8AV5J1C+rTlQVBYEArsw265fnxmcDEGrcEMOOhebPLS8NCC3sE1HuH4oHLjahRjXjTpxPz&#xA;zXfl8uAVj9Q699srB5s00mXUJtOgk1CFYL1lrNEu4U17bt2982WIyMQZCpMShrzSbmTURfwXJRkQ&#xA;gQkbFgpCitelTvtmFn0czl8WMt65N8MwEeEhLdM03Ur+SYa3ExhBrFzYBgdgVXhT4TTeuYem0mTK&#xA;f34sDl7/ANTdkyxiPQyVVVVCqKKooAOwGbwAAUHBJbwq0yhlKsKgihHscVYJ5h0r8vdMt5rCbV7P&#xA;Q76ZTcc7q6RZDFD8TckmkVjEtatSgGxzBloIcJEfSy4l3kbQruG7+vWmuW9/pStJE6WcnqxvIlUZ&#xA;TQ8FZH696imQ02kyY5WZenuUm2T+Y9Mm1LSpbaBgs1VaPkaKSprQnfI9r6KWpwHHE1LYhydFqBiy&#xA;CR5MEt7bSdP1K4tfNHmDTrC6nt+C2T3cST8a+qr8JGXYCEt8gfDNDovZ3IeLxjtKNbHfmD+h2Oft&#xA;OArwxyNsu8seVo9Iklufrf1xp0Co4QIAleXZmrXNr2V2KNJIy4uIkVyr9JcPWa85wBVUm2q2TXun&#xA;XFqrBXlQhGPQMN1rTtUZuMsOKJDhY5cMgXl+lweU7/T7SzbzXpRubi7MVpDBe28vqP8ACvpIFf45&#xA;BwHwjfMGOiPDRcqWqF7PU/qUH1D6jT9x6XoU/wAjjx/Vmw4Bw04nEbtXyTF2KuxV2KuxV2KsZ80f&#xA;lr5K803KXWu6b9cnj9Mo/rTxf3Syqm0UiA0FxJ9/sMVTDyr5V0HypoVtoOgWv1LSrTmbe29SSXj6&#xA;sjSv8crSOau5O7Yqm2KsHf8AJL8r3l1CZ9DUy6rH6V/J69zykjEfpca+rVRwFPhp49cVZuqhVCjo&#xA;ooO+w+eKoLXNE0zXNJudJ1SIz2F4np3EQd4iy1B2eNkddx1UjFUv0HyJ5T0C+uL/AEnT1try65ev&#xA;PzlkZuaxIw/eM9Bxto9h4e5qqn2KuxV2KpZe+V/LV/fpqN9pNld6hGhjjvJ7eKSZUPVRIylgvtXF&#xA;UTpmk6VpVqLTS7OCwtAzOLe2iSGPk5qzcECrVjucVRWKpXqPlTyvqd2t5qWj2N9dovBLi5toZZAp&#xA;DLxDurNTi7D6TiqZqqqoVQFVRRVGwAHYYq3iqSW/kbyVbXcF5b+X9Nhu7aQzW1xHZwJJHIwCl0cI&#xA;GViFAJGKp3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirxv8ANBU1&#xA;Pyobe21OK2dbmJzLJ9YVaAOKfu43bevhmpjIb7/e7XFE8XL7mW/k1aSWnkCygkukvGWScm4jMhU1&#xA;lY/7tWN9vdc2GnNwcPV/3h6M3y5xnYq7FVs0scMTyyHjHGpd28FUVJxJVhOk/mxo2pWuoslvJFd2&#xA;EcksdrIQDN6b+mFVqbMzlRuP2gRXelUcoILM4yFX8s/Pk3myyvjdxxw3tjN6bxxKyr6bVVGIZnNW&#xA;Mbd8OOfEFnGmRa3qkunRwzLHziMnGXx4+3vSpyGfKYUejLFj4rC+51MLeWtpDR5Lghi3YRgEk/SA&#xA;aYZZfUIjqiMNiSjJZUiieWQ8UjUs7eAAqTlk5iETI8huwjEk0OZSePzXp7QXEjAo8CeqENPjUnit&#xA;CPcgH55p49uYTCUjtwi67xyH6Pm5n5GfEAOppEaHq/6ShlLBVlhfiwXoQwqpzJ7N135iBJqwejXq&#xA;cHhnyKZZsXGdiriQoLMaAbknoBirznWPz28m2F59WgWe+4/3ksQVFHsPVZGJ+jMWWriOW7mw0MyN&#xA;6DJfKfn3y15qjc6Tclp4hWa1kUpKg8Su4I36qSMux5Yz5NGXBKHNO7m8trUI1xII1kcRoW6Fj0GS&#xA;lMR5tcYk8kPaazZXLXAD+mLaX0WaQhQWpXauQjmib8mUsZFeaOy1rSqfXFtvUknj/wBHQOwdeoCA&#xA;n4gfYZhnVgE2G/wdrW+WvMdtrtpJcQoU9KQxsrUr0BHQnsclpdT4oLXOIHJN8ymDxN3tNZsp7a6t&#xA;+MalJP3bkGoJHevjnIa3XHDiMgBzD0WnxXOrek/l/Z21n5Xtre2UrErykBjyO7knfbN12NqTm04m&#xA;RV397q+0YcOYj3MjzauC7FXYqp3FvFcW8tvMOUUyNHItSKqwoRUexxV4/d+VPJEc2pJfX2ryXsMo&#xA;kWWDS7/928UqD4BFbus45W37G3EkrRSCKRgADYchZT+VPlW00i1v7+2v5L4agYom9S1ls+P1TmgP&#xA;pz/vOTc/iY7Ggp4mWOHCxlK2Z6hZreWctsx4+opAbrQ9jhyQ4o0sJcJtJ/KkVjcQjUYmmeVUW1In&#xA;gntinpqAQsdwkUlOm/HIYsPDuebKeS9uid3VutzazW7khZkaNiOtGBB/Xhz4hkxygeUgR80Y5mEh&#xA;IdDbBToOkaPfmLWLy6ujcQlIkt7O5eNUZwAWkhWVVIYDYkeOc5pfZqML8SXGCKrl+ku0zdqmVcI4&#xA;Tdst0PQbLRoHhtmkf1G5O8pDMaCgFQF6ZuOz+zceliYwvfv/AAHB1OqnmIMuiZZsHGdiq2SOOSNo&#xA;5FDxuCrowBBBFCCD1BxV5x58/LzyJqF+k15oeoNcMgLz6TGeDAEgCRVqnLb+WvvlMsES5ENTOIrm&#xA;y7yh5X8v+X9Iht9GsjaQyIrv6gInYkV/elvi5CvTtk4YxHk15Mspmyj9WtrOaydruBrmK3rOIYwz&#xA;OzRgkBVUgsT0A74ZwEubGMjHkkVhc6NrWpCEaVqNk1szXJa4tZbWCR2NDVmAV2qtdv1ZCWGJPJkM&#xA;sgynLWtiPmWcW9/9Tayv7m2uEq7Wlq00Y9YshX1FIoRQk16VGYeTSCRO/Nvjm2oo3yRotjpukcrR&#xA;LiMXTmRkvE9OYEHjRk7dMs0+nGIbNUpWyHMhi+aPI3mK51Sa+htteN3IkSvxFxKeI5gV+Knjmo18&#xA;hHHZNbt99z3jyN9Y/wAOW/1iUzS8pKuWL1+M03OZPZ0hLCCDfNqnzT/M5i7FXYq4mgqcVSyXX7OC&#xA;KSW5BiSNS4bqCo+Xf2zE/NxoktxwkK2kavaarZLd2rVjYkb7EEGnfLcGYZI2GuUaVLvUrCzltorq&#xA;dIZLyT0bVXPH1JOJbgte9FOWkoESUF/i3y2biwt11CKSbU5JYrFIyX9R4OQkpxBoFKEEnauDjDLw&#xA;5b7ck2yTBJH82acs+sRgF10aFZbhl35MQ5ZFHivADr1OY/5iNy/ot3gGo/0k3tbmG6tormBg8Myh&#xA;42HdWFRl8ZAiw1SBBoqmFDsVdiqXWOrrcXl5ayJ6TWp+Ek/aUGhP0EZRjzcRIPRtnjoA96tp1+L1&#xA;JJUWkSuUibuwAHxe2+TxZOMX0Yzhw7LNV1WPT0jZ4zIZDSgIFBUAmp8K5j6vWDDVi7/Q2YcByXvy&#xA;aTXNMMUcjzCP1UDgNXZSSKn6RiNfioEmuJTp52aF0jwQRUdMzGhBvrWkpdzWb3kS3dvH600BcB1j&#xA;AqXKnfiB3yHiRur5M/DlV1sWtJ1nT9VimlsZDIkEpgkJBWjhValDv9lxjjyCYsLPGYGijcmweUeT&#xA;P+cdvLHlS6ubmz1K9na6iELib0qABg9RxRfDMLV6GOeHCSRuz4y9L0jS4dMsUs4XZ0QsQz0r8Rr2&#xA;plmk0owYxAGwGJNozMlDsVdiriARQ9Dirz3zVrWgQXFzod/fi3YoUqIbiRh8AlB+CNlNFoTQ5rp6&#xA;MmwOTk+MCN2ReRtJg07y/b+hc/W4rlRcRz8SoZJRzUhWowqG75kabB4caaZStU82eVtG8w2dsuqG&#xA;VI9OuY7+GSFuDq8B5DcA7Hv38N8vlEFYZDHkxP8AL3yP+XcU8F7o9zNql5o0kvo3FwZFMRuqtx4c&#xA;Y1JVSe21T3yMcQDOeeUvi9IyxpecHQ7fRtR1e21O+CT+ZmeDSisUsgq8iqDIyKyp8c0a/ERXMCGk&#xA;I47/AInMlqAeHyZj5U0i50fy/Z6bcyiaa2VlaRa0ILlhSvgCBmVggYQALj5piUiQm2WtbsVdirGv&#xA;MMdla6nDcT6jb6al7HJbEzyJEXkdQqhA5HMk02GY2TATKx1G7dHLUaPRPrGzis7SO2iqUjFKnqST&#xA;Uk/M5fCAiKDXKVm27qytLtAlzEsqg1AYdMhlwQyfULTDJKPIpBLZaHr0sg0vUreT6sFguo7Z0mEf&#xA;EmisEb4G2OxzB1PZoyEEHhryb8WqMRR3ZHFGscSRr9lFCivWgFM2MI8IAHRxpGzbDtTX8srbXLy9&#xA;1XVrGHUpv3EyXF5FE0ZMfAqoLqysUf8AH5ZUdPEyJPVtGeQAHcmnk6x8s2tndP5fvUvrW6uGmnlj&#xA;nS4USlVBAZCQNgNsnjxCAoMcmUz5p/ljW7FXYq7FXYq7FXYqx25/MTyVbi75avbu9kvKaONubGpp&#xA;RAteZqafDXKjmgOrcNPM1tzRvlvzRovmOxN5pU/qxqeMqEFXRqVoyn/ayWPIJiwxyYpQNFV1vXbD&#xA;RrT6zdsfiPGONBV3bwA/rkM+eOKPFJgBaI0+9jvrG3vI1Kx3EayordQGFRXJ458URLvQVd3SNGdy&#xA;FRRVmPQAYZSERZ5BIFmgpxXVvNEJYpFkRtlZSCCfDIwzRkLBsJMCDRQ+l6tBqAl9NWR4WCujDx3G&#xA;42yjSayOcEgEUzy4TDmjcy2p2KuxVjlr5vsdS8wjSLe2M8aB3a7JHEGMdVWhqN6cqjrmFDWieXgi&#xA;L82XDsyPM1ihNR1O2sI0aapLmiotKmnU706ZiavWwwAGXVuxYZZOSXXfmTTbSOGS3VZFnX1nKjjS&#xA;MGhYjbfrmFqe2ccOHh9XEL/zfxbdj0Ujd7Vt8U8BBFRuD0ObgFw0pu9T0aLUZLS4jX6wkJnLMikM&#xA;FBYgE/tUWuUyzxEuE91toxEi1Xy/f21/piXNvCsCOSDGoFARsOgH7NMOHLxxtGXHwSpMcta3Yq7F&#xA;XYq7FXYqp3VtDdW01rOvKGdGilWpFVccWFRv0OAi0g0beR3P5a/lx5fvZLfV5tWvWngJgWOzup4o&#xA;QSf3gls7dkEg47c2+jMeOkgHLlrZnyZr5B8i6R5XtbiXTrm5uhqQikd7oKrBUDFPgCRFTST4uQr8&#xA;ssxYRDk1Zs8slX0TPzJpugz26XusQtLDZVYcFlc0cgEGOEMzioG1D91cGXTwyEGQumkFjXlzTVn1&#xA;sT6brN6beFhLLa3NpdW5aMkEIzTCJW6/y/RmNDRyjOxM13J4mdyxJLG0cg5I4KsPEH5ZmzgJAxPI&#xA;oBINhhPmSXy/Y31rppnurZ0MZ9OOxvLtSZpKIyyxxSJy59fi+HqaDNVn7JjIx4DwgOVDVEXYtmyR&#xA;pGKIoUHc07nxObWMQOTik2uySHYq7FWC+ZdG8mWUY04evYXMlJxLb291dAqWKD1GRZF4g1oCwp8s&#xA;wsmgxmNR9LLiTvyZpL6fpYf6/JewXapNb+pG8PBGWo/dSEshIO4IBHhk9LpziBBlxIJtV8zaBPq0&#xA;cH1e4FtNAW4uQSKPSvQjfbMDtfss6oR4ZcMoX9rm6LVjDdixJjWh6J5a1qFLSC6vnnsARcSyWlxa&#xA;LIruzUH1mJVbcn7BOYY9mcJhESkeKPUbXvfn3t/8rTEiQBRZ+qhVCjYAUGdIBQp1RLDPN1tosWu2&#xA;t3qNxdxiaGSMRW1nc3INRwqZII5FT7Y2bMfJphKfFfRvhnMY0yLy7YWdjo9tDZs7W5X1EeRSjtz+&#xA;KrKwVh16EZbixiEaDXkmZG0xyxg7FXYq7FXYq7FXYqhhqdgZJI/XTlCAZamgWrcRVjtWu1MxxqsR&#xA;JHEPTz+5n4cu5XjlilQPE6uh6MpBH3jLoTjIXE2GJBHNbcXNvbQtNcSLFCn2pHIVRXbqcjlyxxx4&#xA;pGh5phAyNAWUNBrOl3FzJbRXCtNHx5LuB8YqtGI4tUdKHKMOuw5JmEZXKP6eW/I/BtnpskYiRGyM&#xA;kdI0aRyFRAWZj0AG5OZRNNACQr588rSWF3e296LiKxCm4WJWLjmQo+EgHqwB8O+UDVYyCb5N/wCX&#xA;nYBHNEeXPNWjeYYJZdNlLGAhZ4nUo6FhUVU9jQ7jbY5PFmjMWGOXDKB3TfLWp2KuxVjY/MTyl9da&#xA;ye9Ed0l/+i5InBBW4ozLX/Jbh8LdK7dch4gbfBlV+Voryp5t0jzRYT3+lF2tYbh7X1JFC82jCkso&#xA;qTxPLatD7YYzEuTHJjMDRWebfN+n+WLOC6vI5JhcTLCkcXHn8RpX4io2JA698E5iKIxtjnmP83tJ&#xA;02XRls0+sw6kUkmmbYRwn1ailR+8rbupFfhPbwjLKBSRC3oGWsEpuPNWiW97LYyTn61Cju0YRjUR&#xA;rzYBqca07VzCydo4YyMSd4/oFsuEquia9YazDJLZlqRNwkVxQg0r2JH45LR62GoiZRvbvRKNJjmW&#xA;h2KuxV2KuxV2KuxVgU1nBpt/qFq9tqd0CiJHNBaM8fxkSAhw1JONKHpTNJHsWIEhfMV9tuUdUdtm&#xA;S+VrAWunerzlb60RLwnjaF0qKcTGxLKfnmdodEMESLu2rLl4za7zIlmLA3N5DdXVvCQHs7RJJWk9&#xA;RlQExRfG3Anlt03OW6nSwzDhnvHu6FOLPLHvHn3pNoM2m3etS250vU4wscNzAdQtmS1hMQCosTtt&#xA;6gD9Oo3yjB2dDHMysm6oHlHh5U2T1cpRA5c7rrfeyq7tYLu2ltp15QzIY5VBK1VhQioIOZsoiQou&#xA;NEkGwwe28neVvL93Ppsen397HrSrEzpE0sEMZcUVpFAVKP8AHU5jw0kBfW3InqpyryZH5Y8oaR5b&#xA;ini00ScZypf1GDEBAQoBAG25yzDgjjuurXlzSnzTrLmp2KuxVhPmbyZ5Sivl1g+W7nUtRku4b52s&#xA;GUO1xbH90ZBJNClPjY77GhrvSsDjF22DNICrZXpWkaXpFmtlpdpFZWiszLBAgRAznkxoPEnJAAcm&#xA;EpE7lJvPmhW+saQsEsF1MefECxEJlCuCG/v2RQO+xr8xUGM4CXNMZU871P8ALiHUZdOs4NO12ysW&#xA;IWZ5UsJfSaVwzSFluQ0ZXmxJWN160FesDhDLxC9oy5rY5relabaXf6ZGkXOrXTtxe3tjG1KxsOZj&#xA;nliQjbjsepBpSpGEez8JyeIR6j/ZyZcRqk8s7CysojFZwJbxk8ikahQSe5pmTiwwxiogAeSCVfLE&#xA;OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpmVFLMQqqKsx2AA74qx&#xA;zT/zC8sahZ391bXDMNOjkmuIipEhSIsrFF/b+JeO3eniMhHICyMCGvI3niz82Wd3PDD9XltJjDJD&#xA;z9TYbB68V2Zlam3bGE+ILKNJvqmqx6csLyoWikfi7j9keORy5RCrZY8fEqXN/HDcQWwHOadqBR2X&#xA;ux+gHDPIAQOpRGFgnuRLMqqWY0VRUk9ABkyQBZYgWgIte0ySGeVZaC3UvIp2bjUgEA+NNswYdp4Z&#xA;QlK9o7n8ebedLMECua/S9Ui1CJ3RSjRtxdCa9qg/SMnotYM8SQKpjmwmBpG5mNLsVdirFdV/NDyP&#xA;pl39VuNSV5hu4gR5wtfFowy/jlEtRAGrciGkySFgJ1ovmHRNbtzcaTexXkQ2YxtVlJ7Mp+JT8xls&#xA;ZiXItU8concUjnkjTjzYLzIVamlWPQD3wkgMQFK2vrW5eZIH5mB/Tlp2alaZGMxK66JlAjmr5Nig&#xA;H1m2idxMDGi8isnVSFFT8umY35qNm+jb4Jq3aNrdhq9u1xZvyRGKGoINR86ZLBqI5BYYyjSPy9g7&#xA;FXYq7FXYq7FVG8tlurOe2ZiizxvEWXqA6laj78BFq8Ol8ueVrS51BZ/POi6ZqSXCpFCl3AvxLNGT&#xA;BOrurryktnXjuamp5Fd6BgoHdtORmP5O+WG0mLVr4ahY30N88UP+4+UTok1oZEm5SCg5M71Kfsmv&#xA;0TxwMWM5WzrV7EXunyw7B6Exs3QMBtjmx8caXHPhNpN5Taw1SOHWrbUbfUoRCkEElpMlxEpVQG/e&#xA;Rsylvke+QxYiDxHnTOeQEUE/vbc3NlcW4biZo3jDeHJSK/jh1OLxMUocuKJHzDHFPhmJdxBefQ6X&#xA;bWuqy6brmvWFpcyWhMViLhBcGH1Bxm9N+DFBIoHKnXbOV0vs7m3GWQ4TGtveCOg6h3GXtPGKMBvd&#xA;7sw8uaAdHgmR7k3UszBmkK8NlFAKVbN72X2Z+UiRxcRkfx1Lr9Xq/GINcNJvm0cN2KrJoUmhkhkr&#xA;wkUo/ElTRhQ0ZSGHzBxUF415+/K38rF1F3m8yW3le5WEXFxaz3MIX0mk9ITcZ5EdFMjBOXLjy265&#xA;jS0sTy2cyGtkBvuzv8u/Ivljy1pUc2jyi/e9jV21bkJPXjYBlKMpK+mdiOPXxOWY8Ih72nNnlPny&#xA;TvzBa6bNpzS6lci0s7M/WZrlnWJY1iBLM7v8KqBuScOTGJiiwhMx5JFYX/kbWr1YdC8xWVzJ9YM1&#xA;1a2V3DcPJIylwCEdmHwoTTwr88hLTg8tt7ZjMerL8vaWIa/eaLHqDaLdavYWtxcxsy2s9zFHc+nK&#xA;rgMImIYj4XoQN+J8DmBk0hJNci5IzCqKr+Xel6dZ6M8+n6pBq9rdyGRLy1dZYW4/AeLoWU040NDl&#xA;ml03hA20ykDsGVZlsHYq7FXYq7FXYq7FUH+lrABy8gjEYLEvsOI/aB8MoGohvvybDikFWxvrW+t1&#xA;uLWQSwv9llNRtt2yePKJiwxlGlZnRWVWYBnNEBNCSATQeOwyxipSXtlG8SSXEaPcMY4FZ1BkdQSV&#xA;QE/ERQ7DBaaKthQl76/piTahE0tDpkSzXjdQquGNNtyQE3+jKjmjZH83m2eFKh5o+ORJI1kjYMjg&#xA;MjDcEHcEZYDbWQ3hV2KuxVB2WqQXVxc26ArJasFcN3rXcfSKZXDKJEjuZyxkAHvVbS9iuvVaKpSN&#xA;+HPsxABJX23wwyCV0iUSOay/1K1sVQzk/GQFCip3IH8cp1Gqhiri6s8eGU+SpHe2kkaSLKnGQVSp&#xA;AqOnfJx1ECAbG7E45A1XJWy5g1zSrDkKr9oV6fPG1pRtL6zvEd7WZJ0jYxu0ZDAMADSo9mByMZA8&#xA;mUokc1fJMXYq7FXYq7FXYq4gEEHocVYrrWi6le2s9jFFRnjZY5yRxrsQTQ1oaZqsmlmbAcs5QQi/&#xA;JOh32jaMLW+dWnLsxCGqgEk7HMrR4DjjRceZtrzf5TbzCmmGK/k0650y9ivobiJQxPp1DRkEjZ1N&#xA;P4EbZkSjaceThvzYz5U/KE6VfaRqGpazPqF1o0l09rGFCREXLMasDybl8ZY77n5ZCOKq8m3JqLBA&#xA;HN6NlzjPPtN8qeYPX82G4AB1FXS0JNFlLFmB9hv+Oa2Gnn676udLPH0V0ZR5OstSsvLNhaalteQR&#xA;lJBWtAGPDf8A1KZmaeJjAA83GzyBmSOSc5c1OxV2KpBqGmagurNNYAKt1BKkrnorlaivhUgb5iTx&#xA;SEyY/wAQciOQcNHomul2IsbGK25c2UVd/wCZiak5fihwxppnLiNtahplrfxqk/L4a8Sp4kV/2sq1&#xA;Glhmri6M8WaUOSUat5ZmnKLZMiRCNYuDk/CFYnbY1rXNfquzDIjg5AU5OHVAA8XNkEKGOFEJ5FVC&#xA;lvEgUrm3hGogdzhSNm2NXHkOzufMF7rMt3N6t3Cbf00IUKjIUYdww3rQjtlB0wMjK+bkDUkREa5I&#xA;zyt5ZGgQXsIumuheXLXVXULwLIicRQmv2MnhxcAphmy8ZBTvLml2KuxV2KuxV2KuxVjGs+WPy0uZ&#xA;dQvNZ0jRriY+nNqk93bWsjkxoUjedpFLEqjcVLdjQYDIBkIk9E40GfQpdKt10Jrf9FwoIbaO0CLD&#xA;GiABY1RKKgUU+Gm2CMgRYWUDE0RSpqt7ptnYyS6i6LaEFJBIOQcMPscd+VR2pgyZIwFyNBjShoGn&#xA;eX7Ox9XQ7G2sbW+Y3Ti1hSASSSAEyOqKtXbuTvhhMSiJDkVTIkAVOwGSVL7/AEHQNSubS91DTrW9&#xA;urFvUsbmeCOaSFgyyBoXZWZDzjVqr3UHtgvqqvY6lZ3yubd+XpmjgggivTY+OUafVQzAmB5NmTFK&#xA;HNE5kNbsVdirG9QvPJ2t61b6Nf2MGqXNpIbi3a4gjnjgniBPJGkB4yL2ZRt45jDVQOTwxzTTJMyU&#xA;KN3e21pGJLhwik0B3P4DKc+ohiFzNM4Y5SNBJoU8p+XmefTbG1s21R/rF1LZwxxesSd5pTGBzPxd&#xA;TU5jantHFi4bN8Xd3d7bj00pX5J/me47F9Q8o/lrd6tdy6hoGk3OqTRGW8nnsreSaSM7HnIyFn+z&#xA;uCcgckQavfmzECRaZ+XIdCXT/W0ayhsred2d44Ikhq/IlmYIAKkmtffBjyCcbCzgYmimuWMHYq7F&#xA;XYq7FXYqpXcDT2s0CyNC0qMgmjNHQsCOSnxHUYCEg0Xhl3+W3k7Qr6e381+ebDT7ieAyW8Es0NpM&#xA;xL1WaT15i0kfJPs0oT32zEjoxvZc+WvO1B6F+WHkeXyvZXbnVY9Tt9R9KW3MCFIQqhiHQ85AfUDj&#xA;p4DrluDDwXu0ajUeJW1UnXmnQtK1KGGbU7trS0tCWdvUWOMhyB8bONulARQ75HUaWOWuK6Djg0kH&#xA;lptbfUbddN12w1PRlCtxt5kk/wBH6KVRA3Hb7PFqe+UY8OeEhuDD9CSQzi4hSeCSF68JFKtTrQim&#xA;ZuXGJxMTyKxlRthWtX2kaPPbaWvmKysZkdA9vd3kcE3qTFmi+DkhPMRtxWm/E++afJ2fljwjFL0j&#xA;7+9y46iJsyG7MrWytbUP6EaoZDykYDdj4nNtiwQxj0ircWczLmrZawdirsVeda3pPljQ5hbWvmW2&#xA;0rXJVaYLfXcUMzwKDy40KOqDqWAPv7a2XZ/CP3ZqXey4mTeTU1j9G+vqGoQ6jBcBJbG4t5PWRomW&#xA;oYS8V5K1QQd9sydNDJEHjNoNO826Tqd9FbSaeyCWAvyWQ8VIcDfoenHNX232fm1HAcR3jf205+g1&#xA;GPHxCfI0xPQ7LRPMVtFbaT5q0/ULyzRkv4tPuIrsJG8jMK+m/JftEbjNd/obyShHiyVICj1FWT5d&#xA;7lfypESNRsE39lPSlUKoUdAKb+2dbEUKdMTbCPOMWm23mC2u9Q1uy0iG5t540+tzxwO5SJufASFe&#xA;YVDVqdBWuYmXTmU+IdzkY8wjGvNkXlbT4LHRLeCC5S7j3YXMZDI9T+yQSKdsvw4+CNNWWfFK02y1&#xA;rdirsVdirsVdirsVWiWMyGMODIoBZARUA7AkfRkRIXV7ppdkkOJAFTsPHElVKO6tZJnhjmR5o/7y&#xA;NWBZfmBuMqhnhKRiJAyHMXuPezOOQAJBoqpIAqemWsEFJrmjJaTXZvYTbW4BnlWRWVA32eXEnr2y&#xA;vxY1dhn4crql2mavpeq2/wBY066juoQeLNG1aHrRh1B9jkozEhYKJwMTRFIvJMXYq7FUAmv6I7hF&#xA;voS5umsePNa/WkUsYafz8VJ4+GDiDLgPc3o+u6RrME0+l3SXcEEzW8ksdSnqIAWAYijfaG67YiQP&#xA;JZQMeazXPMGk6HbR3OpTejDLIIkYKzksQSBxUE9vDrt1OCUhHmgRJSbXfzH8u6TPpUJl+sfpVkMU&#xA;kZ+BIZA7CVjQ7ERPT5U22wSyAUkQJZVk2KEl1fSopngku4VuI1LvAXX1AqryY8K8thv0ymWpxxsG&#xA;Qsf2/cmiu0/U7DUImls5hMiNxYioINK0IIBwafU48wuBsKRSJy9DsVdirsVdirsVdirzp7zQbDUd&#xA;RsNT8z6XBfVigNtLeRRzevKfWgWWN2DIzqpKilT1Fc5+PZGT13L6hz7zd7uadTHbbkyvypBMmmCY&#xA;3cV5bXNJrSWB/ViMTqCrI42ZWG4IzYdnaWeGHDI20Z8gkbDvNR0tbANq+qRaZpZbhcPM8USuzEem&#xA;BLKaKeQ2HfLNboxqIcEiRE86+zdlp8/hHiA9XRJfLtx5Ov8AWpbfTvMFhqdxGlvdQWdlcwtcLFEg&#xA;VJJfRfnIjCRd2HE1HtmLpeyxiySkT6fTw9D6RW56t2XWmUQAN9768+7uZde2ou7Oe1LtEJ0aMyRm&#xA;jqGFKqTXfNpOPECHCiaNvOLTyT5S8sJf2GteYYYP04Y7azjuJoreRmduUfEO1ZJWkTanWmYcNEAC&#xA;Ceblz1hJBA5Mn8k+SIPK0V0sd01090Y+UjIENIw1K0LV3c75bp9P4d73bXnz+JW1UybMlx3Yq7FX&#xA;mnmf8v8AybZ60NanfV0uLrUINUljsLa6vo2ltyfhKW0E7Rh/U+LevhsMrOIXbeNRICvKmaeVvKmi&#xA;+V9K/RmjxNFa+o8zB3aRmeQ7ksxJ6AD5DJRiIig1zmZGylf5i+W11zSIoxIYpoZKxyCGWcryH2lS&#xA;EMwZSAQafcaMI5MfEsJU8s1ryR9dGlWVhd3rQhxFHPc6Lq8bxSTEyg7WzKsS/WWqZHUKSwZgQaVn&#xA;Ce9kMj37MhqYhr+i6HY6oNavzezJcMY/q1naXN2eTxlTyFpFLKqEDcmgr37Zq59k45ZTkJPq5j4U&#xA;z4zVMg0fRNN0mB4rGMxpI3N+RZiT7lt8y9NpMeEVAVbEm0fmSh//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d1587242-a65e-4c40-b28c-a07730b981a8</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d1587242-a65e-4c40-b28c-a07730b981a8</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9928bc49-2007-4975-894f-9dede1945c87</stRef:instanceID>
            <stRef:documentID>xmp.did:9f005e0c-dba4-874c-ad79-ae2ac60e235d</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:892a1c23-33c0-064c-88af-6ee197e38716</stEvt:instanceID>
                  <stEvt:when>2017-03-30T17:12:21+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d1587242-a65e-4c40-b28c-a07730b981a8</stEvt:instanceID>
                  <stEvt:when>2017-05-05T13:15:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Corbert-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Corbert</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.001;PS 001.001;hotconv 1.0.70;makeotf.lib2.5.58329</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Corbert-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=61 B=41</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>61</xmpG:green>
                           <xmpG:blue>41</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=102 B=65</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=219 G=181 B=134</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>219</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>134</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=42 G=32 B=19</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>42</xmpG:red>
                           <xmpG:green>32</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=119 G=106 B=89</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>119</xmpG:red>
                           <xmpG:green>106</xmpG:green>
                           <xmpG:blue>89</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=195 G=149 B=88</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>195</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>88</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=238 G=216 B=177</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>238</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>177</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=253 G=173 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>253</xmpG:red>
                           <xmpG:green>173</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=186 G=191 B=44</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>186</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>44</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=163 G=166 B=83</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>163</xmpG:red>
                           <xmpG:green>166</xmpG:green>
                           <xmpG:blue>83</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.2</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
114.352 20.1553 mo
107.06 19.564 102.131 27.8554 99.4517 33.5737 cv
94.8658 43.3609 92.7211 54.0825 90.6158 64.6835 cv
90.2217 66.667 89.8257 68.6772 89.9527 70.6953 cv
90.3262 76.6303 95.8716 81.7622 101.817 81.6752 cv
103.547 81.6499 105.277 81.2422 106.994 81.4546 cv
108.721 81.669 110.306 82.4942 111.977 82.9814 cv
117.694 84.6484 124.396 81.7778 127.134 76.4893 cv
128.275 74.2851 128.76 71.8018 129.05 69.3364 cv
130.716 55.1557 126.332 41.0327 121.874 27.4683 cv
121.13 25.2056 120.27 22.7876 118.32 21.4204 cv
117.169 20.6137 115.752 20.2691 114.352 20.1553 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.164706 .12549 .0745098 rgb
f
100.249 81.4624 mo
99.207 81.206 98.3764 80.6489 97.6211 79.4623 cv
94.3447 74.3164 95.024 66.7075 95.9091 60.9931 cv
97.7115 49.353 101.482 38.0205 107.013 27.6215 cv
108.678 24.4922 110.844 21.1768 114.279 20.3013 cv
110.964 24.4283 108.265 29.0478 106.296 33.9614 cv
105.098 36.9531 104.17 40.0468 103.324 43.1567 cv
102.096 47.667 101.033 52.2217 100.139 56.8096 cv
98.5054 65.1865 97.7397 73.9345 102.008 81.6631 cv
101.356 81.6445 100.776 81.5918 100.249 81.4624 cv
.933333 .847059 .694118 rgb
f
102.426 72.6118 mo
101.584 61.8359 105.265 51.2783 108.893 41.0967 cv
107.845 46.3159 106.798 51.5347 105.75 56.7539 cv
105.061 60.1909 104.369 63.6514 104.323 67.1562 cv
104.289 69.706 104.601 72.2608 105.247 74.7275 cv
105.548 75.8789 107.128 81.4053 104.778 80.1997 cv
102.929 79.251 102.562 74.3506 102.426 72.6118 cv
f
114.42 57.1528 mo
117.027 45.4716 116.785 33.3677 116.53 21.4018 cv
118.966 27.7104 118.541 34.7114 118.08 41.4585 cv
117.723 46.686 117.366 51.9136 117.009 57.1416 cv
116.708 61.5357 116.402 65.9658 115.213 70.207 cv
114.243 73.6709 112.104 79.3379 108.64 80.9907 cv
108.431 77.1919 110.124 72.7622 111.153 69.1259 cv
112.28 65.1455 113.519 61.1934 114.42 57.1528 cv
f
117.274 76.5024 mo
121.346 68.938 122.881 60.2168 122.969 51.6264 cv
123.057 43.0366 121.763 34.4991 120.471 26.0059 cv
122.745 31.706 123.831 37.8018 124.742 43.8706 cv
125.665 50.0185 126.425 56.2631 125.714 62.439 cv
125.004 68.6152 122.691 74.7895 118.239 79.1289 cv
117.013 80.3242 115.199 81.8448 113.479 81.9379 cv
113.917 80.1001 116.323 78.269 117.274 76.5024 cv
f
44.918 49.8706 mo
43.8276 57.1045 44.8921 64.7407 48.4551 71.1294 cv
50.0063 73.9111 52.0835 76.4986 54.8677 78.0454 cv
57.6518 79.5927 61.2266 79.9483 64.0098 78.3994 cv
65.6451 77.4897 66.9648 75.9765 68.7666 75.4707 cv
70.5059 74.9819 72.35 75.5283 74.1572 75.5478 cv
78.1753 75.5908 81.9136 72.874 83.751 69.2998 cv
85.5879 65.7256 85.7168 61.4551 84.8193 57.538 cv
83.9223 53.6206 82.0698 49.9922 80.0791 46.5014 cv
77.1636 41.3901 73.7968 36.3481 68.9936 32.9492 cv
65.1328 30.2168 56.622 26.8838 52.6602 31.0395 cv
48.3213 35.5913 45.8291 43.8272 44.918 49.8706 cv
.164706 .12549 .0745098 rgb
f
54.5386 73.8814 mo
51.1744 71.147 49.2168 67.0469 47.8726 62.9248 cv
45.2255 54.8071 44.6758 45.5278 48.7778 38.0396 cv
49.2642 44.5967 48.8018 51.2666 50.2387 57.6831 cv
51.6758 64.0996 55.5376 70.502 61.7602 72.6274 cv
64.2305 73.4712 69.1182 75.414 63.8345 76.4522 cv
60.5859 77.0903 57.0694 75.938 54.5386 73.8814 cv
.933333 .847059 .694118 rgb
f
52.7378 31.8155 mo
52.8242 31.2661 53.164 30.5518 53.6977 30.709 cv
52.5205 43.274 57.2378 55.7759 64.0424 66.4043 cv
65.1591 68.1479 66.8389 70.0508 67.4795 71.9741 cv
64.981 72.2065 61.5054 66.3994 60.2647 64.5678 cv
58.1206 61.4034 56.3736 57.9703 55.061 54.3804 cv
52.4385 47.206 51.5503 39.375 52.7378 31.8155 cv
f
71.1412 74.3018 mo
72.5855 74.5293 73.9883 73.4619 74.6098 72.1387 cv
75.2314 70.8155 75.2422 69.2959 75.1948 67.8344 cv
74.7622 54.5069 70.3203 41.2388 62.1123 30.7295 cv
66.8369 38.2627 69.958 46.7797 71.3198 55.5625 cv
71.6655 57.793 71.8984 60.0416 72.0147 62.2959 cv
72.0659 63.2885 72.7232 67.52 71.9629 68.1889 cv
69.4048 70.44 68.5962 60.9643 68.3467 59.9751 cv
66.1054 51.0884 63.377 42.3242 60.1768 33.7363 cv
59.499 31.9175 58.352 29.7827 56.4116 29.8052 cv
62.0816 41.3457 66.3291 53.584 69.0288 66.1558 cv
69.5053 68.3745 70.0195 70.7427 69.7378 73.0122 cv
70.1713 74.017 70.0601 74.1308 71.1412 74.3018 cv
f
78.0615 69.0859 mo
78.1845 57.8579 74.6651 46.9316 70.8174 36.3823 cv
72.1875 39.0244 73.5219 41.6846 74.8208 44.3623 cv
76.8457 48.5366 78.7949 52.7871 79.8935 57.295 cv
80.9922 61.8027 81.2021 66.624 79.7646 71.0351 cv
79.4633 71.9604 79.0713 72.8926 78.3632 73.56 cv
77.7534 74.1348 76.9444 74.4385 76.1455 74.2285 cv
77.0879 72.4775 78.0366 71.355 78.0615 69.0859 cv
f
62.5829 76.6347 mo
62.4761 76.6347 62.3686 76.6313 62.261 76.6246 cv
62.7888 76.6104 63.3152 76.5542 63.8345 76.4522 cv
63.8577 76.4476 63.8806 76.4431 63.9035 76.4385 cv
63.8194 76.4659 63.7336 76.4905 63.646 76.5117 cv
63.3002 76.5955 62.9443 76.6347 62.5829 76.6347 cv
66.1292 74.9581 mo
65.6999 74.076 63.2754 73.1449 61.7602 72.6274 cv
59.8684 71.9812 58.1947 70.9397 56.7412 69.6227 cv
57.204 69.5909 57.6904 69.5873 58.1182 69.4898 cv
59.2305 69.2364 60.042 68.2221 60.3808 67.1328 cv
60.5799 66.4928 60.6445 65.8262 60.6532 65.154 cv
62.0936 67.3509 65.0749 71.9809 67.3318 71.9809 cv
67.3814 71.9809 67.4307 71.9787 67.4795 71.9741 cv
66.8389 70.0508 65.1591 68.1479 64.0424 66.4043 cv
63.4872 65.5369 62.946 64.6575 62.4206 63.7662 cv
63.0311 63.898 63.6152 64.1517 64.1226 64.5161 cv
64.7119 64.9395 65.2211 65.5141 65.915 65.727 cv
66.099 65.7835 66.2853 65.8099 66.4706 65.8099 cv
67.3279 65.8099 68.1648 65.2456 68.6617 64.4907 cv
68.7871 65.0449 68.9095 65.6003 69.0288 66.1558 cv
69.5053 68.3745 70.0195 70.7427 69.7378 73.0122 cv
69.7488 73.0376 69.7594 73.0624 69.7697 73.0866 cv
69.1009 73.1427 68.4253 73.323 67.6973 73.7402 cv
67.13 74.0655 66.631 74.5131 66.1292 74.9581 cv
.133333 .101961 .0588235 rgb
f
62.261 76.6246 mo
59.6115 76.4598 56.7446 74.3103 55.4532 72.2998 cv
55.0776 71.7153 54.7686 70.9571 55.1049 70.3486 cv
55.4199 69.779 56.0546 69.6698 56.7412 69.6227 cv
58.1947 70.9397 59.8684 71.9812 61.7602 72.6274 cv
63.2754 73.1449 65.6999 74.076 66.1292 74.9581 cv
65.4509 75.5596 64.7677 76.156 63.9035 76.4385 cv
63.8806 76.4431 63.8577 76.4476 63.8345 76.4522 cv
63.3152 76.5542 62.7888 76.6104 62.261 76.6246 cv
.745098 .678431 .556863 rgb
f
67.3318 71.9809 mo
65.0749 71.9809 62.0936 67.3509 60.6532 65.154 cv
60.6592 64.682 60.6377 64.2072 60.6157 63.7373 cv
60.8874 63.6862 61.1637 63.6611 61.4399 63.6611 cv
61.7691 63.6611 62.0985 63.6967 62.4206 63.7662 cv
62.946 64.6575 63.4872 65.5369 64.0424 66.4043 cv
65.1591 68.1479 66.8389 70.0508 67.4795 71.9741 cv
67.4307 71.9787 67.3814 71.9809 67.3318 71.9809 cv
f
73.7672 73.3358 mo
73.7641 73.3358 73.7607 73.3358 73.7576 73.3358 cv
74.1099 72.9906 74.4031 72.5788 74.6098 72.1387 cv
75.2314 70.8155 75.2422 69.2959 75.1948 67.8344 cv
74.9942 61.6546 73.9316 55.4876 72.0312 49.6025 cv
72.2826 49.2279 72.4148 48.7251 72.4814 48.2696 cv
72.9351 45.1778 72.4854 41.9585 71.2012 39.1094 cv
71.459 39.19 71.6972 39.305 71.9191 39.4465 cv
75.3103 49.0429 78.1727 58.9414 78.0615 69.0859 cv
78.0461 70.4921 77.6759 71.4578 77.1723 72.4057 cv
76.1273 72.9915 74.9637 73.3358 73.7672 73.3358 cv
71.2097 68.5335 mo
70.1096 68.5341 69.4149 66.1398 68.977 63.872 cv
69.3943 62.8007 69.3457 61.5962 69.2881 60.4399 cv
69.1387 57.4458 68.9897 54.4512 68.8404 51.4566 cv
68.8184 51.0108 68.8247 50.4951 69.1684 50.2099 cv
69.34 50.0674 69.5393 50.0213 69.7535 50.0213 cv
69.9066 50.0213 70.0673 50.0448 70.2311 50.0735 cv
70.6706 51.8869 71.034 53.719 71.3198 55.5625 cv
71.6655 57.793 71.8984 60.0416 72.0147 62.2959 cv
72.0659 63.2885 72.7232 67.52 71.9629 68.1889 cv
71.6929 68.4265 71.4421 68.5334 71.2097 68.5335 cv
.133333 .101961 .0588235 rgb
f
73.7576 73.3358 mo
73.6882 73.3357 73.6193 73.3345 73.5498 73.332 cv
72.3399 73.2896 71.3052 73.0661 70.2819 73.0661 cv
70.111 73.0661 69.9406 73.0723 69.7697 73.0866 cv
69.7594 73.0624 69.7488 73.0376 69.7378 73.0122 cv
70.0195 70.7427 69.5053 68.3745 69.0288 66.1558 cv
68.9095 65.6003 68.7871 65.0449 68.6617 64.4907 cv
68.747 64.3612 68.8222 64.2262 68.8858 64.0874 cv
68.9184 64.0162 68.9487 63.9444 68.977 63.872 cv
69.4149 66.1398 70.1096 68.5341 71.2097 68.5335 cv
71.4421 68.5334 71.6929 68.4265 71.9629 68.1889 cv
72.7232 67.52 72.0659 63.2885 72.0147 62.2959 cv
71.8984 60.0416 71.6655 57.793 71.3198 55.5625 cv
71.034 53.719 70.6706 51.8869 70.2311 50.0735 cv
70.2768 50.0814 70.3227 50.0898 70.3688 50.0982 cv
70.58 50.1366 70.7941 50.1751 71.0015 50.1751 cv
71.0999 50.1751 71.1968 50.1664 71.2911 50.145 cv
71.6115 50.072 71.8517 49.8699 72.0312 49.6025 cv
73.9316 55.4876 74.9942 61.6546 75.1948 67.8344 cv
75.2422 69.2959 75.2314 70.8155 74.6098 72.1387 cv
74.4031 72.5788 74.1099 72.9906 73.7576 73.3358 cv
.745098 .678431 .556863 rgb
f
80.1749 69.5876 mo
81.1463 65.5827 80.8732 61.3143 79.8935 57.295 cv
78.7949 52.7871 76.8457 48.5366 74.8208 44.3623 cv
74.1377 42.954 73.4447 41.5504 72.7419 40.1519 cv
73.1901 40.6393 73.5658 41.2212 73.9156 41.7822 cv
77.7148 47.8769 81.6269 54.3159 82.0103 61.4878 cv
82.1558 64.2178 81.7432 67.0552 80.3066 69.3809 cv
80.2638 69.4503 80.2198 69.5193 80.1749 69.5876 cv
.133333 .101961 .0588235 rgb
f
77.1723 72.4057 mo
77.6759 71.4578 78.0461 70.4921 78.0615 69.0859 cv
78.1727 58.9414 75.3103 49.0429 71.9191 39.4465 cv
72.221 39.6391 72.4927 39.8809 72.7419 40.1519 cv
73.4447 41.5504 74.1377 42.954 74.8208 44.3623 cv
76.8457 48.5366 78.7949 52.7871 79.8935 57.295 cv
80.8732 61.3143 81.1463 65.5827 80.1749 69.5876 cv
79.4162 70.742 78.3723 71.733 77.1723 72.4057 cv
.745098 .678431 .556863 rgb
f
113.944 80.8473 mo
112.92 80.8365 111.902 80.7463 110.92 80.4639 cv
110.594 80.3701 110.271 80.2569 109.947 80.137 cv
112.65 77.8752 114.371 73.2121 115.213 70.207 cv
115.697 68.483 116.034 66.728 116.285 64.9566 cv
120.367 59.345 121.713 52.1837 122.799 45.2241 cv
122.927 47.3552 122.991 49.4889 122.969 51.6264 cv
122.881 60.2168 121.346 68.938 117.274 76.5024 cv
116.512 77.9191 114.813 79.3775 113.944 80.8473 cv
116.286 80.7825 mo
117.015 80.2721 117.687 79.6675 118.239 79.1289 cv
122.691 74.7895 125.004 68.6152 125.714 62.439 cv
126.425 56.2631 125.665 50.0185 124.742 43.8706 cv
124.614 43.0142 124.481 42.1569 124.343 41.3006 cv
125.852 45.9207 126.364 50.8031 126.745 55.6494 cv
127.315 62.917 127.484 70.7197 123.63 76.9077 cv
122.977 77.9556 122.196 78.958 121.153 79.6196 cv
119.728 80.5241 117.982 80.6981 116.286 80.7825 cv
102.559 80.1647 mo
102.239 80.1647 101.887 80.1049 101.48 79.956 cv
101.344 79.9064 101.21 79.8512 101.079 79.7907 cv
99.9406 77.2196 99.3022 74.5516 99.0195 71.8355 cv
100.042 72.3076 101.044 72.8392 102.094 72.8392 cv
102.21 72.8392 102.326 72.8328 102.442 72.8191 cv
102.574 74.4844 102.905 78.2305 104.196 79.7259 cv
103.656 79.9528 103.163 80.1647 102.559 80.1647 cv
108.64 79.6491 mo
107.908 79.3923 107.165 79.1902 106.395 79.1902 cv
106.278 79.1902 106.161 79.1949 106.043 79.2046 cv
106.092 77.7681 105.431 75.431 105.247 74.7275 cv
104.985 73.726 104.777 72.7099 104.626 71.6856 cv
104.827 71.5094 105.023 71.3255 105.214 71.1435 cv
106.904 69.5362 108.595 67.9287 110.286 66.3213 cv
110.3 67.0347 110.842 67.5892 111.518 67.8476 cv
111.396 68.2734 111.274 68.6996 111.153 69.1259 cv
110.243 72.3414 108.814 76.1776 108.64 79.6491 cv
.133333 .101961 .0588235 rgb
f
101.079 79.7907 mo
98.0606 78.4002 96.2438 74.2234 96.5854 71.1206 cv
97.4286 71.1416 98.2298 71.4708 99.0195 71.8355 cv
99.3022 74.5516 99.9406 77.2196 101.079 79.7907 cv
.745098 .678431 .556863 rgb
f
104.196 79.7259 mo
102.905 78.2305 102.574 74.4844 102.442 72.8191 cv
102.524 72.8096 102.605 72.7966 102.687 72.7798 cv
103.425 72.6286 104.051 72.1886 104.626 71.6856 cv
104.777 72.7099 104.985 73.726 105.247 74.7275 cv
105.431 75.431 106.092 77.7681 106.043 79.2046 cv
105.949 79.2124 105.855 79.2233 105.761 79.2378 cv
105.142 79.3324 104.652 79.5344 104.196 79.7259 cv
f
109.947 80.137 mo
109.513 79.9758 109.078 79.8026 108.64 79.6491 cv
108.814 76.1776 110.243 72.3414 111.153 69.1259 cv
111.274 68.6996 111.396 68.2734 111.518 67.8476 cv
111.788 67.9507 112.08 68.0066 112.368 68.0066 cv
112.507 68.0066 112.645 67.9937 112.78 67.9668 cv
113.894 67.7442 114.758 66.8789 115.478 66.0005 cv
115.758 65.659 116.027 65.3109 116.285 64.9566 cv
116.034 66.728 115.697 68.483 115.213 70.207 cv
114.371 73.2121 112.65 77.8752 109.947 80.137 cv
f
114.164 80.8485 mo
114.091 80.8485 114.018 80.8481 113.944 80.8473 cv
114.813 79.3775 116.512 77.9191 117.274 76.5024 cv
121.346 68.938 122.881 60.2168 122.969 51.6264 cv
122.991 49.4889 122.927 47.3552 122.799 45.2241 cv
122.888 44.6598 122.974 44.0964 123.06 43.5357 cv
123.2 42.623 123.458 41.5566 124.314 41.2133 cv
124.324 41.2425 124.334 41.2714 124.343 41.3006 cv
124.481 42.1569 124.614 43.0142 124.742 43.8706 cv
125.665 50.0185 126.425 56.2631 125.714 62.439 cv
125.004 68.6152 122.691 74.7895 118.239 79.1289 cv
117.687 79.6675 117.015 80.2721 116.286 80.7825 cv
116.158 80.7888 116.03 80.7947 115.903 80.8003 cv
115.326 80.8256 114.744 80.8485 114.164 80.8485 cv
f
55.6235 102.042 mo
56.1543 102.585 57.1934 102.902 58.1948 102.902 cv
59.3184 102.902 60.4155 102.483 60.4155 101.473 cv
60.4155 100.286 59.2861 100.194 57.9229 99.9395 cv
56.6982 99.7109 55.5571 99.3979 55.5571 98.1113 cv
55.5571 96.7798 56.9746 96.166 58.436 96.166 cv
59.2671 96.166 60.1196 96.3652 60.7441 96.7427 cv
60.3955 97.1699 li
59.8501 96.8311 59.1123 96.6543 58.3696 96.6543 cv
57.2231 96.6543 56.1621 97.1167 56.1621 98.0835 cv
56.1621 99.0391 57.1211 99.2637 58.0933 99.4473 cv
59.6045 99.7354 61.0439 99.9126 61.0439 101.472 cv
61.0439 102.813 59.6084 103.406 58.1787 103.406 cv
57.0742 103.406 55.8794 103.059 55.2642 102.446 cv
55.6235 102.042 li
cp
0 0 0 rgb
f
68.1758 100.111 mo
68.1758 102.061 67.5454 103.416 65.3838 103.416 cv
63.2451 103.416 62.5918 102.101 62.5918 100.11 cv
62.5918 96.29 li
63.1865 96.29 li
63.1865 100.066 li
63.1865 101.88 63.7109 102.874 65.3838 102.874 cv
67.0732 102.874 67.5815 101.85 67.5815 100.066 cv
67.5815 96.29 li
68.1758 96.29 li
68.1758 100.111 li
cp
f
74.7329 103.286 mo
70.5488 97.2827 li
70.5488 103.286 li
69.9546 103.286 li
69.9546 96.29 li
70.6729 96.29 li
74.8584 102.296 li
74.8584 96.29 li
75.4531 96.29 li
75.4531 103.286 li
74.7329 103.286 li
cp
f
77.9165 96.7886 mo
77.9165 99.5435 li
81.2061 99.5435 li
81.2061 100.042 li
77.9165 100.042 li
77.9165 103.286 li
77.3218 103.286 li
77.3218 96.29 li
81.521 96.29 li
81.521 96.7886 li
77.9165 96.7886 li
cp
f
87.2988 102.807 mo
87.2988 103.286 li
83.0615 103.286 li
83.0615 96.29 li
83.6563 96.29 li
83.6563 102.807 li
87.2988 102.807 li
cp
f
88.5112 99.7837 mo
88.5112 101.645 89.6143 102.901 91.4297 102.901 cv
93.2959 102.901 94.3574 101.648 94.3574 99.7837 cv
94.3574 97.9434 93.2773 96.6753 91.4297 96.6753 cv
89.5811 96.6753 88.5112 97.9438 88.5112 99.7837 cv
cp
91.4297 96.1719 mo
93.6621 96.1719 94.9521 97.7114 94.9521 99.7837 cv
94.9521 101.879 93.6816 103.406 91.4297 103.406 cv
89.2344 103.406 87.9165 101.88 87.9165 99.7837 cv
87.9165 97.7134 89.1943 96.1714 91.4297 96.1714 cv
91.4297 96.1719 li
cp
f
103.11 102.398 mo
105.166 96.29 li
105.82 96.29 li
103.397 103.286 li
102.786 103.286 li
100.795 97.251 li
98.8047 103.286 li
98.1934 103.286 li
95.7715 96.29 li
96.4248 96.29 li
98.4805 102.398 li
100.471 96.2896 li
101.12 96.2896 li
103.11 102.398 li
cp
f
107.826 96.7886 mo
107.826 99.4297 li
111.287 99.4297 li
111.287 99.9282 li
107.826 99.9282 li
107.826 102.788 li
111.602 102.788 li
111.602 103.286 li
107.231 103.286 li
107.231 96.29 li
111.602 96.29 li
111.602 96.7886 li
107.826 96.7886 li
cp
f
113.735 100.17 mo
115.963 100.17 li
117.04 100.17 117.644 99.5117 117.644 98.4722 cv
117.644 97.4453 117.029 96.7793 115.963 96.7793 cv
113.735 96.7793 li
113.735 100.17 li
cp
116.019 96.2896 mo
117.422 96.2896 118.239 97.1836 118.239 98.4712 cv
118.239 99.6201 117.615 100.431 116.5 100.599 cv
118.488 103.286 li
117.785 103.286 li
115.886 100.659 li
113.736 100.659 li
113.736 103.286 li
113.142 103.286 li
113.142 96.2896 li
116.019 96.2896 li
cp
f
210.613 77.7872 mo
201.976 65.1054 198.733 49.6088 195.995 34.5113 cv
194.934 28.6592 193.916 22.7227 194.385 16.7929 cv
201.864 24.8164 206.053 35.2783 210.081 45.4805 cv
213.581 54.3433 217.102 63.2524 219.31 72.5434 cv
219.894 74.9975 222.578 82.1695 219.612 83.7216 cv
216.359 85.4243 212.081 79.9429 210.613 77.7872 cv
.858824 .709804 .52549 rgb
f
203.343 43.1718 mo
200.806 39.7075 198.21 36.2842 195.691 32.8099 cv
195.476 31.5898 195.271 30.3664 195.083 29.1406 cv
196.515 30.0503 199.139 33.7583 199.751 34.4522 cv
199.871 34.5879 200.003 34.7309 200.181 34.7657 cv
200.211 34.7716 200.24 34.7744 200.268 34.7744 cv
200.672 34.7744 200.866 34.1871 200.889 33.7456 cv
201.018 31.231 201.147 28.7163 201.276 26.2017 cv
201.814 27.1189 202.332 28.05 202.832 28.9924 cv
202.949 33.718 203.069 38.4522 203.343 43.1718 cv
.772549 .639216 .470588 rgb
f
219.193 81.7285 mo
220.616 82.0957 221.466 83.8721 220.888 85.2236 cv
220.31 86.5752 218.476 87.1948 217.18 86.4995 cv
216.668 86.2246 216.227 85.7299 216.207 85.1489 cv
216.196 84.8311 216.31 84.5224 216.448 84.2364 cv
216.93 83.2422 217.74 82.4106 218.721 81.9018 cv
219.136 81.687 218.726 81.7559 219.193 81.7285 cv
.858824 .709804 .52549 rgb
f
222.093 80.3111 mo
222.86 76.9878 222.015 73.5258 221.116 70.2364 cv
216.562 53.5874 210.492 37.3531 203.006 21.8007 cv
202.712 24.0787 202.768 26.3858 202.824 28.6816 cv
203.072 38.7124 203.323 48.7842 205.004 58.6758 cv
206.184 65.6118 208.084 72.4697 211.092 78.8457 cv
212.024 80.8222 213.833 86.0576 216.179 86.4336 cv
219.001 86.8852 221.593 82.4761 222.093 80.3111 cv
f
222.086 80.3412 mo
222.086 80.3401 222.086 80.3394 222.086 80.3383 cv
222.086 80.3393 222.086 80.3402 222.086 80.3412 cv
222.089 80.3286 mo
222.089 80.3271 222.089 80.3256 222.09 80.3242 cv
222.089 80.3256 222.089 80.3271 222.089 80.3286 cv
.898039 .898039 .898039 rgb
f
220.795 82.7149 mo
221.13 81.256 220.963 79.6522 220.707 78.1499 cv
218.859 67.3169 213.348 57.4522 207.092 48.417 cv
205.871 46.6546 204.619 44.9144 203.352 43.1838 cv
203.251 41.4591 203.17 39.7323 203.103 38.0044 cv
203.867 39.7124 204.87 41.3022 205.872 42.8828 cv
209.128 48.02 212.385 53.1578 215.642 58.2954 cv
215.647 57.8302 216.127 57.543 216.602 57.543 cv
216.767 57.543 216.932 57.5777 217.076 57.6518 cv
217.214 57.7232 217.336 57.815 217.446 57.9214 cv
218.761 61.998 219.985 66.1045 221.116 70.2364 cv
221.769 72.6264 222.394 75.1075 222.392 77.5602 cv
222.392 78.4833 222.303 79.4024 222.093 80.3111 cv
222.093 80.3111 li
222.092 80.3154 222.091 80.3198 222.09 80.3242 cv
222.089 80.3256 222.089 80.3271 222.089 80.3286 cv
222.088 80.3318 222.087 80.335 222.086 80.3383 cv
222.086 80.3394 222.086 80.3401 222.086 80.3412 cv
221.943 80.9423 221.638 81.7114 221.219 82.499 cv
221.083 82.5815 220.941 82.654 220.795 82.7149 cv
.772549 .639216 .470588 rgb
f
195.206 54.289 mo
190.791 43.918 187.929 32.75 188.104 21.4795 cv
193.738 30.915 200.835 39.3823 207.092 48.417 cv
213.348 57.4522 218.859 67.3169 220.707 78.1499 cv
221.06 80.2182 221.243 82.479 220.182 84.2891 cv
215.407 92.4263 208.274 78.3443 206.362 75.2627 cv
202.185 68.5302 198.313 61.5864 195.206 54.289 cv
.933333 .847059 .694118 rgb
f
216.365 72.6035 mo
214.015 67.229 211.281 62.0302 208.33 56.9629 cv
206.865 54.4468 205.346 51.9623 203.791 49.5005 cv
202.299 47.1363 200.249 44.7231 199.115 42.187 cv
200.141 42.145 202.481 46.2309 203.165 47.1631 cv
204.559 49.0635 205.924 50.9859 207.227 52.9507 cv
209.829 56.877 212.198 60.9804 214 65.3403 cv
214.967 67.6812 215.365 70.3164 216.365 72.6035 cv
.858824 .709804 .52549 rgb
f
216.196 83.8139 mo
212.885 79.5889 209.956 75.0659 207.453 70.3174 cv
206.286 68.1021 205.127 64.7476 203.152 63.1714 cv
202.665 64.4902 204.545 67.0732 205.135 68.2569 cv
206.101 70.1943 207.117 72.1084 208.232 73.9639 cv
210.415 77.5942 212.991 81.02 216.196 83.8139 cv
f
200.284 54.9419 mo
197.016 49.7017 194.486 44.002 192.792 38.063 cv
192.143 35.7856 191.626 33.3545 190.442 31.2944 cv
192.183 39.7085 194.378 48.3877 200.284 54.9419 cv
cp
f
216.854 85.8088 mo
216.505 85.8088 216.152 85.7503 215.822 85.6421 cv
214.915 85.3442 214.151 84.7266 213.447 84.082 cv
211.45 82.2559 209.399 79.9487 208.256 77.4663 cv
207.565 75.9661 208.051 76.0042 209.18 75.4859 cv
211.154 78.5476 213.443 81.4139 216.196 83.8139 cv
213.98 80.9863 211.935 78.0255 210.075 74.9527 cv
210.848 74.3165 211.13 73.4293 211.283 72.3115 cv
211.778 68.6996 211.326 65.0704 210.855 61.4362 cv
212.845 65.0809 214.701 68.7983 216.365 72.6035 cv
216.365 72.6035 li
216.365 72.6035 li
215.365 70.3164 214.967 67.6812 214 65.3403 cv
212.979 62.8698 211.775 60.4812 210.451 58.161 cv
210.378 57.4976 210.314 56.8347 210.265 56.1714 cv
212.446 57.3033 213.523 59.77 214.409 62.0615 cv
215.245 64.2246 216.056 66.3969 216.841 68.5791 cv
218.48 73.1358 220.029 77.9121 219.513 82.7275 cv
219.416 83.6387 219.206 84.6123 218.524 85.2236 cv
218.071 85.6293 217.467 85.8088 216.854 85.8088 cv
.839216 .760784 .623529 rgb
f
216.365 72.6035 mo
214.701 68.7983 212.845 65.0809 210.855 61.4362 cv
210.714 60.345 210.571 59.2527 210.451 58.161 cv
211.775 60.4812 212.979 62.8698 214 65.3403 cv
214.967 67.6812 215.365 70.3164 216.365 72.6035 cv
.772549 .639216 .470588 rgb
f
216.196 83.8139 mo
213.443 81.4139 211.154 78.5476 209.18 75.4859 cv
209.259 75.4498 209.34 75.4109 209.425 75.3686 cv
209.674 75.2448 209.889 75.106 210.075 74.9527 cv
211.935 78.0255 213.98 80.9863 216.196 83.8139 cv
f
229.845 59.6636 mo
231.187 53.7407 233.399 48.0161 236.391 42.731 cv
239.786 36.7319 244.151 31.3384 248.71 26.1675 cv
251.582 22.9087 254.629 19.6568 258.508 17.7002 cv
258.138 19.5278 257.768 21.3555 257.398 23.1831 cv
257.355 23.397 257.319 23.6435 257.457 23.8135 cv
257.657 24.0597 258.004 23.9537 258.349 23.8478 cv
258.701 23.7396 259.049 23.6315 259.233 23.8979 cv
257.617 34.2934 254.073 44.5215 250.691 54.5049 cv
248.989 59.5297 247.003 64.4859 244.379 69.107 cv
242.063 73.1841 239.962 77.6431 234.648 77.7705 cv
226.325 77.9697 228.775 64.3843 229.845 59.6636 cv
.933333 .847059 .694118 rgb
f
231.031 75.312 mo
231.979 75.9321 232.926 76.5523 233.873 77.1719 cv
233.97 77.2353 234.076 77.3155 234.081 77.4306 cv
234.087 77.5523 233.978 77.6441 233.879 77.7144 cv
233.268 78.1509 232.588 78.6064 231.839 78.5502 cv
231.179 78.5005 230.587 78.024 230.333 77.4121 cv
230.08 76.7998 230.147 76.08 230.446 75.4893 cv
231.031 75.312 li
.858824 .709804 .52549 rgb
f
246.734 46.4809 mo
248.225 39.8115 252.078 33.9619 255.127 27.8457 cv
255.658 26.7788 255.96 25.3775 256.574 24.4262 cv
257.001 24.6767 257.42 24.981 257.828 25.2676 cv
256.159 28.8862 253.822 32.3038 251.965 35.8472 cv
251.048 37.5971 250.153 39.3584 249.282 41.1308 cv
248.478 42.7642 247.131 44.7071 246.734 46.4809 cv
f
238.566 45.1519 mo
240.825 40.3848 243.51 35.6621 247.569 32.2939 cv
243.445 38.2778 239.279 44.3389 236.729 51.1445 cv
235.989 53.1211 235.39 55.1474 234.792 57.1723 cv
234.058 59.6577 233.321 62.1446 232.703 64.6617 cv
232.086 67.1738 231.932 69.8794 231.251 72.3359 cv
230.669 70.564 231.515 67.5186 231.821 65.664 cv
232.216 63.2793 232.759 60.9199 233.419 58.5952 cv
234.731 53.9726 236.51 49.4912 238.566 45.1519 cv
f
243.952 49.2613 mo
242.898 50.666 242.441 53.2446 241.814 54.899 cv
241.065 56.8745 240.315 58.8501 239.566 60.8257 cv
238.118 64.647 236.912 68.7359 235.142 72.4087 cv
235.303 68.4556 236.857 64.1567 238.251 60.4878 cv
239.745 56.5571 241.656 52.7846 243.952 49.2613 cv
f
253.895 39.7236 mo
251.689 44.9947 249.383 50.2227 246.976 55.4047 cv
246.516 56.395 244.107 62.272 242.948 61.5664 cv
244.154 57.7978 246.289 54.0966 248.064 50.563 cv
249.906 46.8964 251.851 43.2817 253.895 39.7236 cv
f
234.483 76.0291 mo
232.581 76.0291 230.672 75.1112 229.996 73.3686 cv
229.684 72.5635 229.657 71.6801 229.635 70.8169 cv
229.607 69.7788 228.983 66.7778 229.846 66.0405 cv
230.073 65.8456 230.359 65.8353 230.65 65.8353 cv
230.668 65.8353 230.685 65.8354 230.702 65.8354 cv
230.72 65.8354 230.738 65.8355 230.756 65.8355 cv
230.979 65.8355 231.2 65.8293 231.396 65.7392 cv
231.582 65.6541 231.732 65.543 231.863 65.4168 cv
231.849 65.4991 231.835 65.5816 231.821 65.664 cv
231.515 67.5186 230.669 70.564 231.251 72.3359 cv
231.932 69.8794 232.086 67.1738 232.703 64.6617 cv
232.738 64.5186 232.774 64.3755 232.81 64.2326 cv
234.11 62.3251 235.637 60.5736 237.352 59.0273 cv
237.796 58.6269 238.273 58.2285 238.852 58.0742 cv
238.986 58.0383 239.122 58.0166 239.259 58.0049 cv
238.905 58.8248 238.568 59.6527 238.251 60.4878 cv
236.857 64.1567 235.303 68.4556 235.142 72.4087 cv
236.912 68.7359 238.118 64.647 239.566 60.8257 cv
239.916 59.9025 240.267 58.9794 240.617 58.0562 cv
240.685 58.0598 240.753 58.0623 240.821 58.0634 cv
240.848 58.0639 240.874 58.0641 240.9 58.0641 cv
242.64 58.0641 244.144 57.1273 245.367 55.8274 cv
244.432 57.7136 243.568 59.6311 242.948 61.5664 cv
243.014 61.6062 243.083 61.625 243.156 61.625 cv
244.373 61.625 246.542 56.3392 246.976 55.4047 cv
248.186 52.7982 249.372 50.1799 250.532 47.5504 cv
251.014 46.953 251.558 46.4125 252.193 45.9595 cv
251.522 48.977 250.443 51.8862 249.367 54.7842 cv
247.272 60.4258 245.142 66.1382 241.684 71.063 cv
240.276 73.0659 238.538 75.0054 236.21 75.7622 cv
235.659 75.9411 235.071 76.0291 234.483 76.0291 cv
.839216 .760784 .623529 rgb
f
231.251 72.3359 mo
230.669 70.564 231.515 67.5186 231.821 65.664 cv
231.835 65.5816 231.849 65.4991 231.863 65.4168 cv
232.194 65.0962 232.399 64.6776 232.739 64.3364 cv
232.763 64.3018 232.786 64.2671 232.81 64.2326 cv
232.774 64.3755 232.738 64.5186 232.703 64.6617 cv
232.086 67.1738 231.932 69.8794 231.251 72.3359 cv
.772549 .639216 .470588 rgb
f
235.142 72.4087 mo
235.303 68.4556 236.857 64.1567 238.251 60.4878 cv
238.568 59.6527 238.905 58.8248 239.259 58.0049 cv
239.356 57.9966 239.453 57.9932 239.55 57.9932 cv
239.903 57.9932 240.261 58.0378 240.617 58.0562 cv
240.267 58.9794 239.916 59.9025 239.566 60.8257 cv
238.118 64.647 236.912 68.7359 235.142 72.4087 cv
f
243.156 61.625 mo
243.083 61.625 243.014 61.6062 242.948 61.5664 cv
243.568 59.6311 244.432 57.7136 245.367 55.8274 cv
246.147 54.9975 246.812 54.0197 247.351 53.0429 cv
248.368 51.1964 249.227 49.1652 250.532 47.5504 cv
249.372 50.1799 248.186 52.7982 246.976 55.4047 cv
246.542 56.3392 244.373 61.625 243.156 61.625 cv
f
257.36 23.4942 mo
257.36 23.3908 257.378 23.2834 257.398 23.1831 cv
257.415 23.1014 257.431 23.0195 257.448 22.9378 cv
257.448 22.9376 257.448 22.9376 257.448 22.9375 cv
257.398 23.1831 li
257.378 23.2834 257.36 23.3908 257.36 23.4942 cv
.898039 .898039 .898039 rgb
f
252.563 35.7842 mo
252.606 35.2253 252.725 34.6826 252.89 34.1514 cv
254.554 31.2029 256.427 28.306 257.828 25.2676 cv
257.468 25.0146 257.099 24.748 256.724 24.5166 cv
256.944 23.9745 257.182 23.4454 257.448 22.9378 cv
257.431 23.0195 257.415 23.1014 257.398 23.1831 cv
257.378 23.2834 257.36 23.3908 257.36 23.4942 cv
257.36 23.6113 257.384 23.7232 257.457 23.8135 cv
257.547 23.9252 257.668 23.9647 257.805 23.9647 cv
258.033 23.9647 258.305 23.8561 258.559 23.7876 cv
258.55 24.0986 258.451 24.4034 258.346 24.6982 cv
256.932 28.6328 254.981 32.3735 252.563 35.7842 cv
.839216 .760784 .623529 rgb
f
252.89 34.1514 mo
253.249 33.0009 253.831 31.9035 254.354 30.8086 cv
255.304 28.8237 255.889 26.5755 256.724 24.5166 cv
257.099 24.748 257.468 25.0146 257.828 25.2676 cv
256.427 28.306 254.554 31.2029 252.89 34.1514 cv
.772549 .639216 .470588 rgb
f
214.55 99.7837 mo
214.55 101.645 215.653 102.901 217.469 102.901 cv
219.335 102.901 220.396 101.648 220.396 99.7837 cv
220.396 97.9434 219.316 96.6753 217.469 96.6753 cv
215.62 96.6753 214.55 97.9438 214.55 99.7837 cv
cp
217.469 96.1719 mo
219.701 96.1719 220.991 97.7114 220.991 99.7837 cv
220.991 101.879 219.721 103.406 217.469 103.406 cv
215.273 103.406 213.956 101.88 213.956 99.7837 cv
213.956 97.7134 215.233 96.1714 217.469 96.1714 cv
217.469 96.1719 li
cp
0 0 0 rgb
f
226.561 100.856 mo
224.938 96.9282 li
223.316 100.856 li
226.561 100.856 li
cp
227.542 103.286 mo
226.747 101.355 li
223.13 101.355 li
222.335 103.286 li
221.711 103.286 li
224.623 96.29 li
225.254 96.29 li
228.166 103.286 li
227.542 103.286 li
cp
f
231.039 96.7886 mo
231.039 103.286 li
230.444 103.286 li
230.444 96.7886 li
227.841 96.7886 li
227.841 96.29 li
233.643 96.29 li
233.643 96.7886 li
231.039 96.7886 li
cp
f
330.769 31.9385 mo
329.758 34.2627 328.9 35.9194 326.692 37.2998 cv
317.494 43.0493 316.57 59.8643 318.204 69.4019 cv
318.856 73.2094 320.148 77.1914 322.799 80.0976 cv
325.861 83.4556 330.159 83.6377 334.463 83.3691 cv
341.577 82.9258 348.446 81.1645 355.009 78.419 cv
357.121 77.5347 358.765 76.5024 360.127 74.5629 cv
363.981 69.0747 361.689 60.8921 359.436 55.3052 cv
357.497 50.4995 355.14 45.7041 351.799 41.7065 cv
349.289 38.7041 345.653 34.6562 341.643 33.9956 cv
340.808 33.858 339.953 33.831 339.134 33.6187 cv
336.695 32.9863 335.658 29.2705 333.188 29.6494 cv
332.043 29.8252 331.233 30.875 330.769 31.9385 cv
.992157 .678431 0 rgb
f
341.643 33.9956 mo
340.808 33.858 339.953 33.831 339.134 33.6187 cv
336.695 32.9863 335.658 29.2705 333.188 29.6494 cv
332.043 29.8252 331.233 30.875 330.769 31.9385 cv
329.758 34.2627 328.9 35.9194 326.692 37.2998 cv
325.179 38.2456 323.894 39.4957 322.803 40.9589 cv
322.919 41.2148 323.056 41.4648 323.218 41.7065 cv
326.151 46.0547 328.846 50.564 331.285 55.2075 cv
332.021 56.6079 333.016 59.0864 334.523 59.8418 cv
336.158 60.6616 339.473 60.1314 341.202 59.7573 cv
345.719 58.7808 346.582 55.8741 346.584 51.6353 cv
346.585 47.5391 347.876 42.4673 348.105 37.7105 cv
346.175 35.9087 343.973 34.3794 341.643 33.9956 cv
.960784 .811765 .4 rgb
f
389.571 20.4312 mo
391.468 21.4961 390.234 24.6514 392.5 25.8388 cv
397.241 28.3247 398.795 33.6641 400.243 38.4936 cv
402.052 44.5234 403.047 50.7979 403.179 57.0923 cv
403.267 61.2412 402.903 65.6358 400.529 69.04 cv
398.951 71.3046 396.582 72.9444 394.018 73.9658 cv
389.358 75.8208 384.063 75.7036 379.254 74.2832 cv
374.557 72.896 370.035 70.0894 367.805 65.7276 cv
364.127 58.5318 365.497 52.333 368.315 45.1343 cv
369.823 41.2827 371.708 37.5625 374.068 34.1607 cv
375.825 31.6285 378.585 26.6338 381.727 25.7198 cv
382.69 25.439 383.827 25.479 384.539 24.7706 cv
384.811 24.501 384.983 24.1513 385.152 23.8081 cv
385.845 22.397 387.021 19.2871 389.386 20.3384 cv
389.571 20.4312 li
.992157 .678431 0 rgb
f
387.112 52.2046 mo
389.283 52.5181 391.61 52.8095 393.579 51.8404 cv
395.874 50.7104 397.093 48.1313 397.617 45.6269 cv
398.142 43.1231 398.15 40.5156 398.88 38.0634 cv
399.063 37.4468 399.299 36.8433 399.557 36.2466 cv
398.242 32.0928 396.514 27.9433 392.5 25.8388 cv
390.234 24.6514 391.468 21.4961 389.571 20.4312 cv
389.386 20.3384 li
387.021 19.2871 385.845 22.397 385.152 23.8081 cv
384.983 24.1513 384.811 24.501 384.539 24.7706 cv
383.827 25.479 382.69 25.439 381.727 25.7198 cv
379.632 26.3291 377.71 28.7515 376.139 31.0494 cv
376.565 33.4243 377.084 35.8051 377.155 38.2031 cv
377.26 41.7422 376.48 45.6748 378.576 48.5283 cv
380.462 51.0962 383.958 51.749 387.112 52.2046 cv
.960784 .811765 .4 rgb
f
332.05 81.8878 mo
330.118 81.8878 328.339 81.5692 327.13 80.6308 cv
324.256 78.3994 326.139 76.0346 329.042 74.1211 cv
331.923 72.2227 335.809 70.769 337.045 70.3335 cv
340.42 69.1435 343.867 67.9492 346.728 65.7979 cv
349.891 63.4185 351.033 60.3794 352.184 56.7563 cv
352.667 55.2317 353.297 52.3548 355.065 52.3548 cv
355.354 52.3548 355.673 52.4314 356.026 52.603 cv
358.747 53.9239 359.267 60.4009 359.688 63.0034 cv
360.346 67.06 360.053 70.8169 357.298 74.0141 cv
353.893 77.9668 345.649 79.7822 340.783 80.6767 cv
338.61 81.076 335.134 81.8878 332.05 81.8878 cv
.890196 .607843 0 rgb
f
386.406 73.7698 mo
384.506 73.7698 382.59 73.4339 380.78 72.8545 cv
378.035 71.9761 371.113 69.645 372.147 65.7168 cv
373.006 62.4547 377.784 61.403 381.319 61.403 cv
382.2 61.403 383.003 61.4684 383.649 61.5811 cv
388.215 62.3769 402.054 68.5244 391.666 72.7832 cv
389.997 73.4673 388.209 73.7698 386.406 73.7698 cv
f
397.171 61.7795 mo
396.886 61.7795 396.575 61.6714 396.238 61.4262 cv
394.988 60.5171 396.058 55.2691 396.025 53.9785 cv
395.992 52.6589 395.882 51.3502 395.719 50.0484 cv
396.687 48.7952 397.289 47.1964 397.617 45.6269 cv
397.942 44.0767 398.069 42.4865 398.292 40.9183 cv
399.619 45.705 399.977 50.8703 399.878 55.854 cv
399.855 56.9882 399.07 61.7795 397.171 61.7795 cv
f
395.719 50.0484 mo
394.947 43.8896 392.982 37.8927 392.323 31.7124 cv
392.269 31.2104 392.471 30.4933 392.901 30.4933 cv
392.946 30.4933 392.994 30.5014 393.045 30.5186 cv
395.575 33.5595 397.238 37.1198 398.292 40.9183 cv
398.069 42.4865 397.942 44.0767 397.617 45.6269 cv
397.289 47.1964 396.687 48.7952 395.719 50.0484 cv
.862745 .729412 .360784 rgb
f
350.906 49.7592 mo
349.312 49.7592 348.112 48.4025 347.07 46.8481 cv
347.046 46.8119 347.022 46.7755 346.998 46.7391 cv
347.292 44.585 347.676 42.324 347.915 40.0849 cv
349.636 42.0936 351.347 44.1115 352.893 46.2578 cv
354.195 48.0674 353.542 49.627 351.053 49.7554 cv
351.004 49.7579 350.955 49.7592 350.906 49.7592 cv
.890196 .607843 0 rgb
f
346.998 46.7391 mo
346.131 45.4318 345.371 44.0051 344.578 43.1387 cv
343.854 42.3481 341.967 40.146 342.504 38.7945 cv
342.806 38.0315 343.462 37.737 344.191 37.737 cv
344.911 37.737 345.703 38.025 346.294 38.4327 cv
346.795 38.7788 347.197 39.2465 347.593 39.7085 cv
347.7 39.8339 347.808 39.9595 347.915 40.0849 cv
347.676 42.324 347.292 44.585 346.998 46.7391 cv
.862745 .729412 .360784 rgb
f
351.861 102.817 mo
351.328 103.183 350.646 103.396 349.833 103.396 cv
347.598 103.396 346.32 101.854 346.32 99.7837 cv
346.32 97.7134 347.598 96.1714 349.833 96.1714 cv
350.646 96.1714 351.328 96.3838 351.861 96.75 cv
351.487 97.1587 li
351.047 96.8438 350.5 96.6753 349.833 96.6753 cv
347.984 96.6753 346.915 97.9438 346.915 99.7837 cv
346.915 101.623 347.984 102.892 349.833 102.892 cv
350.5 102.892 351.047 102.723 351.487 102.408 cv
351.861 102.817 li
cp
0 0 0 rgb
f
353.715 99.7837 mo
353.715 101.645 354.817 102.901 356.633 102.901 cv
358.499 102.901 359.561 101.648 359.561 99.7837 cv
359.561 97.9434 358.48 96.6753 356.633 96.6753 cv
354.784 96.6753 353.715 97.9438 353.715 99.7837 cv
cp
356.633 96.1719 mo
358.865 96.1719 360.155 97.7114 360.155 99.7837 cv
360.155 101.879 358.885 103.406 356.633 103.406 cv
354.438 103.406 353.12 101.88 353.12 99.7837 cv
353.12 97.7134 354.397 96.1714 356.633 96.1714 cv
356.633 96.1719 li
cp
f
362.429 100.17 mo
364.657 100.17 li
365.733 100.17 366.338 99.5117 366.338 98.4722 cv
366.338 97.4453 365.723 96.7793 364.657 96.7793 cv
362.429 96.7793 li
362.429 100.17 li
cp
364.713 96.2896 mo
366.115 96.2896 366.933 97.1836 366.933 98.4712 cv
366.933 99.6201 366.309 100.431 365.194 100.599 cv
367.182 103.286 li
366.479 103.286 li
364.58 100.659 li
362.43 100.659 li
362.43 103.286 li
361.835 103.286 li
361.835 96.2896 li
364.713 96.2896 li
cp
f
373.506 103.286 mo
369.322 97.2827 li
369.322 103.286 li
368.728 103.286 li
368.728 96.29 li
369.446 96.29 li
373.632 102.296 li
373.632 96.29 li
374.226 96.29 li
374.226 103.286 li
373.506 103.286 li
cp
f
82.6924 150.754 mo
87.2099 154.89 90.7006 160.054 93.419 165.542 cv
96.6553 172.076 98.8614 179.588 97.0053 186.639 cv
95.7764 191.308 92.7163 196.876 88.6138 199.603 cv
84.0762 202.617 75.8818 203.039 70.7031 201.793 cv
64.832 200.381 59.2964 197.172 55.7178 192.232 cv
53.9716 189.821 52.7236 187.093 51.4877 184.385 cv
49.7392 180.556 47.982 176.7 46.9536 172.618 cv
46.4746 170.716 46.1289 168.979 46.0455 167.012 cv
45.8994 163.577 45.7666 160.047 46.8828 156.795 cv
47.7148 154.373 49.1152 151.991 50.6958 149.984 cv
51.1767 149.373 51.6641 148.742 51.8945 148 cv
52.2895 146.727 51.8721 145.366 51.7407 144.039 cv
51.3077 139.645 54.2944 135.366 58.9834 136.782 cv
62.0567 137.71 63.1396 140.017 65.4873 141.718 cv
67.7666 143.369 70.8374 143.484 73.3618 144.595 cv
76.7881 146.104 79.934 148.229 82.6924 150.754 cv
.933333 .847059 .694118 rgb
f
65.3403 146.476 mo
56.4688 145.963 50.7954 155.582 50.8169 163.401 cv
50.83 168.069 52.1675 172.633 53.7778 177.015 cv
55.768 182.43 58.25 187.772 62.0932 192.075 cv
65.9366 196.378 71.311 199.567 77.0771 199.754 cv
81.0664 199.884 85.0874 198.542 88.1982 196.042 cv
89.3413 195.123 90.3726 194.043 91.0966 192.768 cv
92.0161 191.149 92.4053 189.284 92.622 187.436 cv
93.1792 182.689 92.6724 177.822 91.1494 173.292 cv
88.6987 166.004 83.7519 159.826 78.4248 154.28 cv
74.8194 150.527 70.5362 146.776 65.3403 146.476 cv
1 .905882 .745098 rgb
f
78.8348 200.715 mo
77.1239 200.715 75.3962 200.533 73.7729 200.418 cv
68.4448 200.04 63.2798 197.686 59.499 193.912 cv
59.0342 193.448 58.5639 192.906 58.5307 192.25 cv
58.4677 190.996 60.0508 191.015 60.9043 190.86 cv
60.9511 190.852 60.9978 190.843 61.0447 190.835 cv
61.3826 191.257 61.732 191.671 62.0932 192.075 cv
65.9366 196.378 71.311 199.567 77.0771 199.754 cv
77.2539 199.76 77.4311 199.763 77.6079 199.763 cv
81.4213 199.763 85.2253 198.431 88.1982 196.042 cv
89.127 195.295 89.982 194.442 90.6583 193.465 cv
90.921 193.717 91.1909 193.962 91.4674 194.201 cv
91.4096 194.349 91.3456 194.495 91.2745 194.638 cv
90.0429 197.117 86.209 199.002 83.7285 199.95 cv
82.1895 200.539 80.5203 200.715 78.8348 200.715 cv
85.7566 162.978 mo
83.6858 160.048 81.3058 157.307 78.8317 154.706 cv
78.9215 154.757 79.0168 154.794 79.1196 154.81 cv
79.1612 154.816 79.2025 154.819 79.2435 154.819 cv
79.6126 154.819 79.9612 154.577 80.3184 154.263 cv
80.9874 153.674 81.6875 152.829 82.6104 152.829 cv
82.6688 152.829 82.7283 152.832 82.7886 152.839 cv
83.9595 152.977 84.8579 154.155 85.524 155.011 cv
86.1822 155.857 86.8788 156.887 87.4695 157.982 cv
87.3108 158.393 87.1568 158.804 87.0069 159.216 cv
86.5569 160.454 86.1365 161.709 85.7566 162.978 cv
.839216 .760784 .623529 rgb
f
77.6079 199.763 mo
77.4311 199.763 77.2539 199.76 77.0771 199.754 cv
71.311 199.567 65.9366 196.378 62.0932 192.075 cv
61.732 191.671 61.3826 191.257 61.0447 190.835 cv
62.2698 190.613 63.4951 190.392 64.7202 190.17 cv
66.2607 189.891 67.811 189.61 69.2793 189.066 cv
82.1264 184.303 82.0635 167.179 76.4654 157.113 cv
74.6392 153.83 71.9175 150.952 68.4722 149.454 cv
66.8589 148.753 64.9986 148.278 63.9678 146.852 cv
64.3408 146.806 64.7138 146.784 65.0865 146.784 cv
67.5061 146.784 69.8978 147.714 71.9571 149.022 cv
74.3335 150.532 76.354 152.526 78.4468 154.409 cv
78.5667 154.517 78.6926 154.627 78.8317 154.706 cv
81.3058 157.307 83.6858 160.048 85.7566 162.978 cv
84.0418 168.703 83.1532 174.698 84.1157 180.563 cv
84.9479 185.637 87.2018 190.147 90.6583 193.465 cv
89.982 194.442 89.127 195.295 88.1982 196.042 cv
85.2253 198.431 81.4213 199.763 77.6079 199.763 cv
.898039 .811765 .670588 rgb
f
111.56 137.051 mo
111.771 137.153 111.978 137.271 112.181 137.407 cv
113.716 138.433 113.464 141.255 114.664 142.706 cv
115.978 144.293 117.904 145.15 119.428 146.485 cv
123.397 149.962 125.879 155.157 127.042 160.227 cv
128.383 166.081 128.123 172.198 127.211 178.134 cv
126.6 182.109 125.668 186.118 123.588 189.56 cv
121.176 193.553 117.27 196.583 112.857 198.096 cv
108.445 199.609 103.562 199.625 99.0859 198.315 cv
90.8281 195.898 85.5014 189.011 84.1157 180.563 cv
82.9399 173.398 84.5263 166.04 87.0069 159.216 cv
88.3491 155.525 90.0253 151.882 92.4009 148.733 cv
93.5938 147.151 94.9585 145.691 96.5322 144.482 cv
98.438 143.018 100.441 142.159 102.723 141.523 cv
103.047 141.433 103.381 141.338 103.648 141.132 cv
104.071 140.806 104.251 140.266 104.474 139.781 cv
105.692 137.125 108.881 135.753 111.56 137.051 cv
1 .905882 .745098 rgb
f
95.2656 153.725 mo
92.6533 157.698 91.4161 162.421 90.6954 167.121 cv
89.8818 172.428 89.6851 177.922 91.08 183.106 cv
91.5537 184.866 92.2212 186.602 93.3155 188.06 cv
94.437 189.554 95.9712 190.703 97.6289 191.565 cv
101.502 193.582 106.148 194.063 110.353 192.885 cv
112.067 192.405 113.727 191.647 115.085 190.496 cv
116.483 189.311 117.52 187.748 118.323 186.1 cv
121.631 179.308 121.085 171.323 119.987 163.849 cv
119.401 159.86 118.642 155.789 116.564 152.333 cv
111.03 143.136 100.491 145.777 95.2656 153.725 cv
.933333 .847059 .694118 rgb
f
105.681 190.992 mo
103.185 190.992 100.721 190.396 98.5556 189.27 cv
96.959 188.439 95.6982 187.417 94.8096 186.232 cv
93.9786 185.126 93.3599 183.749 92.8623 181.898 cv
91.7676 177.83 91.6568 173.104 92.5229 167.451 cv
93.3174 162.268 94.6226 158.432 96.6299 155.379 cv
99.2012 151.467 103.189 149.038 107.037 149.038 cv
110.337 149.038 113.13 150.78 115.112 154.075 cv
116.995 157.206 117.659 160.909 118.176 164.433 cv
119.178 171.249 119.692 178.402 116.704 184.536 cv
115.896 186.196 114.976 187.449 113.891 188.367 cv
112.82 189.275 111.438 189.971 109.785 190.435 cv
108.464 190.805 107.083 190.992 105.681 190.992 cv
.639216 .65098 .32549 rgb
f
106.377 189.492 mo
103.71 189.492 98.858 188.921 97.2983 186.604 cv
95.8926 184.514 96.2417 181.35 97.2832 179.186 cv
97.8605 177.987 98.8813 176.772 100.195 176.772 cv
100.231 176.772 100.266 176.773 100.301 176.775 cv
101.029 176.811 101.685 177.223 102.4 177.362 cv
102.584 177.398 102.769 177.415 102.954 177.415 cv
104.029 177.415 105.084 176.837 105.867 176.07 cv
106.783 175.172 107.415 174.032 108.138 172.971 cv
108.834 171.949 109.658 170.961 110.762 170.404 cv
111.367 170.099 112.042 169.93 112.604 169.549 cv
113.774 168.757 115.081 165.225 116.537 165.225 cv
116.805 165.225 117.077 165.345 117.355 165.623 cv
118.827 167.094 118.065 172.522 117.858 174.373 cv
117.174 180.469 113.947 189.407 106.585 189.491 cv
106.517 189.492 106.448 189.492 106.377 189.492 cv
.572549 .584314 .294118 rgb
f
104.085 197.603 mo
101.889 197.603 99.8275 197.129 98.6949 195.722 cv
99.6211 194.297 102.989 194.682 104.543 194.55 cv
107.641 194.286 110.841 193.992 113.57 192.5 cv
117.271 190.477 119.549 186.519 120.754 182.476 cv
121.959 178.433 122.272 174.184 123.115 170.05 cv
123.282 169.229 123.719 168.216 124.529 168.216 cv
124.556 168.216 124.585 168.217 124.613 168.219 cv
125.577 168.301 125.753 169.627 125.651 170.588 cv
125.187 174.965 124.711 179.382 123.304 183.553 cv
121.898 187.723 119.465 191.684 115.807 194.132 cv
114.324 195.124 112.674 195.847 110.981 196.415 cv
109.318 196.974 106.613 197.603 104.085 197.603 cv
.898039 .811765 .670588 rgb
f
65.3716 213.681 mo
67.604 213.681 li
68.7559 213.681 69.4038 212.977 69.4038 211.865 cv
69.4038 210.766 68.7451 210.053 67.604 210.053 cv
65.3716 210.053 li
65.3716 213.681 li
cp
67.6602 209.563 mo
69.1387 209.563 69.999 210.505 69.999 211.865 cv
69.999 213.24 69.1514 214.172 67.6602 214.172 cv
65.3716 214.172 li
65.3716 216.559 li
64.7769 216.559 li
64.7769 209.563 li
67.6602 209.563 li
cp
0 0 0 rgb
f
77.2407 213.383 mo
77.2407 215.333 76.6104 216.689 74.4487 216.689 cv
72.3101 216.689 71.6567 215.374 71.6567 213.383 cv
71.6567 209.563 li
72.2515 209.563 li
72.2515 213.339 li
72.2515 215.154 72.7759 216.147 74.4487 216.147 cv
76.1382 216.147 76.6465 215.123 76.6465 213.339 cv
76.6465 209.563 li
77.2407 209.563 li
77.2407 213.383 li
cp
f
85.3818 216.559 mo
85.3818 210.712 li
82.7861 216.558 li
82.21 216.558 li
79.6138 210.712 li
79.6138 216.559 li
79.0195 216.559 li
79.0195 209.563 li
79.7544 209.563 li
82.498 215.878 li
85.2412 209.563 li
85.9766 209.563 li
85.9766 216.559 li
85.3818 216.559 li
cp
f
88.5313 213.681 mo
90.7637 213.681 li
91.9155 213.681 92.5635 212.977 92.5635 211.865 cv
92.5635 210.766 91.9048 210.053 90.7637 210.053 cv
88.5313 210.053 li
88.5313 213.681 li
cp
90.8198 209.563 mo
92.2983 209.563 93.1592 210.505 93.1592 211.865 cv
93.1592 213.24 92.311 214.172 90.8198 214.172 cv
88.5313 214.172 li
88.5313 216.559 li
87.9365 216.559 li
87.9365 209.563 li
90.8198 209.563 li
cp
f
99.8618 216.559 mo
99.1226 216.559 li
96.6416 213.147 li
95.4014 214.639 li
95.4014 216.559 li
94.8164 216.559 li
94.8164 209.563 li
95.4014 209.563 li
95.4014 213.774 li
98.8672 209.563 li
99.6035 209.563 li
97.0166 212.688 li
99.8618 216.559 li
cp
f
101.267 216.559 mo
101.267 209.563 li
101.861 209.563 li
101.861 216.559 li
101.267 216.559 li
cp
f
108.507 216.559 mo
104.323 210.555 li
104.323 216.559 li
103.729 216.559 li
103.729 209.563 li
104.447 209.563 li
108.633 215.569 li
108.633 209.563 li
109.228 209.563 li
109.228 216.559 li
108.507 216.559 li
cp
f
193.67 153.561 mo
194.001 153.984 194.141 154.521 194.366 155.008 cv
195.278 156.982 197.459 157.957 199.233 159.213 cv
201.197 160.604 202.772 162.468 204.266 164.355 cv
206.661 167.381 208.971 170.664 209.663 174.46 cv
210.354 178.256 208.988 182.684 205.56 184.455 cv
200.4 187.121 194.756 185.154 193.051 179.418 cv
191.542 174.341 190.936 168.999 191.248 163.712 cv
191.373 161.601 191.896 159.51 191.973 157.407 cv
191.996 156.765 191.534 150.835 193.67 153.561 cv
.45098 .239216 .160784 rgb
f
226.098 161.428 mo
229.463 165.796 230.827 171.459 230.806 176.974 cv
230.797 179.035 230.601 181.127 229.855 183.05 cv
229.11 184.973 227.765 186.723 225.912 187.628 cv
222.52 189.284 218.178 187.615 215.932 184.581 cv
213.686 181.546 213.199 177.526 213.551 173.768 cv
213.847 170.609 214.684 167.502 216.008 164.62 cv
217.152 162.129 218.707 160.077 219.339 157.385 cv
219.669 155.983 221.095 151.445 222.451 154.371 cv
222.969 155.486 222.786 156.81 223.475 157.999 cv
224.195 159.242 225.225 160.295 226.098 161.428 cv
f
254.171 173.677 mo
252.665 177.026 250.319 180.134 246.817 181.153 cv
243.727 182.052 240.127 181.358 238.26 178.549 cv
236.978 176.621 236.522 174.254 236.417 171.941 cv
236.288 169.104 236.661 166.209 237.818 163.615 cv
239.233 160.44 241.758 157.861 244.601 155.861 cv
246.404 154.592 248.8 154.051 250.715 152.835 cv
252.242 151.864 254.605 149.031 255.279 151.988 cv
255.569 153.262 255.21 155.01 255.325 156.356 cv
255.447 157.781 255.665 159.195 255.836 160.614 cv
256.198 163.607 256.414 166.629 255.619 169.577 cv
255.262 170.9 254.786 172.309 254.171 173.677 cv
f
243.988 180.426 mo
241.287 180.426 238.656 179.053 240.277 175.895 cv
242.121 172.307 247.939 169.821 251.167 167.648 cv
251.63 167.336 252.198 167.02 252.723 167.02 cv
252.933 167.02 253.137 167.071 253.324 167.192 cv
253.541 167.332 253.695 167.551 253.812 167.781 cv
254.461 169.056 254.04 170.599 253.501 171.924 cv
252.197 175.131 250.123 178.197 247.039 179.77 cv
246.199 180.198 245.087 180.426 243.988 180.426 cv
.360784 .192157 .129412 rgb
f
223.18 186.445 mo
220.935 186.445 218.649 185.337 217.642 183.341 cv
217.351 182.763 216.509 180.922 217.4 180.529 cv
217.458 180.503 217.52 180.491 217.586 180.491 cv
218.044 180.491 218.682 181.075 219.414 181.66 cv
220.146 182.244 220.972 182.828 221.808 182.828 cv
222.006 182.828 222.204 182.795 222.402 182.722 cv
223.637 182.265 224.234 180.877 224.547 179.599 cv
225.352 176.318 225.188 172.835 226.215 169.618 cv
226.425 168.96 226.801 168.22 227.484 168.128 cv
227.534 168.122 227.582 168.118 227.629 168.118 cv
228.547 168.118 229.013 169.351 229.15 170.314 cv
229.755 174.549 230.323 179.062 228.53 182.946 cv
228.236 183.582 227.88 184.196 227.407 184.713 cv
226.328 185.894 224.764 186.445 223.18 186.445 cv
f
201.252 184.237 mo
200.16 184.237 197.889 183.92 198.097 182.62 cv
198.262 181.591 200.89 180.789 201.357 179.36 cv
201.862 177.818 201.594 176.144 201.321 174.544 cv
200.901 172.085 200.481 169.626 200.061 167.166 cv
199.959 166.565 199.857 165.946 199.994 165.352 cv
200.13 164.758 200.567 164.19 201.169 164.093 cv
201.233 164.083 201.298 164.078 201.362 164.078 cv
201.746 164.078 202.124 164.251 202.46 164.451 cv
203.155 164.862 203.77 165.397 204.337 165.973 cv
206.881 168.548 208.52 172 208.909 175.599 cv
209.028 176.704 209.031 177.837 208.738 178.909 cv
207.903 181.96 204.736 183.951 201.585 184.225 cv
201.495 184.232 201.382 184.237 201.252 184.237 cv
f
195.327 178.035 mo
194.977 178.035 194.663 177.51 194.577 177.088 cv
193.829 173.403 193.33 169.668 193.084 165.917 cv
193.01 164.792 192.759 161.895 194.188 161.4 cv
194.323 161.353 194.459 161.332 194.594 161.332 cv
195.751 161.332 196.881 162.902 196.939 163.87 cv
196.988 164.702 196.642 165.5 196.393 166.296 cv
195.29 169.827 196.07 173.645 195.796 177.334 cv
195.779 177.567 195.739 177.833 195.545 177.964 cv
195.472 178.014 195.399 178.035 195.327 178.035 cv
.505882 .317647 .247059 rgb
f
219.226 178.741 mo
218.949 178.741 218.674 178.701 218.416 178.617 cv
213.097 176.88 216.369 167.628 218.591 164.423 cv
218.822 164.09 219.118 163.742 219.521 163.705 cv
219.543 163.703 219.565 163.702 219.587 163.702 cv
220.031 163.702 220.407 164.115 220.512 164.555 cv
220.624 165.016 220.518 165.499 220.43 165.965 cv
219.853 169.044 220.113 172.276 221.174 175.224 cv
221.393 175.833 221.65 176.467 221.547 177.106 cv
221.38 178.138 220.293 178.741 219.226 178.741 cv
f
239.838 172.456 mo
239.596 172.456 239.373 172.361 239.182 172.141 cv
238.252 171.07 239.648 167.392 240.031 166.243 cv
240.292 165.528 240.656 164.775 241.344 164.451 cv
241.565 164.347 241.803 164.299 242.044 164.299 cv
242.571 164.299 243.108 164.528 243.495 164.896 cv
244.059 165.434 244.338 166.212 244.43 166.985 cv
244.476 167.379 244.477 167.79 244.328 168.159 cv
244.181 168.528 243.897 168.823 243.618 169.108 cv
242.943 169.803 241.118 172.456 239.838 172.456 cv
f
245.881 164.147 mo
245.34 164.147 244.774 163.462 244.235 161.639 cv
244.055 161.027 243.954 160.351 244.206 159.765 cv
244.372 159.38 244.677 159.07 245.008 158.813 cv
245.863 158.148 246.945 157.785 248.028 157.785 cv
248.239 157.785 248.45 157.799 248.659 157.827 cv
248.931 157.864 247.52 164.147 245.881 164.147 cv
f
212.496 210.061 mo
212.496 212.816 li
215.786 212.816 li
215.786 213.315 li
212.496 213.315 li
212.496 216.559 li
211.901 216.559 li
211.901 209.563 li
216.101 209.563 li
216.101 210.061 li
212.496 210.061 li
cp
0 0 0 rgb
f
221.878 216.08 mo
221.878 216.559 li
217.641 216.559 li
217.641 209.563 li
218.236 209.563 li
218.236 216.08 li
221.878 216.08 li
cp
f
227.58 214.129 mo
225.958 210.202 li
224.336 214.129 li
227.58 214.129 li
cp
228.561 216.559 mo
227.766 214.627 li
224.15 214.627 li
223.355 216.559 li
222.731 216.559 li
225.643 209.563 li
226.273 209.563 li
229.186 216.559 li
228.561 216.559 li
cp
f
235.974 216.559 mo
235.288 216.559 li
232.998 213.374 li
230.725 216.559 li
230.04 216.559 li
232.615 212.96 li
230.205 209.563 li
230.892 209.563 li
233.015 212.573 li
235.122 209.563 li
235.809 209.563 li
233.397 212.985 li
235.974 216.559 li
cp
f
333.187 196.868 mo
330.79 194.012 329.546 190.341 328.955 186.66 cv
327.592 178.155 329.479 169.42 332.537 161.368 cv
333.498 158.835 334.584 156.331 336.088 154.078 cv
338.294 150.772 341.347 148.085 343.447 144.712 cv
344.839 142.479 345.787 139.972 346.222 137.378 cv
347.486 136.935 348.851 138.022 349.292 139.288 cv
349.733 140.553 349.551 141.937 349.551 143.277 cv
349.553 145.399 350.027 147.489 350.449 149.569 cv
352.659 160.455 353.464 171.626 352.839 182.716 cv
352.611 186.748 352.171 190.863 350.43 194.505 cv
349.039 197.415 345.927 201.317 342.433 201.655 cv
339.145 201.973 335.176 199.236 333.187 196.868 cv
.764706 .584314 .345098 rgb
f
340.896 195.499 mo
341.029 190.341 341.37 185.188 341.92 180.058 cv
342.384 175.73 342.996 171.413 343.971 167.171 cv
345.291 161.421 347.287 155.725 347.22 149.826 cv
347.207 148.723 347.159 147.423 346.491 146.524 cv
344.778 149.446 344.771 154.98 344.125 158.402 cv
343.353 162.482 342.594 166.566 341.971 170.672 cv
340.728 178.875 340.024 187.22 340.896 195.499 cv
.65098 .4 .254902 rgb
f
347.455 198.799 mo
347.306 198.485 347.124 198.186 346.908 197.913 cv
346.226 197.045 345.268 196.442 344.31 195.893 cv
342.889 195.078 341.286 194.318 339.674 194.609 cv
338.097 194.894 336.88 196.114 335.773 197.273 cv
335.449 197.612 335.052 197.964 334.645 198.331 cv
336.783 200.222 339.815 201.908 342.433 201.655 cv
344.28 201.477 346.019 200.297 347.455 198.799 cv
.858824 .709804 .52549 rgb
f
381.531 199.445 mo
376.982 199.392 373.503 195.238 371.858 190.997 cv
369.714 185.467 369.689 179.082 369.704 173.224 cv
369.72 167.154 370.288 161.086 371.406 155.121 cv
372.016 151.866 372.792 148.565 372.382 145.28 cv
372.268 144.368 372.063 143.441 372.246 142.54 cv
372.727 140.173 374.634 140.564 375.401 142.346 cv
378.379 149.254 383.821 154.899 386.248 161.974 cv
388.766 169.311 390.908 176.395 391.707 184.13 cv
391.998 186.951 392.685 189.067 391.79 191.94 cv
390.906 194.777 389.048 197.193 386.306 198.436 cv
384.009 199.476 381.357 199.441 378.88 198.975 cv
381.531 199.445 li
.764706 .584314 .345098 rgb
f
375.528 153.417 mo
377.868 166.354 380.323 179.272 382.892 192.167 cv
383.717 191.123 383.725 189.669 383.642 188.342 cv
383.342 183.584 382.352 178.899 381.365 174.234 cv
379.925 167.43 378.485 160.624 377.045 153.82 cv
376.828 152.793 376.72 151.375 375.698 150.902 cv
375.184 151.564 375.376 152.574 375.528 153.417 cv
.65098 .4 .254902 rgb
f
378.88 198.974 mo
379.112 199.016 li
379.089 199.009 li
378.88 198.974 li
cp
.858824 .709804 .52549 rgb
f
379.112 199.016 mo
379.879 199.283 380.687 199.435 381.531 199.445 cv
379.112 199.016 li
cp
f
386.306 198.436 mo
388.883 197.268 390.668 195.059 391.608 192.442 cv
391.245 192.19 390.861 191.968 390.451 191.801 cv
387.545 190.614 384.14 191.258 381.405 192.801 cv
379.737 193.742 377.335 195.346 375.963 197.11 cv
376.902 197.941 377.947 198.606 379.089 199.009 cv
381.507 199.438 384.073 199.447 386.306 198.436 cv
f
335.761 197.286 mo
335.516 197.022 335.28 196.732 335.054 196.415 cv
332.908 193.405 331.281 189.785 331.061 186.056 cv
330.987 184.804 331.827 178.984 333.704 177.38 cv
334.009 177.119 334.342 176.97 334.702 176.97 cv
334.962 176.97 335.236 177.047 335.524 177.216 cv
336.001 177.495 336.191 178.079 336.313 178.617 cv
336.594 179.858 336.72 181.139 337.148 182.336 cv
337.577 183.534 338.381 184.68 339.573 185.124 cv
339.756 185.193 339.956 185.242 340.15 185.242 cv
340.287 185.242 340.422 185.218 340.546 185.157 cv
340.548 185.156 340.549 185.156 340.551 185.155 cv
340.453 188.292 340.519 191.433 340.805 194.565 cv
340.668 194.553 340.531 194.546 340.394 194.546 cv
340.154 194.546 339.914 194.566 339.674 194.609 cv
338.097 194.894 336.88 196.114 335.773 197.273 cv
335.769 197.277 335.765 197.281 335.761 197.286 cv
346.293 197.256 mo
345.702 196.719 345.006 196.292 344.31 195.893 cv
343.257 195.289 342.104 194.716 340.922 194.577 cv
341.039 190.765 341.269 186.956 341.613 183.157 cv
342.287 181.229 342.824 179.128 343.764 177.39 cv
344.674 175.705 345.506 174.436 345.959 172.483 cv
346.2 171.444 347.65 161.887 349.816 161.887 cv
350.066 161.887 350.326 162.014 350.594 162.296 cv
351.07 162.797 351.146 163.546 351.194 164.236 cv
351.392 166.991 351.589 169.746 351.786 172.5 cv
352.287 179.503 352.325 186.519 349.517 193.08 cv
348.829 194.686 347.68 196.143 346.293 197.256 cv
.686274 .52549 .309804 rgb
f
340.922 194.577 mo
340.883 194.573 340.844 194.569 340.805 194.565 cv
340.519 191.433 340.453 188.292 340.551 185.155 cv
340.886 184.989 341.055 184.614 341.197 184.267 cv
341.344 183.906 341.481 183.535 341.613 183.157 cv
341.269 186.956 341.039 190.765 340.922 194.577 cv
.584314 .360784 .227451 rgb
f
340.607 199.445 mo
338.874 199.445 337.172 198.801 335.761 197.286 cv
335.765 197.281 335.769 197.277 335.773 197.273 cv
336.88 196.114 338.097 194.894 339.674 194.609 cv
339.914 194.566 340.154 194.546 340.394 194.546 cv
340.531 194.546 340.668 194.553 340.805 194.565 cv
340.844 194.569 340.883 194.573 340.922 194.577 cv
342.104 194.716 343.257 195.289 344.31 195.893 cv
345.006 196.292 345.702 196.719 346.293 197.256 cv
344.617 198.601 342.591 199.445 340.607 199.445 cv
.772549 .639216 .470588 rgb
f
377.067 195.91 mo
376.754 195.713 376.452 195.5 376.162 195.272 cv
377.108 195.872 li
377.094 195.884 377.081 195.897 377.067 195.91 cv
377.249 195.74 mo
373.933 192.781 371.95 188.34 372.055 183.888 cv
372.079 182.881 372.252 181.777 373.016 181.121 cv
373.47 180.729 373.993 180.581 374.557 180.581 cv
375.423 180.581 376.385 180.93 377.345 181.279 cv
378.306 181.628 379.265 181.977 380.125 181.977 cv
380.382 181.977 380.63 181.946 380.867 181.874 cv
381.528 185.28 382.198 188.685 382.876 192.087 cv
382.37 192.295 381.877 192.535 381.405 192.801 cv
380.183 193.491 378.566 194.537 377.249 195.74 cv
382.985 192.043 mo
383.717 191.01 383.721 189.617 383.642 188.342 cv
383.462 185.494 383.035 182.673 382.51 179.866 cv
382.535 179.773 382.557 179.678 382.577 179.584 cv
383.348 176.009 381.976 172.346 381.842 168.691 cv
381.793 167.341 382.341 165.571 383.667 165.571 cv
383.686 165.571 383.706 165.571 383.727 165.572 cv
384.485 165.603 385.064 166.239 385.516 166.85 cv
389.457 172.192 390.658 179.049 391.187 185.666 cv
391.355 187.773 391.455 189.962 390.781 191.949 cv
390.673 191.896 390.563 191.846 390.451 191.801 cv
389.415 191.378 388.316 191.187 387.206 191.187 cv
385.779 191.187 384.334 191.502 382.985 192.043 cv
.686274 .52549 .309804 rgb
f
382.876 192.087 mo
382.198 188.685 381.528 185.28 380.867 181.874 cv
381.157 181.786 381.43 181.637 381.681 181.41 cv
382.12 181.012 382.359 180.446 382.51 179.866 cv
383.035 182.673 383.462 185.494 383.642 188.342 cv
383.721 189.617 383.717 191.01 382.985 192.043 cv
382.948 192.057 382.912 192.072 382.876 192.087 cv
.584314 .360784 .227451 rgb
f
382.615 197.555 mo
381.114 197.555 379.615 197.198 378.247 196.556 cv
377.902 196.299 377.57 196.027 377.249 195.74 cv
378.566 194.537 380.183 193.491 381.405 192.801 cv
381.877 192.535 382.37 192.295 382.876 192.087 cv
382.912 192.072 382.948 192.057 382.985 192.043 cv
384.334 191.502 385.779 191.187 387.206 191.187 cv
388.316 191.187 389.415 191.378 390.451 191.801 cv
390.563 191.846 390.673 191.896 390.781 191.949 cv
390.724 192.117 390.662 192.282 390.594 192.446 cv
389.507 195.066 386.938 196.956 384.142 197.428 cv
383.636 197.514 383.125 197.555 382.615 197.555 cv
378.728 196.899 mo
377.987 196.429 li
378.073 196.473 378.16 196.515 378.247 196.556 cv
378.405 196.674 378.566 196.788 378.728 196.899 cv
377.987 196.429 mo
377.672 196.271 377.365 196.098 377.067 195.91 cv
377.081 195.897 377.094 195.884 377.108 195.872 cv
377.987 196.429 li
.772549 .639216 .470588 rgb
f
352.279 213.443 mo
354.508 213.443 li
355.584 213.443 356.188 212.785 356.188 211.745 cv
356.188 210.718 355.573 210.052 354.508 210.052 cv
352.279 210.052 li
352.279 213.443 li
cp
354.563 209.562 mo
355.966 209.562 356.783 210.457 356.783 211.744 cv
356.783 212.893 356.159 213.705 355.045 213.873 cv
357.032 216.559 li
356.329 216.559 li
354.431 213.931 li
352.28 213.931 li
352.28 216.559 li
351.686 216.559 li
351.686 209.562 li
354.563 209.562 li
cp
0 0 0 rgb
f
360.966 216.559 mo
360.371 216.559 li
360.371 213.77 li
357.646 209.563 li
358.334 209.563 li
360.669 213.22 li
363.004 209.563 li
363.69 209.563 li
360.966 213.772 li
360.966 216.559 li
cp
f
365.69 210.061 mo
365.69 212.703 li
369.151 212.703 li
369.151 213.201 li
365.69 213.201 li
365.69 216.061 li
369.466 216.061 li
369.466 216.559 li
365.097 216.559 li
365.097 209.563 li
369.466 209.563 li
369.466 210.061 li
365.69 210.061 li
cp
f
318.57 285.912 mo
321.389 289.15 325.694 291.079 329.983 290.88 cv
334.271 290.681 338.434 288.308 340.667 284.642 cv
343.538 279.93 342.927 273.503 339.628 269.079 cv
335.12 263.034 327.773 260.802 321.611 265.187 cv
314.704 270.102 312.692 279.155 318.57 285.912 cv
.960784 .811765 .4 rgb
f
372.988 302.916 mo
378.527 299.386 382.669 291.375 380.485 284.766 cv
378.818 279.722 373.427 274.092 368.231 273.021 cv
363.413 272.027 357.562 272.401 353.434 275.326 cv
347.406 279.597 344 287.72 346.255 294.754 cv
347.896 299.875 352.349 303.916 357.523 305.379 cv
362.698 306.842 368.453 305.806 372.988 302.916 cv
f
404.267 270.667 mo
405.033 268.945 405.499 267.059 405.612 265.115 cv
406.004 258.389 398.084 251.205 391.696 250.457 cv
386.479 249.846 381.114 252.132 377.572 256.012 cv
371.961 262.16 376.319 272.739 382.895 276.623 cv
385.984 278.448 389.671 279.189 393.247 278.883 cv
398.322 278.448 402.292 275.102 404.267 270.667 cv
f
325.288 268.89 mo
325.405 268.951 325.519 269.032 325.629 269.135 cv
326.332 269.79 325.902 270.666 325.424 271.302 cv
324.843 272.075 323.994 273.29 322.936 273.315 cv
319.879 273.389 322.887 267.611 325.288 268.89 cv
cp
.764706 .584314 .345098 rgb
f
368.114 277.843 mo
367.213 277.327 362.061 275.897 363.614 278.84 cv
363.965 279.504 366.099 280.188 366.773 280.478 cv
367.604 280.835 368.74 281.063 369.27 280.329 cv
369.573 279.91 369.522 279.309 369.261 278.862 cv
368.999 278.416 368.563 278.099 368.114 277.843 cv
cp
f
366.971 278.146 mo
366.202 277.661 365.175 277.473 364.899 278.189 cv
364.81 278.426 365.018 278.662 365.214 278.821 cv
365.668 279.188 366.86 280.256 367.484 279.881 cv
368.257 279.417 367.744 278.632 366.971 278.146 cv
cp
.466667 .415686 .34902 rgb
f
384.646 254.517 mo
383.663 254.42 382.611 254.629 383.001 255.509 cv
383.088 255.706 383.276 255.838 383.465 255.94 cv
384.057 256.263 384.75 256.393 385.418 256.308 cv
385.714 256.27 386.031 256.172 386.194 255.922 cv
386.389 255.622 386.278 255.196 386.021 254.948 cv
385.813 254.746 385.241 254.575 384.646 254.517 cv
cp
.764706 .584314 .345098 rgb
f
328.885 289.655 mo
327.174 289.655 325.467 289.285 323.934 288.518 cv
322.501 287.802 320.022 285.683 321.327 283.837 cv
321.762 283.221 322.528 283.055 323.389 283.055 cv
323.895 283.055 324.434 283.112 324.957 283.17 cv
325.481 283.227 325.989 283.285 326.434 283.285 cv
326.642 283.285 326.836 283.272 327.012 283.241 cv
331.529 282.439 334.733 278.145 335.857 273.696 cv
336.044 272.958 336.292 272.085 337.016 271.848 cv
337.132 271.809 337.247 271.792 337.36 271.792 cv
338.104 271.792 338.76 272.557 339.123 273.276 cv
341.251 277.496 340.367 283.034 337.031 286.382 cv
334.906 288.515 331.888 289.655 328.885 289.655 cv
.862745 .729412 .360784 rgb
f
361.3 304.501 mo
359.051 304.501 356.81 304.073 354.789 303.186 cv
350.491 301.299 349.169 295.634 352.096 291.93 cv
353.687 289.915 356.187 288.742 358.732 288.414 cv
359.306 288.34 359.883 288.305 360.46 288.305 cv
362.442 288.305 364.425 288.713 366.318 289.321 cv
367.628 289.741 369.059 290.247 370.396 290.247 cv
371.116 290.247 371.809 290.1 372.441 289.715 cv
373.27 289.21 373.718 288.28 374.28 287.5 cv
374.731 286.874 375.257 286.344 376.114 286.209 cv
376.203 286.195 376.29 286.188 376.375 286.188 cv
377.645 286.188 378.537 287.688 378.732 289.01 cv
379.139 291.748 378.133 294.563 376.468 296.773 cv
374.804 298.984 372.528 300.661 370.164 302.099 cv
367.577 303.671 364.431 304.501 361.3 304.501 cv
f
391.478 277.707 mo
390.846 277.707 390.2 277.67 389.543 277.601 cv
388.87 277.529 388.129 277.298 387.822 276.694 cv
387.132 275.331 389.935 274.913 390.645 274.4 cv
391.974 273.438 393.047 272.089 393.723 270.598 cv
395.142 267.468 395.07 263.866 394.565 260.468 cv
394.451 259.7 394.356 258.804 394.905 258.257 cv
395.224 257.938 395.69 257.823 396.138 257.77 cv
396.373 257.741 396.61 257.727 396.845 257.727 cv
399.412 257.727 401.911 259.366 403.053 261.689 cv
404.939 265.528 402.798 270.081 400.518 273.298 cv
398.238 276.514 395.071 277.707 391.478 277.707 cv
f
350.006 323.639 mo
350.006 317.792 li
347.41 323.638 li
346.834 323.638 li
344.238 317.792 li
344.238 323.639 li
343.644 323.639 li
343.644 316.643 li
344.379 316.643 li
347.122 322.958 li
349.865 316.643 li
350.601 316.643 li
350.601 323.639 li
350.006 323.639 li
cp
0 0 0 rgb
f
352.561 323.639 mo
352.561 316.643 li
353.155 316.643 li
353.155 323.639 li
352.561 323.639 li
cp
f
359.348 323.159 mo
359.348 323.639 li
355.11 323.639 li
355.11 316.643 li
355.705 316.643 li
355.705 323.159 li
359.348 323.159 li
cp
f
364.987 323.159 mo
364.987 323.639 li
360.75 323.639 li
360.75 316.643 li
361.345 316.643 li
361.345 323.159 li
364.987 323.159 li
cp
f
366.985 317.141 mo
366.985 319.782 li
370.446 319.782 li
370.446 320.28 li
366.985 320.28 li
366.985 323.141 li
370.761 323.141 li
370.761 323.639 li
366.392 323.639 li
366.392 316.643 li
370.761 316.643 li
370.761 317.141 li
366.985 317.141 li
cp
f
374.948 317.141 mo
374.948 323.639 li
374.354 323.639 li
374.354 317.141 li
371.75 317.141 li
371.75 316.643 li
377.552 316.643 li
377.552 317.141 li
374.948 317.141 li
cp
f
195.872 263.292 mo
191.288 267.486 187.105 272.45 185.421 278.431 cv
184.676 281.078 184.492 284.084 185.927 286.429 cv
187.183 288.481 189.527 289.702 191.91 290.031 cv
194.294 290.36 196.722 289.892 199.017 289.171 cv
210.19 285.662 219.094 275.735 221.372 264.248 cv
221.991 261.125 221.785 256.288 219.571 253.738 cv
217.703 251.588 214.026 252.251 211.529 253.017 cv
205.58 254.841 200.389 259.158 195.872 263.292 cv
.639216 .65098 .32549 rgb
f
193.346 288.982 mo
191.229 288.982 189.154 288.518 190.851 286.562 cv
191.628 285.666 193.859 285.196 194.937 284.66 cv
196.337 283.962 197.705 283.196 199.032 282.368 cv
204.397 279.018 209.118 274.636 212.858 269.534 cv
214.968 266.656 216.766 263.549 218.186 260.274 cv
218.612 259.293 219.007 258.294 219.528 257.359 cv
221.338 262.417 219.662 268.099 217.009 272.769 cv
212.578 280.569 205.113 286.882 196.331 288.717 cv
195.795 288.829 194.564 288.982 193.346 288.982 cv
.572549 .584314 .294118 rgb
f
218.379 255.551 mo
218.58 258.215 217.312 260.758 215.921 263.038 cv
210.374 272.138 200.585 282.473 190.067 285.635 cv
190.788 283.373 195.937 281.701 197.882 280.389 cv
200.874 278.372 203.669 276.067 206.225 273.521 cv
211.38 268.387 215.563 262.265 218.379 255.551 cv
cp
.729412 .74902 .172549 rgb
f
231.786 278.985 mo
228.551 278.633 225.241 278.462 222.074 279.212 cv
217.862 280.209 213.13 283.613 213.236 288.392 cv
213.332 292.72 219.59 296.709 223.033 298.483 cv
225.524 299.768 228.225 300.586 230.917 301.362 cv
235.233 302.608 239.611 303.773 244.096 304.053 cv
248.579 304.331 253.22 303.673 257.133 301.465 cv
262.561 298.4 264.677 292.671 259.551 288.103 cv
257.717 286.469 255.467 285.391 253.249 284.334 cv
246.625 281.178 239.061 279.778 231.786 278.985 cv
.639216 .65098 .32549 rgb
f
228.63 294.037 mo
230.947 294.847 233.273 295.658 235.682 296.135 cv
235.687 296.761 234.752 296.793 234.157 296.6 cv
232.154 295.95 230.152 295.3 228.149 294.649 cv
224.05 293.318 218.53 291.798 215.958 288.025 cv
217.813 288.344 219.884 290.421 221.672 291.291 cv
223.916 292.382 226.277 293.215 228.63 294.037 cv
.729412 .74902 .172549 rgb
f
259.043 295.409 mo
259.734 294.989 260.408 294.561 261.278 294.634 cv
260.777 295.797 259.515 296.411 258.328 296.853 cv
253.766 298.549 248.991 298.805 244.182 298.729 cv
242.684 298.704 241.146 298.673 239.757 298.112 cv
239.539 297.973 li
239.423 297.815 239.539 297.574 239.716 297.491 cv
239.894 297.407 240.1 297.435 240.294 297.463 cv
246.148 298.297 252.189 297.798 257.826 296.014 cv
258.262 295.876 258.655 295.644 259.043 295.409 cv
f
247.017 303.352 mo
242.769 303.352 238.515 302.359 234.359 301.349 cv
232.252 300.836 230.145 300.317 228.079 299.662 cv
226.546 299.175 225.039 298.599 223.585 297.91 cv
220.569 296.481 217.734 294.595 215.581 292.001 cv
214.99 291.288 214.157 290.354 213.889 289.466 cv
213.758 289.033 213.383 287.959 213.864 287.612 cv
213.904 287.584 213.952 287.57 214.007 287.57 cv
214.2 287.57 214.478 287.736 214.79 287.984 cv
215.63 288.656 216.717 289.936 217.042 290.224 cv
217.506 290.633 217.982 291.03 218.501 291.367 cv
218.95 291.659 219.428 291.904 219.905 292.148 cv
223.048 293.759 226.3 295.146 229.653 296.276 cv
234.397 297.875 239.289 299.144 244.285 299.46 cv
245.056 299.509 245.83 299.534 246.605 299.534 cv
250.848 299.534 255.105 298.777 258.937 296.977 cv
259.486 296.719 260.076 296.433 260.667 296.433 cv
260.805 296.433 260.944 296.449 261.082 296.484 cv
259.055 300.38 254.647 302.546 250.296 303.138 cv
249.204 303.286 248.111 303.352 247.017 303.352 cv
.572549 .584314 .294118 rgb
f
188.11 282.557 mo
187.591 282.557 187.128 282.386 186.947 281.851 cv
186.746 281.253 187.579 279.825 187.771 279.232 cv
188.474 277.061 189.347 274.997 190.561 273.057 cv
192.985 269.18 196.455 265.943 200.553 263.898 cv
199.888 266.562 199.218 269.282 199.419 272.02 cv
199.531 273.549 199.897 275.175 199.223 276.551 cv
198.642 277.736 197.42 278.448 196.256 279.071 cv
194.13 280.21 191.969 281.291 189.73 282.186 cv
189.332 282.345 188.687 282.557 188.11 282.557 cv
.67451 .686274 .396078 rgb
f
229.672 289.95 mo
227.337 289.95 224.99 289.69 222.732 289.225 cv
219.808 288.622 215.003 286.508 218.902 283.243 cv
220.535 281.877 222.664 281.262 224.762 280.9 cv
226.457 280.609 228.177 280.465 229.896 280.465 cv
234.889 280.465 239.882 281.677 244.298 284.01 cv
244.518 284.126 244.763 284.285 244.781 284.532 cv
244.798 284.759 244.613 284.944 244.44 285.093 cv
240.399 288.56 235.066 289.95 229.672 289.95 cv
f
208.619 323.159 mo
208.619 323.639 li
204.381 323.639 li
204.381 316.643 li
204.976 316.643 li
204.976 323.159 li
208.619 323.159 li
cp
0 0 0 rgb
f
210.616 317.141 mo
210.616 319.782 li
214.077 319.782 li
214.077 320.28 li
210.616 320.28 li
210.616 323.141 li
214.392 323.141 li
214.392 323.639 li
210.021 323.639 li
210.021 316.643 li
214.392 316.643 li
214.392 317.141 li
210.616 317.141 li
cp
f
220.622 323.639 mo
216.438 317.635 li
216.438 323.639 li
215.844 323.639 li
215.844 316.643 li
216.562 316.643 li
220.748 322.648 li
220.748 316.643 li
221.342 316.643 li
221.342 323.639 li
220.622 323.639 li
cp
f
225.859 317.141 mo
225.859 323.639 li
225.265 323.639 li
225.265 317.141 li
222.661 317.141 li
222.661 316.643 li
228.463 316.643 li
228.463 317.141 li
225.859 317.141 li
cp
f
229.87 323.639 mo
229.87 316.643 li
230.465 316.643 li
230.465 323.639 li
229.87 323.639 li
cp
f
236.658 323.159 mo
236.658 323.639 li
232.421 323.639 li
232.421 316.643 li
233.016 316.643 li
233.016 323.159 li
236.658 323.159 li
cp
f
237.933 322.395 mo
238.464 322.938 239.502 323.254 240.504 323.254 cv
241.627 323.254 242.725 322.836 242.725 321.825 cv
242.725 320.638 241.595 320.547 240.231 320.292 cv
239.007 320.063 237.866 319.751 237.866 318.464 cv
237.866 317.132 239.283 316.519 240.745 316.519 cv
241.576 316.519 242.429 316.718 243.053 317.096 cv
242.705 317.522 li
242.159 317.184 241.421 317.007 240.679 317.007 cv
239.532 317.007 238.471 317.47 238.471 318.436 cv
238.471 319.392 239.43 319.616 240.402 319.8 cv
241.914 320.088 243.353 320.265 243.353 321.824 cv
243.353 323.165 241.917 323.759 240.487 323.759 cv
239.383 323.759 238.188 323.411 237.573 322.799 cv
237.933 322.395 li
cp
f
83.6059 270.976 mo
82.4419 270.27 81.2265 269.936 80.0352 269.369 cv
78.7988 268.779 77.7959 267.726 76.5635 267.082 cv
74.0904 265.792 71.2524 265.186 68.4682 265.42 cv
66.4355 265.59 64.461 266.18 62.5425 266.872 cv
60.5693 267.585 58.6363 268.409 56.7574 269.342 cv
53.2237 271.097 49.8325 273.278 47.253 276.264 cv
45.8999 277.83 44.7714 279.634 44.2549 281.639 cv
43.7383 283.643 43.8789 285.864 44.9131 287.657 cv
45.9429 289.442 47.7622 290.303 49.0786 291.788 cv
49.8037 292.605 50.5288 293.424 51.2544 294.242 cv
51.7701 294.824 52.2974 295.415 52.9654 295.813 cv
53.9096 296.375 55.0429 296.498 56.1362 296.607 cv
61 297.098 65.9751 297.581 70.7261 296.429 cv
72.6274 295.968 74.459 295.25 76.2305 294.42 cv
78.105 293.542 79.934 292.523 81.4942 291.162 cv
84.2852 288.726 86.0713 285.3 87.1006 281.741 cv
87.8887 279.017 88.2002 275.864 86.5839 273.534 cv
85.8325 272.451 84.7339 271.659 83.6059 270.976 cv
.45098 .239216 .160784 rgb
f
60.522 276.374 mo
61.3901 275.974 62.2168 275.489 63.0552 275.031 cv
67.0122 272.867 71.2671 271.249 75.6622 270.238 cv
76.4346 270.06 77.3715 269.738 77.4824 268.954 cv
77.539 268.55 77.3354 268.15 77.0654 267.846 cv
76.3261 267.011 75.1484 266.734 74.0406 266.611 cv
71.5302 266.333 68.9932 266.609 66.4912 266.956 cv
65.2939 267.123 64.0923 267.307 62.9453 267.687 cv
61.6675 268.112 60.4829 268.772 59.3072 269.429 cv
57.3706 270.51 55.4336 271.592 53.4966 272.673 cv
50.8843 274.131 48.2114 275.639 46.2808 277.924 cv
44.7046 279.79 43.5425 282.731 45.3974 284.823 cv
46.6895 286.279 48.603 286.468 49.3467 284.611 cv
50.1651 282.568 50.084 281.096 52.1279 279.721 cv
54.6572 278.021 57.7895 277.635 60.522 276.374 cv
.65098 .4 .254902 rgb
f
48.4735 288.361 mo
48.3484 288.361 48.2304 288.332 48.1206 288.269 cv
47.3749 287.84 47.0049 286.899 46.9239 285.859 cv
47.1413 285.925 47.3584 285.959 47.5699 285.959 cv
48.3059 285.96 48.9735 285.543 49.3467 284.611 cv
50.1651 282.568 50.084 281.096 52.1279 279.721 cv
54.6572 278.021 57.7895 277.635 60.522 276.374 cv
61.3901 275.974 62.2168 275.489 63.0552 275.031 cv
67.0122 272.867 71.2671 271.249 75.6622 270.238 cv
75.9893 270.163 76.3458 270.062 76.6567 269.911 cv
76.9555 269.998 77.251 270.097 77.542 270.208 cv
78.2305 270.471 78.9346 270.833 79.3018 271.473 cv
79.356 271.567 79.4007 271.664 79.4362 271.763 cv
78.7016 271.679 77.9594 271.641 77.2247 271.63 cv
77.094 271.628 76.9633 271.627 76.8324 271.627 cv
75.641 271.627 74.4415 271.713 73.3086 272.074 cv
71.9565 272.505 70.7588 273.306 69.5557 274.057 cv
67.646 275.249 65.6753 276.343 63.6528 277.331 cv
62.3105 277.986 60.9277 278.602 59.4561 278.856 cv
58.2691 279.062 57.0483 279.027 55.8671 279.264 cv
53.4199 279.755 51.6289 281.373 50.3726 283.448 cv
49.2876 285.24 48.7004 286.456 49.2708 288.066 cv
48.986 288.251 48.7166 288.361 48.4735 288.361 cv
.360784 .192157 .129412 rgb
f
47.5699 285.959 mo
47.3584 285.959 47.1413 285.925 46.9239 285.859 cv
46.808 284.37 47.2835 282.676 48.0962 281.985 cv
48.5058 281.637 49.0122 281.428 49.4805 281.163 cv
52.0034 279.734 53.3442 276.725 55.9126 275.381 cv
57.2154 274.699 58.7109 274.515 60.1255 274.114 cv
63.8637 273.054 67.0683 270.465 70.8735 269.675 cv
71.6654 269.51 72.4741 269.429 73.2828 269.429 cv
74.4227 269.429 75.5626 269.591 76.6567 269.911 cv
76.3458 270.062 75.9893 270.163 75.6622 270.238 cv
71.2671 271.249 67.0122 272.867 63.0552 275.031 cv
62.2168 275.489 61.3901 275.974 60.522 276.374 cv
57.7895 277.635 54.6572 278.021 52.1279 279.721 cv
50.084 281.096 50.1651 282.568 49.3467 284.611 cv
48.9735 285.543 48.3059 285.96 47.5699 285.959 cv
.521569 .321569 .203922 rgb
f
55.8671 279.264 mo
57.0483 279.027 58.2691 279.062 59.4561 278.856 cv
60.9277 278.602 62.3105 277.986 63.6528 277.331 cv
65.6753 276.343 67.646 275.249 69.5557 274.057 cv
70.7588 273.306 71.9565 272.505 73.3086 272.074 cv
74.566 271.674 75.9052 271.611 77.2247 271.63 cv
79.5512 271.664 81.9522 271.971 83.9526 273.159 cv
85.9526 274.347 87.4653 276.586 87.2207 278.899 cv
87.0971 280.073 86.5488 281.157 85.9472 282.172 cv
84.7353 284.218 83.0689 286.242 80.7466 286.753 cv
80.1416 286.886 79.5073 286.911 78.934 287.145 cv
78.1362 287.473 77.5556 288.16 76.9077 288.728 cv
74.9179 290.474 72.2285 291.135 69.6523 291.739 cv
65.2974 292.762 60.8637 293.79 56.4009 293.487 cv
55.1113 293.399 53.7876 293.186 52.6934 292.497 cv
51.5825 291.798 50.8145 290.68 50.0782 289.593 cv
48.4009 287.115 48.9721 285.761 50.3726 283.448 cv
51.6289 281.373 53.4199 279.755 55.8671 279.264 cv
.65098 .4 .254902 rgb
f
64.1279 295.469 mo
62.7879 295.469 61.427 295.31 60.1977 294.883 cv
59.3271 294.58 58.5352 294.174 58.4314 293.538 cv
62.2081 293.478 65.9587 292.606 69.6523 291.739 cv
72.2285 291.135 74.9179 290.474 76.9077 288.728 cv
77.5556 288.16 78.1362 287.473 78.934 287.145 cv
79.5073 286.911 80.1416 286.886 80.7466 286.753 cv
83.011 286.255 84.6518 284.318 85.8558 282.325 cv
85.2026 284.281 84.1196 286.115 82.854 287.756 cv
80.8193 290.394 78.2031 292.691 75.0532 293.779 cv
72.2671 294.742 69.0434 295.056 66.1211 295.361 cv
65.4752 295.429 64.8041 295.469 64.1279 295.469 cv
.360784 .192157 .129412 rgb
f
58.4314 293.538 mo
58.3812 293.23 58.4918 292.869 58.832 292.44 cv
60.2618 290.638 63.5952 290.714 65.5883 290.05 cv
69.0728 288.925 71.7099 286.058 75.0058 284.462 cv
76.7578 283.613 78.747 283.09 80.105 281.694 cv
81.3051 280.462 81.8262 278.729 82.7969 277.309 cv
83.2468 276.649 83.9101 276.009 84.6941 276.009 cv
84.732 276.009 84.7701 276.011 84.8085 276.014 cv
86.0927 276.115 86.5713 277.765 86.4995 279.051 cv
86.4369 280.171 86.2093 281.266 85.8558 282.325 cv
84.6518 284.318 83.011 286.255 80.7466 286.753 cv
80.1416 286.886 79.5073 286.911 78.934 287.145 cv
78.1362 287.473 77.5556 288.16 76.9077 288.728 cv
74.9179 290.474 72.2285 291.135 69.6523 291.739 cv
65.9587 292.606 62.2081 293.478 58.4314 293.538 cv
.521569 .321569 .203922 rgb
f
93.2442 287.369 mo
96.8247 293.196 103.113 296.23 109.747 297.003 cv
114.674 297.576 120.095 297.605 124.455 294.915 cv
126.652 293.559 127.894 292.583 128.878 290.069 cv
129.941 287.353 130.243 284.331 129.677 281.465 cv
128.561 275.813 125.208 271.271 120.782 267.821 cv
119.425 266.763 118.068 265.705 116.711 264.647 cv
113.543 262.178 110.123 259.606 106.119 259.292 cv
103.302 259.07 100.474 260.032 98.1328 261.614 cv
91.7856 265.903 89.3281 273.179 90.6728 280.573 cv
91.1084 282.97 91.9683 285.292 93.2442 287.369 cv
.45098 .239216 .160784 rgb
f
98.7519 263.351 mo
98.9326 263.914 99.377 264.348 99.8056 264.757 cv
102.341 267.177 104.877 269.597 107.413 272.017 cv
108.569 273.119 109.729 274.226 111.025 275.16 cv
113.704 277.093 116.94 278.276 119.249 280.638 cv
120.307 281.718 121.13 283.01 122.197 284.081 cv
123.297 285.186 124.627 286.027 125.945 286.86 cv
126.612 287.281 127.363 287.721 128.14 287.579 cv
129.001 287.422 129.586 286.58 129.804 285.731 cv
130.171 284.304 129.772 282.805 129.376 281.386 cv
128.451 278.078 127.5 274.713 125.625 271.836 cv
123.721 268.914 120.97 266.659 118.198 264.543 cv
115.742 262.666 113.186 260.834 110.268 259.813 cv
107.656 258.9 104.998 258.887 102.322 259.52 cv
100.711 259.902 98.0806 261.252 98.7519 263.351 cv
.65098 .4 .254902 rgb
f
126.06 290.514 mo
125.958 290.514 125.855 290.503 125.752 290.481 cv
126.225 289.451 125.954 288.201 124.813 287.071 cv
124.653 286.919 li
123.502 285.864 122.109 284.913 120.848 284.012 cv
120.15 283.512 119.605 282.831 118.968 282.256 cv
118.285 281.641 117.446 281.414 116.712 280.916 cv
115.886 280.355 115.164 279.564 114.334 278.978 cv
112.517 277.695 110.563 276.609 108.816 275.226 cv
106.553 273.434 104.837 271.201 103.036 268.976 cv
102.351 268.13 101.644 267.217 100.858 266.467 cv
99.9253 265.576 98.6426 265.018 97.9761 263.866 cv
97.6487 263.301 97.3015 263.081 96.9487 263.081 cv
96.8777 263.081 96.8066 263.09 96.7353 263.106 cv
96.7389 263.087 96.7427 263.067 96.7466 263.047 cv
96.7857 262.851 96.8462 262.645 96.9956 262.512 cv
97.0932 262.424 97.2193 262.376 97.3443 262.336 cv
97.7735 262.198 98.2246 262.127 98.6756 262.127 cv
98.6926 262.127 98.7096 262.127 98.7265 262.127 cv
98.6156 262.5 98.6106 262.909 98.7519 263.351 cv
98.9326 263.914 99.377 264.348 99.8056 264.757 cv
102.341 267.177 104.877 269.597 107.413 272.017 cv
108.569 273.119 109.729 274.226 111.025 275.16 cv
113.704 277.093 116.94 278.276 119.249 280.638 cv
120.307 281.718 121.13 283.01 122.197 284.081 cv
123.297 285.186 124.627 286.027 125.945 286.86 cv
126.525 287.226 127.168 287.606 127.837 287.606 cv
127.937 287.606 128.038 287.598 128.14 287.579 cv
128.378 287.536 128.595 287.44 128.789 287.306 cv
128.653 287.796 128.468 288.271 128.22 288.717 cv
127.558 289.903 126.822 290.514 126.06 290.514 cv
.360784 .192157 .129412 rgb
f
127.837 287.606 mo
127.168 287.606 126.525 287.226 125.945 286.86 cv
124.627 286.027 123.297 285.186 122.197 284.081 cv
121.13 283.01 120.307 281.718 119.249 280.638 cv
116.94 278.276 113.704 277.093 111.025 275.16 cv
109.729 274.226 108.569 273.119 107.413 272.017 cv
104.877 269.597 102.341 267.177 99.8056 264.757 cv
99.377 264.348 98.9326 263.914 98.7519 263.351 cv
98.6106 262.909 98.6156 262.5 98.7265 262.127 cv
98.7973 262.128 98.8679 262.13 98.9385 262.135 cv
99.1577 262.148 99.3761 262.152 99.5928 262.152 cv
99.7303 262.152 99.8671 262.15 100.003 262.149 cv
100.14 262.147 100.275 262.146 100.41 262.146 cv
101.405 262.146 102.348 262.229 103.181 263.01 cv
103.998 263.776 104.471 264.828 105.026 265.801 cv
106.914 269.107 109.973 271.729 113.53 273.088 cv
114.561 273.481 115.647 273.781 116.553 274.411 cv
117.237 274.887 117.786 275.529 118.326 276.165 cv
119.687 277.766 121.048 279.367 122.409 280.968 cv
123.549 282.31 124.639 283.909 126.594 283.909 cv
126.605 283.909 126.617 283.909 126.628 283.909 cv
126.988 283.905 127.348 283.846 127.707 283.846 cv
127.791 283.846 127.875 283.849 127.959 283.857 cv
128.402 283.898 128.869 284.109 129.044 284.519 cv
129.145 284.755 129.135 285.022 129.117 285.279 cv
129.069 285.961 128.972 286.648 128.789 287.306 cv
128.595 287.44 128.378 287.536 128.14 287.579 cv
128.038 287.598 127.937 287.606 127.837 287.606 cv
.521569 .321569 .203922 rgb
f
124.813 287.071 mo
124.653 286.919 li
123.502 285.864 122.109 284.913 120.848 284.012 cv
120.15 283.512 119.605 282.831 118.968 282.256 cv
118.285 281.641 117.446 281.414 116.712 280.916 cv
115.886 280.355 115.164 279.564 114.334 278.978 cv
112.517 277.695 110.563 276.609 108.816 275.226 cv
106.553 273.434 104.837 271.201 103.036 268.976 cv
102.351 268.13 101.644 267.217 100.858 266.467 cv
99.9253 265.576 98.6426 265.018 97.9761 263.866 cv
96.916 262.035 95.6499 263.828 94.6524 264.97 cv
94.082 265.621 93.5073 266.279 93.0864 267.037 cv
90.6323 271.455 92.6265 277.544 95.1938 281.449 cv
99.2085 287.556 106.093 291.416 113.268 292.804 cv
116.653 293.458 120.368 293.428 123.639 292.229 cv
126.167 291.304 126.771 289.011 124.813 287.071 cv
.65098 .4 .254902 rgb
f
113.498 296.213 mo
113.459 296.213 113.421 296.213 113.382 296.213 cv
111.55 296.204 109.727 295.917 107.943 295.501 cv
104.468 294.689 101.016 293.274 98.2554 290.971 cv
96.5 289.506 91.9819 284.952 94.7642 282.829 cv
95.1014 282.572 95.4516 282.414 95.8096 282.338 cv
99.8895 287.931 106.448 291.484 113.268 292.804 cv
114.678 293.076 116.146 293.23 117.614 293.23 cv
119.671 293.23 121.73 292.929 123.639 292.229 cv
124.398 291.952 124.983 291.55 125.378 291.072 cv
125.538 291.701 125.276 292.445 124.799 292.919 cv
122.261 295.441 116.931 296.213 113.498 296.213 cv
.360784 .192157 .129412 rgb
f
117.614 293.23 mo
116.146 293.23 114.678 293.076 113.268 292.804 cv
106.448 291.484 99.8895 287.931 95.8096 282.338 cv
95.9867 282.3 96.1661 282.282 96.3465 282.282 cv
98.6377 282.282 101.134 285.148 102.542 286.372 cv
105.575 289.01 109.595 290.456 113.609 290.456 cv
114.777 290.456 115.945 290.333 117.088 290.082 cv
118.199 289.838 119.289 289.48 120.42 289.367 cv
120.676 289.342 120.933 289.329 121.189 289.329 cv
122.189 289.329 123.189 289.521 124.116 289.896 cv
124.506 290.054 124.897 290.255 125.15 290.592 cv
125.26 290.738 125.335 290.901 125.378 291.072 cv
124.983 291.55 124.398 291.952 123.639 292.229 cv
121.73 292.929 119.671 293.23 117.614 293.23 cv
.521569 .321569 .203922 rgb
f
73.9331 323.169 mo
73.4004 323.535 72.7183 323.749 71.9048 323.749 cv
69.6694 323.749 68.3916 322.206 68.3916 320.136 cv
68.3916 318.065 69.6694 316.524 71.9048 316.524 cv
72.7183 316.524 73.4004 316.736 73.9331 317.103 cv
73.5591 317.511 li
73.1187 317.196 72.5713 317.027 71.9048 317.027 cv
70.0562 317.027 68.9863 318.296 68.9863 320.136 cv
68.9863 321.976 70.0562 323.244 71.9048 323.244 cv
72.5713 323.244 73.1187 323.076 73.5591 322.761 cv
73.9331 323.169 li
cp
0 0 0 rgb
f
75.7866 320.136 mo
75.7866 321.997 76.8896 323.254 78.7051 323.254 cv
80.5713 323.254 81.6328 322.001 81.6328 320.136 cv
81.6328 318.296 80.5527 317.027 78.7051 317.027 cv
76.8564 317.027 75.7866 318.297 75.7866 320.136 cv
cp
82.2275 320.136 mo
82.2275 322.232 80.957 323.759 78.7051 323.759 cv
76.5098 323.759 75.1919 322.232 75.1919 320.136 cv
75.1919 318.065 76.4697 316.524 78.7051 316.524 cv
80.9375 316.524 82.2275 318.064 82.2275 320.136 cv
cp
f
84.502 317.141 mo
84.502 319.896 li
87.7915 319.896 li
87.7915 320.395 li
84.502 320.395 li
84.502 323.639 li
83.9072 323.639 li
83.9072 316.643 li
88.1064 316.643 li
88.1064 317.141 li
84.502 317.141 li
cp
f
90.2417 317.141 mo
90.2417 319.896 li
93.5313 319.896 li
93.5313 320.395 li
90.2417 320.395 li
90.2417 323.639 li
89.647 323.639 li
89.647 316.643 li
93.8462 316.643 li
93.8462 317.141 li
90.2417 317.141 li
cp
f
95.9814 317.141 mo
95.9814 319.782 li
99.4419 319.782 li
99.4419 320.28 li
95.9814 320.28 li
95.9814 323.141 li
99.7568 323.141 li
99.7568 323.639 li
95.3867 323.639 li
95.3867 316.643 li
99.7568 316.643 li
99.7568 317.141 li
95.9814 317.141 li
cp
f
101.892 317.141 mo
101.892 319.782 li
105.352 319.782 li
105.352 320.28 li
101.892 320.28 li
101.892 323.141 li
105.667 323.141 li
105.667 323.639 li
101.297 323.639 li
101.297 316.643 li
105.667 316.643 li
105.667 317.141 li
101.892 317.141 li
cp
f
68.0581 430.178 mo
67.5254 430.544 66.8433 430.758 66.0298 430.758 cv
63.7944 430.758 62.5166 429.215 62.5166 427.145 cv
62.5166 425.074 63.7944 423.533 66.0298 423.533 cv
66.8433 423.533 67.5254 423.745 68.0581 424.111 cv
67.6841 424.52 li
67.2437 424.205 66.6963 424.036 66.0298 424.036 cv
64.1812 424.036 63.1113 425.305 63.1113 427.145 cv
63.1113 428.984 64.1812 430.253 66.0298 430.253 cv
66.6963 430.253 67.2437 430.085 67.6841 429.77 cv
68.0581 430.178 li
cp
f
74.584 430.647 mo
74.584 427.398 li
70.2368 427.398 li
70.2368 430.647 li
69.6421 430.647 li
69.6421 423.651 li
70.2368 423.651 li
70.2368 426.9 li
74.584 426.9 li
74.584 423.651 li
75.1782 423.651 li
75.1782 430.647 li
74.584 430.647 li
cp
f
77.1318 430.647 mo
77.1318 423.651 li
77.7266 423.651 li
77.7266 430.647 li
77.1318 430.647 li
cp
f
84.9478 430.178 mo
84.415 430.544 83.7329 430.758 82.9194 430.758 cv
80.6841 430.758 79.4063 429.215 79.4063 427.145 cv
79.4063 425.074 80.6841 423.533 82.9194 423.533 cv
83.7329 423.533 84.415 423.745 84.9478 424.111 cv
84.5737 424.52 li
84.1333 424.205 83.5859 424.036 82.9194 424.036 cv
81.0708 424.036 80.001 425.305 80.001 427.145 cv
80.001 428.984 81.0708 430.253 82.9194 430.253 cv
83.5859 430.253 84.1333 430.085 84.5737 429.77 cv
84.9478 430.178 li
cp
f
91.5771 430.647 mo
90.8379 430.647 li
88.3569 427.235 li
87.1167 428.728 li
87.1167 430.647 li
86.5317 430.647 li
86.5317 423.651 li
87.1167 423.651 li
87.1167 427.862 li
90.5825 423.651 li
91.3188 423.651 li
88.7319 426.776 li
91.5771 430.647 li
cp
f
93.5762 427.77 mo
95.8086 427.77 li
96.9604 427.77 97.6084 427.065 97.6084 425.953 cv
97.6084 424.854 96.9497 424.142 95.8086 424.142 cv
93.5762 424.142 li
93.5762 427.77 li
cp
95.8647 423.651 mo
97.3433 423.651 98.2036 424.594 98.2036 425.953 cv
98.2036 427.328 97.356 428.261 95.8647 428.261 cv
93.5762 428.261 li
93.5762 430.647 li
92.9814 430.647 li
92.9814 423.651 li
95.8647 423.651 li
cp
f
100.456 424.149 mo
100.456 426.791 li
103.917 426.791 li
103.917 427.289 li
100.456 427.289 li
100.456 430.149 li
104.231 430.149 li
104.231 430.647 li
99.8613 430.647 li
99.8613 423.651 li
104.231 423.651 li
104.231 424.149 li
100.456 424.149 li
cp
f
110.07 428.218 mo
108.449 424.29 li
106.827 428.218 li
110.07 428.218 li
cp
111.051 430.647 mo
110.257 428.716 li
106.64 428.716 li
105.845 430.647 li
105.221 430.647 li
108.133 423.651 li
108.764 423.651 li
111.676 430.647 li
111.051 430.647 li
cp
f
70.7153 375.626 mo
70.6904 375.645 li
70.0039 376.144 69.3174 376.644 68.6308 377.144 cv
65.4141 376.166 61.3696 376.651 58.2612 377.923 cv
53.1313 380.023 49.8706 385.146 47.9219 390.335 cv
46.4272 394.316 46.6128 397.925 48.3252 401.815 cv
49.1645 403.722 50.3418 405.479 51.7861 406.979 cv
54.5347 409.835 58.1699 411.697 61.9189 412.984 cv
65.1802 414.104 68.7803 414.817 72.0489 413.717 cv
73.7968 413.129 75.3462 412.05 76.7061 410.803 cv
81.4731 406.433 84.0434 399.733 83.2725 393.313 cv
82.6099 387.794 79.5259 384.255 76.2183 380.156 cv
75.7466 379.571 75.6968 378.765 75.6367 378.016 cv
75.5484 376.919 75.3955 375.827 75.1792 374.749 cv
75.1016 374.364 74.9716 373.926 74.6094 373.776 cv
74.3701 373.679 74.0972 373.74 73.8511 373.819 cv
72.6977 374.191 71.6954 374.913 70.7153 375.626 cv
.909804 .796078 .345098 rgb
f
75.8799 379.494 mo
75.7231 379.028 75.6763 378.512 75.6367 378.016 cv
75.5483 376.919 75.3955 375.827 75.1792 374.749 cv
75.1016 374.364 74.9717 373.926 74.6094 373.776 cv
74.3701 373.679 74.0972 373.74 73.8511 373.819 cv
72.6978 374.191 71.6953 374.913 70.7153 375.626 cv
70.6904 375.645 li
70.0586 376.104 69.4268 376.564 68.7949 377.024 cv
69.5918 378.545 71.061 379.89 72.4214 380.098 cv
72.999 380.186 73.5889 380.14 74.165 380.046 cv
74.7617 379.95 75.3564 379.79 75.8799 379.494 cv
cp
.8 .678431 .207843 rgb
f
65.7188 387.346 mo
65.7109 387.083 65.7163 386.794 65.8872 386.594 cv
66.0112 386.448 66.2012 386.378 66.3872 386.336 cv
67.4648 386.092 68.5576 386.618 69.4995 387.195 cv
70.4878 387.801 71.4302 388.481 72.3154 389.229 cv
72.8706 389.698 73.4517 390.319 73.3462 391.038 cv
73.2222 391.881 72.2612 392.281 71.4395 392.507 cv
70.1338 392.864 67.7598 393.772 66.6963 392.521 cv
65.7168 391.368 65.7632 388.763 65.7188 387.346 cv
cp
f
62.7588 400.948 mo
63.8873 398.262 64.8755 395.464 66.6474 393.151 cv
65.3584 397.261 63.6939 401.253 61.6816 405.062 cv
60.8462 406.642 59.8764 408.268 58.312 409.133 cv
57.5703 409.543 56.2867 409.99 57.0425 408.817 cv
57.5552 408.022 58.9423 407.357 59.6064 406.56 cv
60.9887 404.904 61.9292 402.924 62.7588 400.948 cv
.933333 .847059 .694118 rgb
f
89.419 386.506 mo
88.8174 388.043 88.3666 389.659 88.3218 391.309 cv
88.2729 393.107 88.7056 394.883 89.2007 396.613 cv
89.9556 399.25 90.5942 402.977 92.5117 404.983 cv
94.7182 407.291 96.9732 409.581 99.8208 411.096 cv
102.697 412.624 106.473 413.073 109.707 413.226 cv
112.407 413.353 115.151 413.145 117.711 412.279 cv
120.272 411.413 122.644 409.851 124.188 407.633 cv
125.208 406.17 125.841 404.474 126.366 402.768 cv
127.492 399.113 127.061 395.109 125.705 391.644 cv
122.956 384.618 116.397 381.961 109.57 380.369 cv
108.497 380.119 107.419 379.868 106.323 379.753 cv
102.954 379.401 97.9116 379.864 95.1694 382.074 cv
95.9224 381.468 96.1782 379.943 95.875 379.07 cv
95.3286 377.493 94.3545 378.618 93.6152 379.485 cv
91.8408 381.568 90.416 383.958 89.419 386.506 cv
.909804 .796078 .345098 rgb
f
95.1694 382.074 mo
95.9224 381.468 96.1777 379.943 95.875 379.07 cv
95.3286 377.493 94.3545 378.618 93.6152 379.485 cv
92.6631 380.604 91.8208 381.814 91.082 383.086 cv
91.5571 383.226 92.0122 383.317 92.3208 383.368 cv
92.603 383.415 92.8936 383.443 93.1738 383.387 cv
93.4297 383.336 93.6665 383.217 93.895 383.091 cv
94.6978 382.647 95.4331 382.088 96.0918 381.45 cv
95.7646 381.642 95.4521 381.847 95.1694 382.074 cv
cp
.8 .678431 .207843 rgb
f
125.198 404.378 mo
122.657 406.532 119.609 408.085 116.372 408.873 cv
114.405 409.352 111.23 409.963 109.332 409.072 cv
109.849 408.228 111.157 408.413 112.012 408.365 cv
113.549 408.278 115.073 408.019 116.565 407.649 cv
119.56 406.907 122.425 405.713 125.198 404.378 cv
.933333 .847059 .694118 rgb
f
67.481 413.14 mo
62.3415 413.14 57.5685 410.684 53.6133 407.519 cv
50.107 404.712 46.0718 400.067 49.5976 395.662 cv
50.5761 394.44 52.1514 393.737 53.7048 393.737 cv
54.4708 393.737 55.2314 393.908 55.9126 394.272 cv
57.1909 394.954 58.084 396.168 58.9326 397.342 cv
59.6494 398.335 60.3667 399.327 61.0839 400.319 cv
61.4053 400.764 61.7812 401.243 62.3223 401.333 cv
62.3835 401.343 62.4446 401.348 62.5054 401.348 cv
62.5338 401.348 62.5623 401.347 62.5906 401.345 cv
61.8013 403.187 60.8962 405.015 59.6064 406.56 cv
58.9423 407.357 57.5552 408.022 57.0425 408.817 cv
56.68 409.38 56.7866 409.57 57.0776 409.57 cv
57.3933 409.57 57.926 409.346 58.312 409.133 cv
59.8764 408.268 60.8462 406.642 61.6816 405.062 cv
62.4093 403.684 63.0916 402.283 63.7271 400.861 cv
64.7037 400.221 65.615 399.488 66.5547 398.794 cv
69.8389 396.371 73.4829 394.437 77.3301 393.074 cv
77.8838 392.878 78.4922 392.698 79.0708 392.698 cv
79.4437 392.698 79.8043 392.772 80.1299 392.966 cv
80.7714 393.348 81.0952 394.095 81.2842 394.816 cv
81.7813 396.715 81.6215 398.728 81.2431 400.652 cv
80.7549 403.134 79.8965 405.568 78.4751 407.66 cv
76.5117 410.549 72.6581 412.669 69.2169 413.046 cv
68.6344 413.11 68.055 413.14 67.481 413.14 cv
.815686 .713725 .309804 rgb
f
57.0776 409.57 mo
56.7866 409.57 56.68 409.38 57.0425 408.817 cv
57.5552 408.022 58.9423 407.357 59.6064 406.56 cv
60.8962 405.015 61.8013 403.187 62.5906 401.345 cv
62.9805 401.317 63.3553 401.103 63.6914 400.884 cv
63.7033 400.876 63.7152 400.868 63.7271 400.861 cv
63.0916 402.283 62.4093 403.684 61.6816 405.062 cv
60.8462 406.642 59.8764 408.268 58.312 409.133 cv
57.926 409.346 57.3933 409.57 57.0776 409.57 cv
.839216 .760784 .623529 rgb
f
108.99 412.181 mo
106.755 412.181 104.525 411.882 102.376 411.207 cv
100.482 410.612 98.1264 410.111 97.5015 407.909 cv
97.4248 407.639 97.3868 407.325 97.5469 407.094 cv
97.6994 406.873 97.9631 406.807 98.2416 406.807 cv
98.4 406.807 98.5631 406.828 98.7134 406.854 cv
101.395 407.322 104.077 407.79 106.759 408.258 cv
107.177 408.331 107.629 408.392 108.068 408.392 cv
108.782 408.392 109.459 408.229 109.893 407.689 cv
110.377 407.086 110.352 406.235 110.341 405.461 cv
110.29 401.901 111.098 398.242 113.181 395.355 cv
114.904 392.966 117.906 390.897 120.955 390.897 cv
121.049 390.897 121.143 390.899 121.236 390.903 cv
126.035 391.105 126.775 396.965 125.704 400.59 cv
125.267 402.067 124.749 403.537 124.063 404.913 cv
121.644 406.029 119.153 407.008 116.565 407.649 cv
115.073 408.019 113.549 408.278 112.012 408.365 cv
111.157 408.413 109.849 408.228 109.332 409.072 cv
110.038 409.403 110.919 409.527 111.85 409.527 cv
113.423 409.527 115.136 409.174 116.372 408.873 cv
119.019 408.229 121.539 407.073 123.759 405.495 cv
123.319 406.303 122.814 407.072 122.226 407.783 cv
119.903 410.596 117.032 411.191 113.636 411.773 cv
112.103 412.036 110.545 412.181 108.99 412.181 cv
.815686 .713725 .309804 rgb
f
111.85 409.527 mo
110.919 409.527 110.038 409.403 109.332 409.072 cv
109.849 408.228 111.157 408.413 112.012 408.365 cv
113.549 408.278 115.073 408.019 116.565 407.649 cv
119.153 407.008 121.644 406.029 124.063 404.913 cv
123.965 405.109 123.864 405.303 123.759 405.495 cv
121.539 407.073 119.019 408.229 116.372 408.873 cv
115.136 409.174 113.423 409.527 111.85 409.527 cv
.839216 .760784 .623529 rgb
f
205.781 430.647 mo
205.781 424.801 li
203.186 430.646 li
202.609 430.646 li
200.013 424.801 li
200.013 430.647 li
199.419 430.647 li
199.419 423.651 li
200.154 423.651 li
202.897 429.967 li
205.641 423.651 li
206.376 423.651 li
206.376 430.647 li
205.781 430.647 li
cp
0 0 0 rgb
f
213.92 427.472 mo
213.92 429.422 213.29 430.777 211.128 430.777 cv
208.99 430.777 208.336 429.462 208.336 427.472 cv
208.336 423.651 li
208.931 423.651 li
208.931 427.428 li
208.931 429.242 209.456 430.235 211.128 430.235 cv
212.818 430.235 213.326 429.211 213.326 427.428 cv
213.326 423.651 li
213.92 423.651 li
213.92 427.472 li
cp
f
215.658 429.403 mo
216.188 429.946 217.228 430.263 218.229 430.263 cv
219.353 430.263 220.45 429.845 220.45 428.834 cv
220.45 427.646 219.32 427.556 217.957 427.301 cv
216.732 427.072 215.591 426.76 215.591 425.473 cv
215.591 424.141 217.009 423.527 218.47 423.527 cv
219.301 423.527 220.154 423.727 220.778 424.104 cv
220.43 424.531 li
219.884 424.192 219.146 424.016 218.404 424.016 cv
217.257 424.016 216.196 424.479 216.196 425.444 cv
216.196 426.4 217.155 426.625 218.127 426.809 cv
219.639 427.097 221.078 427.273 221.078 428.833 cv
221.078 430.174 219.643 430.768 218.213 430.768 cv
217.108 430.768 215.914 430.42 215.298 429.808 cv
215.658 429.403 li
cp
f
225.225 424.149 mo
225.225 430.647 li
224.63 430.647 li
224.63 424.149 li
222.026 424.149 li
222.026 423.651 li
227.828 423.651 li
227.828 424.149 li
225.225 424.149 li
cp
f
232.355 428.218 mo
230.733 424.29 li
229.111 428.218 li
232.355 428.218 li
cp
233.336 430.647 mo
232.541 428.716 li
228.925 428.716 li
228.13 430.647 li
227.506 430.647 li
230.418 423.651 li
231.049 423.651 li
233.961 430.647 li
233.336 430.647 li
cp
f
235.959 427.531 mo
238.188 427.531 li
239.264 427.531 239.868 426.873 239.868 425.833 cv
239.868 424.807 239.253 424.141 238.188 424.141 cv
235.959 424.141 li
235.959 427.531 li
cp
238.243 423.65 mo
239.646 423.65 240.463 424.545 240.463 425.832 cv
240.463 426.981 239.839 427.793 238.725 427.961 cv
240.712 430.647 li
240.009 430.647 li
238.11 428.02 li
235.96 428.02 li
235.96 430.647 li
235.365 430.647 li
235.365 423.65 li
238.243 423.65 li
cp
f
244.573 430.146 mo
246.449 430.146 247.501 429.003 247.501 427.145 cv
247.501 425.312 246.431 424.153 244.573 424.153 cv
242.94 424.153 li
242.94 430.146 li
244.573 430.146 li
cp
244.573 423.651 mo
246.8 423.651 248.096 425.068 248.096 427.145 cv
248.096 429.245 246.819 430.647 244.573 430.647 cv
242.346 430.647 li
242.346 423.651 li
244.573 423.651 li
cp
f
198.701 384.896 mo
197.702 388.447 198.876 392.519 201.613 394.992 cv
202.95 396.201 204.599 397.028 206.318 397.57 cv
209.789 398.664 213.858 398.523 216.736 396.296 cv
220.388 393.47 221.075 387.801 218.869 383.743 cv
214.568 375.833 201.376 375.383 198.701 384.896 cv
.992157 .678431 0 rgb
f
225.004 371.675 mo
223.351 374.745 223.52 378.666 225.26 381.688 cv
225.994 382.963 227.006 384.102 228.283 384.832 cv
229.608 385.588 231.151 385.87 232.671 386.015 cv
234.424 386.182 236.233 386.175 237.893 385.586 cv
240.337 384.717 242.271 382.539 242.846 380.009 cv
243.187 378.503 243.07 376.929 242.813 375.406 cv
242.591 374.098 242.259 372.789 241.61 371.632 cv
238.019 365.221 228.481 365.219 225.004 371.675 cv
f
226.108 391.597 mo
223.112 394.688 222.382 399.747 224.381 403.56 cv
224.941 404.629 225.699 405.606 226.665 406.331 cv
228.649 407.819 231.287 408.098 233.766 408.008 cv
235.041 407.962 236.33 407.828 237.525 407.383 cv
240.813 406.158 242.898 402.592 242.913 399.083 cv
242.928 395.646 240.915 390.789 237.619 389.249 cv
233.912 387.518 228.882 388.735 226.108 391.597 cv
f
188.168 395.306 mo
187.786 396.06 187.607 396.902 187.533 397.744 cv
187.46 398.578 187.487 399.431 187.732 400.23 cv
188.349 402.239 190.43 403.674 192.53 403.604 cv
194.631 403.534 196.585 402.011 197.234 400.013 cv
197.883 398.014 197.225 395.674 195.678 394.251 cv
193.374 392.135 189.632 392.412 188.168 395.306 cv
.901961 .45098 0 rgb
f
253.212 381.457 mo
250.591 382.036 248.352 384.277 248.01 386.939 cv
247.669 389.602 249.425 392.447 252.023 393.121 cv
252.936 393.356 253.897 393.34 254.829 393.203 cv
256.299 392.986 257.795 392.423 258.726 391.266 cv
259.152 390.735 259.441 390.103 259.619 389.445 cv
260.054 387.842 259.817 386.067 258.978 384.633 cv
257.968 382.907 255.34 380.986 253.212 381.457 cv
f
208.547 379.829 mo
207.806 379.615 206.601 379.977 206.193 380.313 cv
206.004 380.469 205.843 380.711 205.91 380.946 cv
205.997 381.254 206.385 381.34 206.703 381.367 cv
207.289 381.418 209.574 381.436 209.093 380.271 cv
208.998 380.042 208.799 379.902 208.547 379.829 cv
cp
.65098 .4 .254902 rgb
f
228.733 395.04 mo
228.64 393.666 226.657 395.471 226.867 396.382 cv
226.91 396.567 227.056 396.74 227.244 396.761 cv
227.387 396.776 227.523 396.706 227.644 396.63 cv
227.969 396.423 228.251 396.148 228.467 395.83 cv
228.626 395.596 228.752 395.322 228.733 395.04 cv
cp
f
240.153 375.207 mo
239.941 375.513 240.02 375.935 240.071 376.295 cv
240.089 376.422 240.124 376.563 240.234 376.627 cv
240.59 376.838 240.834 376.241 240.813 375.982 cv
240.79 375.688 240.721 375.297 240.532 375.063 cv
240.46 375.003 li
240.299 375.052 li
240.153 375.207 li
cp
f
227.618 382.697 mo
226.588 382.204 225.747 381.157 225.28 380.168 cv
224.59 378.706 224.474 377.029 224.636 375.42 cv
224.794 373.838 225.28 372.171 226.52 371.177 cv
227.609 370.304 229.079 370.104 230.472 370.017 cv
230.696 370.003 230.927 369.994 231.16 369.994 cv
232.508 369.994 233.928 370.277 234.569 371.407 cv
235.327 372.741 234.504 374.417 233.521 375.596 cv
232.539 376.774 231.317 377.942 231.195 379.473 cv
231.189 379.555 231.185 379.638 231.184 379.722 cv
231.04 379.742 230.897 379.765 230.754 379.793 cv
229.449 380.045 227.342 381.08 227.618 382.697 cv
.992157 .709804 0 rgb
f
192.308 403.221 mo
191.998 403.221 191.683 403.179 191.367 403.088 cv
190.239 402.765 188.566 401.4 189.901 400.362 cv
190.95 399.548 192.453 399.918 193.423 398.753 cv
193.744 398.367 193.949 397.895 194.276 397.514 cv
194.577 397.163 195.028 396.95 195.461 396.95 cv
195.85 396.95 196.224 397.121 196.466 397.518 cv
196.727 397.948 196.747 398.482 196.685 398.98 cv
196.42 401.086 194.504 403.221 192.308 403.221 cv
.811765 .403922 0 rgb
f
210.412 397.39 mo
208.076 397.39 205.265 396.756 203.709 395.202 cv
201.078 392.575 209.459 392.903 210.516 392.617 cv
211.65 392.31 212.672 391.604 213.361 390.651 cv
214.155 389.555 214.515 388.156 215.468 387.195 cv
215.996 386.663 216.688 386.296 217.425 386.158 cv
217.587 386.128 217.755 386.109 217.921 386.109 cv
218.171 386.109 218.418 386.151 218.641 386.262 cv
219.396 386.634 219.606 387.604 219.638 388.446 cv
219.705 390.219 219.356 392.043 218.401 393.539 cv
216.974 395.773 214.336 397.025 211.701 397.321 cv
211.297 397.367 210.863 397.39 210.412 397.39 cv
.890196 .607843 0 rgb
f
233.091 407.631 mo
231.007 407.631 229.008 406.886 227.843 405.156 cv
227.666 404.893 227.524 404.586 227.557 404.271 cv
227.625 403.597 228.396 403.26 229.057 403.103 cv
230.505 402.762 232.232 402.925 233.478 401.892 cv
234.799 400.799 234.951 399.075 235.743 397.658 cv
236.488 396.324 237.712 395.173 239.214 394.892 cv
239.383 394.86 239.556 394.84 239.728 394.84 cv
239.941 394.84 240.152 394.871 240.35 394.948 cv
240.735 395.099 241.035 395.411 241.276 395.747 cv
243.255 398.498 241.625 402.56 239.605 404.894 cv
238.141 406.587 235.556 407.631 233.091 407.631 cv
f
233.221 385.188 mo
232.667 385.188 232.112 385.138 231.565 385.037 cv
230.359 384.814 228.197 384.379 227.709 383.036 cv
227.667 382.921 227.637 382.808 227.618 382.697 cv
227.732 382.751 227.847 382.799 227.965 382.839 cv
228.17 382.909 228.41 382.942 228.665 382.942 cv
229.518 382.942 230.532 382.565 230.944 381.914 cv
231.344 381.282 231.173 380.479 231.184 379.722 cv
231.735 379.645 232.289 379.621 232.844 379.621 cv
233.296 379.621 233.748 379.637 234.2 379.652 cv
234.652 379.668 235.105 379.684 235.556 379.684 cv
236.329 379.684 237.099 379.638 237.861 379.467 cv
238.436 379.338 239.007 379.138 239.592 379.138 cv
239.638 379.138 239.683 379.139 239.728 379.142 cv
240.362 379.176 241.039 379.562 241.146 380.188 cv
241.228 380.668 240.959 381.134 240.67 381.526 cv
238.95 383.862 236.09 385.188 233.221 385.188 cv
f
228.665 382.942 mo
228.41 382.942 228.17 382.909 227.965 382.839 cv
227.847 382.799 227.732 382.751 227.618 382.697 cv
227.342 381.08 229.449 380.045 230.754 379.793 cv
230.897 379.765 231.04 379.742 231.184 379.722 cv
231.173 380.479 231.344 381.282 230.944 381.914 cv
230.532 382.565 229.518 382.942 228.665 382.942 cv
.890196 .639216 0 rgb
f
253.429 392.773 mo
252.22 392.773 250.265 392.255 251.13 390.708 cv
251.901 389.329 254.865 388.701 256.245 388.231 cv
256.642 388.096 257.051 387.965 257.469 387.965 cv
257.497 387.965 257.525 387.966 257.554 387.967 cv
259.734 388.061 258.36 390.181 257.596 390.995 cv
256.572 392.087 255.133 392.681 253.648 392.767 cv
253.579 392.771 253.505 392.773 253.429 392.773 cv
.811765 .403922 0 rgb
f
351.881 430.158 mo
352.79 430.158 353.301 429.603 353.301 428.722 cv
353.301 427.852 352.781 427.289 351.881 427.291 cv
349.251 427.291 li
349.251 430.158 li
351.881 430.158 li
cp
349.251 426.798 mo
351.83 426.798 li
352.613 426.759 353.051 426.252 353.051 425.465 cv
353.051 424.655 352.568 424.134 351.732 424.134 cv
349.251 424.134 li
349.251 426.798 li
cp
351.789 423.648 mo
352.963 423.648 353.646 424.374 353.646 425.415 cv
353.646 426.174 353.3 426.746 352.671 426.996 cv
353.479 427.213 353.935 427.871 353.935 428.758 cv
353.935 429.881 353.224 430.646 351.974 430.646 cv
348.655 430.646 li
348.655 423.648 li
351.789 423.648 li
cp
0 0 0 rgb
f
356.149 424.148 mo
356.149 426.79 li
359.61 426.79 li
359.61 427.288 li
356.149 427.288 li
356.149 430.148 li
359.925 430.148 li
359.925 430.646 li
355.556 430.646 li
355.556 423.65 li
359.925 423.65 li
359.925 424.148 li
356.149 424.148 li
cp
f
362.06 424.148 mo
362.06 426.79 li
365.521 426.79 li
365.521 427.288 li
362.06 427.288 li
362.06 430.148 li
365.835 430.148 li
365.835 430.646 li
361.466 430.646 li
361.466 423.65 li
365.835 423.65 li
365.835 424.148 li
362.06 424.148 li
cp
f
370.023 424.148 mo
370.023 430.646 li
369.429 430.646 li
369.429 424.148 li
366.825 424.148 li
366.825 423.65 li
372.627 423.65 li
372.627 424.148 li
370.023 424.148 li
cp
f
322.877 375.945 mo
322.551 374.216 323.225 372.071 324.921 371.601 cv
326.357 371.201 327.802 372.157 328.902 373.163 cv
330.004 374.169 331.135 375.343 332.617 375.505 cv
333.929 375.648 335.166 374.955 336.337 374.346 cv
338.704 373.113 341.207 372.142 343.786 371.452 cv
344.217 371.337 344.673 371.229 345.102 371.35 cv
345.84 371.558 346.243 372.368 346.351 373.128 cv
346.457 373.887 346.362 374.671 346.537 375.418 cv
346.982 377.311 348.968 378.377 350.804 379.016 cv
352.641 379.654 354.684 380.207 355.829 381.778 cv
356.064 382.102 356.259 382.483 356.231 382.883 cv
356.198 383.383 355.835 383.789 355.628 384.245 cv
355.192 385.209 355.475 386.329 355.764 387.347 cv
356.428 389.691 359.41 394.921 355.716 395.916 cv
354.176 396.332 353.022 396.012 352.201 397.755 cv
351.783 398.641 351.654 399.631 351.391 400.575 cv
351.314 400.848 351.211 401.14 350.97 401.289 cv
350.757 401.422 350.488 401.409 350.237 401.396 cv
349.299 401.35 348.357 401.358 347.42 401.423 cv
347.121 401.443 346.81 401.473 346.554 401.629 cv
345.886 402.037 345.66 403.9 345.289 404.608 cv
344.796 405.548 344.172 406.416 343.376 407.125 cv
341.94 408.403 339.924 409.105 338.047 408.69 cv
335.348 408.094 335.106 406.227 334.453 404.052 cv
333.715 401.594 331.73 402.907 329.822 403.564 cv
328.902 403.881 327.8 403.975 327.03 403.379 cv
326.324 402.832 326.108 401.883 325.804 401.043 cv
325.499 400.203 324.903 399.304 324.011 399.27 cv
323.529 399.251 323.01 399.265 322.477 399.279 cv
321.149 399.315 319.733 399.35 318.573 398.881 cv
316.885 398.198 315.96 396.413 315.191 394.762 cv
314.885 394.103 314.573 393.374 314.757 392.67 cv
315.154 391.147 317.252 391.085 318.663 390.388 cv
318.855 390.292 319.052 390.167 319.134 389.969 cv
319.215 389.774 319.168 389.552 319.107 389.35 cv
318.769 388.223 318.04 387.257 317.561 386.181 cv
317.083 385.105 316.89 383.761 317.589 382.813 cv
318.302 381.846 319.692 381.647 320.873 381.872 cv
322.431 382.169 324.877 383.874 324.899 381.369 cv
324.916 379.613 323.208 377.706 322.877 375.945 cv
.764706 .584314 .345098 rgb
f
321.94 388.584 mo
321.865 388.148 321.842 387.674 322.061 387.29 cv
322.397 386.696 323.19 386.527 323.868 386.613 cv
324.545 386.699 325.192 386.974 325.873 387.02 cv
327.25 387.111 328.623 386.131 328.984 384.799 cv
329.167 384.124 329.111 383.402 329.292 382.727 cv
329.472 382.051 330.023 381.376 330.721 381.426 cv
331.118 381.455 331.456 381.709 331.822 381.864 cv
333.29 382.486 334.918 381.469 336.083 380.382 cv
337.248 379.294 338.477 377.999 340.069 377.955 cv
340.3 377.949 340.544 377.976 340.733 378.107 cv
341.504 378.643 340.561 379.818 340.65 380.753 cv
340.738 381.679 341.824 382.126 342.744 382.258 cv
343.664 382.391 344.734 382.48 345.256 383.25 cv
346.018 384.375 344.847 385.929 343.53 386.262 cv
342.753 386.458 341.95 386.411 341.144 386.363 cv
340.584 386.331 340.023 386.298 339.469 386.347 cv
338.116 386.467 336.604 387.443 336.764 388.792 cv
336.826 389.318 337.134 389.776 337.404 390.231 cv
338.004 391.237 338.469 392.422 338.203 393.562 cv
337.938 394.702 336.672 395.65 335.588 395.206 cv
334.508 394.763 334.266 393.388 333.937 392.268 cv
333.607 391.147 332.553 389.905 331.496 390.403 cv
330.578 390.837 330.629 392.125 330.661 393.141 cv
330.772 396.588 328.347 394.515 326.809 393.751 cv
324.478 392.595 322.428 391.418 321.94 388.584 cv
.65098 .4 .254902 rgb
f
337.55 403.171 mo
337.295 401.805 338.179 400.36 339.458 399.815 cv
340.109 399.538 340.865 399.449 341.4 398.984 cv
342.263 398.236 342.172 396.878 341.861 395.779 cv
341.551 394.681 341.093 393.519 341.456 392.436 cv
341.528 392.222 341.64 392.008 341.826 391.879 cv
342.164 391.646 342.617 391.755 343.025 391.806 cv
343.957 391.924 344.931 391.669 345.686 391.111 cv
346.895 390.217 347.608 388.568 349.074 388.232 cv
350.296 387.952 351.65 388.931 351.767 390.179 cv
351.786 390.389 351.773 390.607 351.675 390.793 cv
351.509 391.104 351.15 391.247 350.854 391.439 cv
349.956 392.025 349.582 393.296 350.019 394.275 cv
350.187 394.655 350.461 394.987 350.58 395.386 cv
350.865 396.333 350.126 397.376 349.178 397.656 cv
348.229 397.936 347.186 397.597 346.384 397.02 cv
344.697 397.728 343.531 399.525 343.572 401.354 cv
343.581 401.732 343.635 402.121 343.522 402.482 cv
343.358 403.005 342.884 403.359 342.438 403.676 cv
340.877 404.782 338.096 406.445 337.55 403.171 cv
f
366.212 376.451 mo
366.728 375.634 367.553 375.007 368.465 374.661 cv
368.721 374.564 368.999 374.478 369.175 374.268 cv
369.359 374.046 369.389 373.733 369.378 373.445 cv
369.342 372.464 368.95 371.518 368.943 370.536 cv
368.935 369.367 371.104 366.723 372.396 367.759 cv
372.812 368.093 373.06 368.589 373.416 368.984 cv
374.352 370.025 376.084 370.226 377.232 369.425 cv
378.405 368.606 379.191 366.86 380.61 367.033 cv
381.419 367.132 381.98 367.854 382.487 368.489 cv
383.288 369.491 384.273 370.966 385.705 370.912 cv
386.479 370.884 387.203 370.542 387.902 370.208 cv
389.663 369.365 393.457 366.335 394.74 369.596 cv
395.115 370.551 394.382 371.739 394.895 372.627 cv
395.593 373.834 397.702 373.632 398.86 373.986 cv
399.839 374.286 400.812 375.015 400.899 376.034 cv
400.938 376.495 400.791 376.952 400.777 377.415 cv
400.703 379.836 403.11 379.53 404.548 380.475 cv
405.946 381.393 406.079 382.901 406.028 384.463 cv
405.909 388.105 404.417 393.793 400.28 394.753 cv
399.846 394.854 399.389 394.895 398.992 395.101 cv
397.633 395.802 397.795 397.741 397.421 399.225 cv
396.816 401.623 394.265 403.232 391.793 403.155 cv
389.32 403.078 387.043 401.555 385.623 399.53 cv
384.966 398.593 384.394 397.484 383.342 397.032 cv
382.623 396.724 381.805 396.785 381.027 396.874 cv
378.785 397.131 376.511 397.57 374.29 397.164 cv
371.116 396.584 368.349 394.16 367.354 391.09 cv
366.928 389.772 366.916 388.265 367.947 387.225 cv
368.996 386.166 370.431 386.051 370.347 384.131 cv
370.25 381.925 368.245 381.837 366.796 380.736 cv
365.777 379.963 365.427 378.488 365.824 377.271 cv
365.919 376.981 366.05 376.707 366.212 376.451 cv
f
340.703 406.953 mo
340.585 406.953 340.469 406.932 340.359 406.882 cv
339.72 406.585 339.897 405.766 339.944 404.997 cv
340.814 404.766 341.746 404.166 342.438 403.676 cv
342.884 403.359 343.358 403.005 343.522 402.482 cv
343.635 402.121 343.581 401.732 343.572 401.354 cv
343.571 401.319 343.571 401.283 343.571 401.247 cv
343.577 401.262 343.584 401.278 343.59 401.293 cv
344.395 403.315 343.36 405.883 341.376 406.78 cv
341.165 406.876 340.93 406.953 340.703 406.953 cv
337.509 402.572 mo
337.506 402.572 337.504 402.572 337.502 402.571 cv
335.351 402.276 334.53 401.867 332.73 400.755 cv
331.87 400.223 331.16 400.168 330.393 400.168 cv
330.293 400.168 330.192 400.169 330.09 400.17 cv
329.988 400.17 329.885 400.171 329.78 400.171 cv
329.489 400.171 329.184 400.164 328.854 400.131 cv
327.181 399.959 327.193 399.051 326.179 397.91 cv
324.811 396.373 323.36 397.168 321.694 396.551 cv
320.114 395.966 320.098 393.368 321.539 392.497 cv
322.247 392.069 323.073 392.013 323.917 392.001 cv
324.741 392.692 325.746 393.224 326.809 393.751 cv
327.696 394.192 328.879 395.069 329.7 395.069 cv
330.301 395.069 330.708 394.598 330.661 393.141 cv
330.629 392.125 330.578 390.837 331.496 390.403 cv
331.661 390.326 331.826 390.29 331.988 390.29 cv
332.864 390.29 333.659 391.322 333.937 392.268 cv
334.266 393.388 334.508 394.763 335.588 395.206 cv
335.775 395.283 335.967 395.318 336.158 395.318 cv
337.078 395.318 337.983 394.506 338.203 393.562 cv
338.393 392.746 338.209 391.907 337.869 391.127 cv
338.517 390.953 339.048 390.351 339.573 389.749 cv
340.197 389.036 340.812 388.322 341.605 388.322 cv
341.704 388.322 341.805 388.333 341.91 388.356 cv
342.866 388.572 343.236 389.705 343.886 390.438 cv
344.277 390.88 344.813 391.178 345.388 391.309 cv
344.814 391.65 344.145 391.834 343.477 391.834 cv
343.326 391.834 343.175 391.825 343.025 391.806 cv
342.809 391.779 342.58 391.735 342.362 391.735 cv
342.169 391.735 341.985 391.769 341.826 391.879 cv
341.64 392.008 341.528 392.222 341.456 392.436 cv
341.093 393.519 341.551 394.681 341.861 395.779 cv
342.172 396.878 342.263 398.236 341.4 398.984 cv
340.865 399.449 340.109 399.538 339.458 399.815 cv
338.365 400.281 337.561 401.403 337.509 402.572 cv
.686274 .52549 .309804 rgb
f
336.158 395.318 mo
335.967 395.318 335.775 395.283 335.588 395.206 cv
334.508 394.763 334.266 393.388 333.937 392.268 cv
333.659 391.322 332.864 390.29 331.988 390.29 cv
331.826 390.29 331.661 390.326 331.496 390.403 cv
330.578 390.837 330.629 392.125 330.661 393.141 cv
330.708 394.598 330.301 395.069 329.7 395.069 cv
328.879 395.069 327.696 394.192 326.809 393.751 cv
325.746 393.224 324.741 392.692 323.917 392.001 cv
324.865 391.988 325.838 392.032 326.694 391.666 cv
327.777 391.203 328.488 390.167 329.12 389.173 cv
329.749 388.185 330.393 387.152 331.374 386.513 cv
331.876 386.186 332.494 385.995 333.091 385.995 cv
333.663 385.995 334.215 386.17 334.627 386.569 cv
335.297 387.22 335.409 388.23 335.632 389.138 cv
335.854 390.044 336.381 391.044 337.306 391.164 cv
337.37 391.172 337.433 391.176 337.495 391.176 cv
337.624 391.176 337.748 391.159 337.869 391.127 cv
338.209 391.907 338.393 392.746 338.203 393.562 cv
337.983 394.506 337.078 395.318 336.158 395.318 cv
.584314 .360784 .227451 rgb
f
339.944 404.997 mo
339.956 404.786 339.959 404.579 339.933 404.388 cv
339.784 403.313 338.585 402.721 337.509 402.572 cv
337.561 401.403 338.365 400.281 339.458 399.815 cv
340.109 399.538 340.865 399.449 341.4 398.984 cv
342.263 398.236 342.172 396.878 341.861 395.779 cv
341.551 394.681 341.093 393.519 341.456 392.436 cv
341.528 392.222 341.64 392.008 341.826 391.879 cv
341.985 391.769 342.169 391.735 342.362 391.735 cv
342.58 391.735 342.809 391.779 343.025 391.806 cv
343.175 391.825 343.326 391.834 343.477 391.834 cv
344.145 391.834 344.814 391.65 345.388 391.309 cv
345.608 391.359 345.834 391.385 346.06 391.385 cv
346.46 391.385 346.859 391.304 347.224 391.135 cv
347.525 390.995 347.875 390.806 348.183 390.806 cv
348.321 390.806 348.45 390.844 348.563 390.94 cv
348.955 391.278 348.652 391.926 348.276 392.282 cv
347.9 392.638 347.42 393.047 347.52 393.555 cv
347.646 394.201 348.639 394.428 348.684 395.084 cv
348.734 395.819 347.693 395.967 346.948 395.967 cv
346.938 395.967 346.929 395.967 346.919 395.967 cv
346.909 395.967 346.899 395.967 346.889 395.967 cv
345.839 395.967 344.764 396.265 343.972 396.952 cv
343.173 397.646 342.713 398.77 342.965 399.798 cv
343.09 400.307 343.372 400.761 343.571 401.247 cv
343.571 401.283 343.571 401.319 343.572 401.354 cv
343.581 401.732 343.635 402.121 343.522 402.482 cv
343.358 403.005 342.884 403.359 342.438 403.676 cv
341.746 404.166 340.814 404.766 339.944 404.997 cv
f
349.213 388.032 mo
348.92 388.032 348.616 387.958 348.352 387.838 cv
347.058 387.25 346.327 385.87 345.205 385 cv
345.54 384.441 345.625 383.795 345.256 383.25 cv
344.734 382.48 343.664 382.391 342.744 382.258 cv
341.824 382.126 340.738 381.679 340.65 380.753 cv
340.561 379.818 341.504 378.643 340.733 378.107 cv
340.691 378.078 340.646 378.054 340.599 378.034 cv
340.817 377.882 341.039 377.735 341.264 377.594 cv
341.406 377.506 341.562 377.416 341.726 377.416 cv
341.746 377.416 341.765 377.417 341.785 377.42 cv
342.139 377.47 342.26 377.904 342.397 378.233 cv
343.005 379.685 344.922 379.871 346.395 380.42 cv
348.861 381.337 350.59 383.944 350.474 386.572 cv
350.457 386.959 350.394 387.368 350.139 387.659 cv
349.907 387.924 349.568 388.032 349.213 388.032 cv
332.767 382.054 mo
332.449 382.054 332.132 381.995 331.822 381.864 cv
331.456 381.709 331.118 381.455 330.721 381.426 cv
330.696 381.424 330.672 381.423 330.648 381.423 cv
330.352 381.423 330.084 381.553 329.863 381.755 cv
328.984 381.222 328.323 380.437 328.083 379.048 cv
328.042 378.811 328.021 378.559 328.115 378.338 cv
328.263 377.988 328.588 377.858 328.964 377.858 cv
329.384 377.858 329.869 378.02 330.246 378.216 cv
331.903 379.078 333.56 379.939 335.219 380.802 cv
335.296 380.842 335.374 380.882 335.454 380.921 cv
334.646 381.552 333.701 382.054 332.767 382.054 cv
.686274 .52549 .309804 rgb
f
336.799 385.022 mo
335.082 385.022 334.502 383.466 332.593 382.834 cv
331.604 382.507 330.647 382.231 329.863 381.755 cv
330.084 381.553 330.352 381.423 330.648 381.423 cv
330.672 381.423 330.696 381.424 330.721 381.426 cv
331.118 381.455 331.456 381.709 331.822 381.864 cv
332.132 381.995 332.449 382.054 332.767 382.054 cv
333.701 382.054 334.646 381.552 335.454 380.921 cv
335.792 381.086 336.152 381.228 336.512 381.228 cv
336.616 381.228 336.72 381.216 336.824 381.189 cv
337.284 381.072 337.62 380.692 337.943 380.344 cv
338.743 379.482 339.635 378.707 340.599 378.034 cv
340.646 378.054 340.691 378.078 340.733 378.107 cv
341.504 378.643 340.561 379.818 340.65 380.753 cv
340.738 381.679 341.824 382.126 342.744 382.258 cv
343.664 382.391 344.734 382.48 345.256 383.25 cv
345.625 383.795 345.54 384.441 345.205 385 cv
345.151 384.958 345.097 384.917 345.041 384.878 cv
344.155 384.254 343.122 384.02 342.045 384.02 cv
340.715 384.02 339.317 384.377 338.046 384.796 cv
337.566 384.954 337.158 385.022 336.799 385.022 cv
.584314 .360784 .227451 rgb
f
402.286 390.261 mo
401.267 389.536 399.891 389.18 399.405 388.044 cv
398.665 386.314 400.53 383.885 399.128 382.63 cv
398.798 382.335 398.392 382.221 397.96 382.221 cv
397.327 382.221 396.639 382.465 396.055 382.744 cv
394.974 383.26 393.929 383.85 392.928 384.508 cv
391.787 385.258 390.645 386.12 389.295 386.32 cv
389.155 386.341 389.012 386.351 388.868 386.351 cv
387.625 386.351 386.315 385.598 386.189 384.382 cv
386.061 383.137 387.173 382.073 387.259 380.824 cv
387.311 380.082 386.993 379.369 386.684 378.693 cv
385.981 377.16 385.045 375.436 383.387 375.13 cv
383.214 375.098 383.044 375.084 382.875 375.084 cv
381.881 375.084 380.939 375.588 379.993 376.093 cv
379.048 376.598 378.098 377.102 377.091 377.102 cv
376.972 377.102 376.852 377.095 376.73 377.08 cv
375.338 376.908 374.282 375.725 372.956 375.279 cv
373.164 374.938 373.351 374.577 373.547 374.24 cv
374.002 373.457 374.8 372.675 375.638 372.675 cv
375.802 372.675 375.967 372.705 376.132 372.77 cv
376.905 373.079 377.265 374.063 378.058 374.317 cv
378.194 374.361 378.326 374.381 378.454 374.381 cv
379.551 374.381 380.4 372.933 381.534 372.482 cv
381.797 372.378 382.069 372.332 382.342 372.332 cv
383.206 372.332 384.089 372.794 384.792 373.349 cv
385.717 374.078 386.537 374.995 387.641 375.408 cv
388.645 375.784 389.976 375.835 390.412 376.814 cv
390.961 378.043 389.463 379.468 389.957 380.72 cv
390.126 381.145 390.508 381.461 390.931 381.638 cv
391.268 381.78 391.623 381.84 391.982 381.84 cv
392.766 381.84 393.572 381.551 394.281 381.185 cv
395.316 380.648 396.285 379.941 397.418 379.67 cv
397.671 379.609 397.937 379.578 398.203 379.578 cv
399.131 379.578 400.063 379.955 400.454 380.771 cv
400.674 381.229 400.693 381.757 400.876 382.23 cv
401.405 383.606 403.173 384.262 403.547 385.688 cv
403.954 387.243 402.481 388.673 402.286 390.261 cv
f
372.789 375.228 mo
374.195 375.625 375.28 376.9 376.73 377.08 cv
377.873 377.222 378.936 376.657 379.993 376.093 cv
381.1 375.502 382.202 374.912 383.387 375.13 cv
385.045 375.436 385.981 377.16 386.684 378.693 cv
386.993 379.369 387.311 380.082 387.259 380.824 cv
387.173 382.073 386.061 383.137 386.189 384.382 cv
386.329 385.739 387.945 386.52 389.295 386.32 cv
390.645 386.12 391.787 385.258 392.928 384.508 cv
393.929 383.85 394.974 383.26 396.055 382.744 cv
397.038 382.274 398.316 381.903 399.128 382.63 cv
400.53 383.885 398.665 386.314 399.405 388.044 cv
399.961 389.343 401.681 389.622 402.699 390.6 cv
404.252 392.091 403.76 394.681 402.86 396.636 cv
401.961 398.591 400.734 400.636 401.182 402.74 cv
401.318 403.382 401.598 404.094 401.25 404.649 cv
401.013 405.03 400.553 405.197 400.126 405.339 cv
398.489 405.883 396.614 406.409 395.113 405.558 cv
393.758 404.789 393.196 403.172 392.469 401.794 cv
391.742 400.416 390.385 399.029 388.867 399.382 cv
387.821 399.625 387.148 400.603 386.423 401.395 cv
384.395 403.611 381.221 404.717 378.254 404.242 cv
377.958 404.194 377.652 404.127 377.416 403.942 cv
377.149 403.734 377.008 403.405 376.913 403.08 cv
376.241 400.772 377.263 397.785 375.444 396.215 cv
374.372 395.289 372.654 395.287 371.755 394.193 cv
371.374 393.73 371.2 393.133 371.106 392.542 cv
370.966 391.644 370.989 390.721 370.768 389.839 cv
370.547 388.957 370.008 388.079 369.145 387.792 cv
367.885 387.374 365.912 388.036 365.825 386.192 cv
365.77 385.026 366.649 384.166 367.059 383.152 cv
367.575 381.873 367.217 380.798 367.364 379.5 cv
367.645 377.029 370.141 374.477 372.789 375.228 cv
.764706 .584314 .345098 rgb
f
374.758 386.722 mo
375.1 385.848 376.34 385.373 377.048 385.988 cv
377.317 386.223 377.486 386.575 377.803 386.741 cv
378.397 387.054 379.122 386.504 379.354 385.874 cv
379.586 385.243 379.528 384.541 379.712 383.895 cv
379.896 383.248 380.498 382.61 381.147 382.781 cv
381.628 382.908 381.899 383.416 382.039 383.894 cv
382.475 385.384 382.286 387.233 383.49 388.215 cv
384.429 388.979 386.05 389.032 386.425 390.184 cv
386.55 390.568 386.52 391.053 386.847 391.291 cv
386.99 391.396 387.177 391.425 387.355 391.432 cv
388.433 391.473 389.402 390.833 390.297 390.232 cv
391.191 389.631 392.188 389.017 393.261 389.117 cv
394.334 389.218 395.323 390.434 394.785 391.368 cv
394.624 391.648 394.358 391.853 394.093 392.037 cv
392.726 392.992 391.159 393.661 389.524 393.988 cv
388.716 394.149 387.873 394.235 387.146 394.621 cv
385.034 395.74 384.601 398.951 382.371 399.81 cv
381.697 400.069 380.752 399.946 380.507 399.267 cv
380.368 398.878 380.51 398.45 380.65 398.062 cv
381.514 395.691 383.494 392.385 380.158 391.276 cv
378.274 390.649 373.511 389.901 374.758 386.722 cv
.65098 .4 .254902 rgb
f
381.134 396.84 mo
381.132 396.83 381.13 396.819 381.128 396.809 cv
380.73 394.922 379.555 393.991 377.932 393.417 cv
376.391 392.872 375.66 392.407 374.781 390.877 cv
374.127 389.738 374.375 388.799 374.557 387.856 cv
374.715 390.096 378.522 390.732 380.158 391.276 cv
382.95 392.204 382.019 394.67 381.134 396.84 cv
385.705 389.331 mo
385.044 388.918 384.116 388.724 383.49 388.215 cv
382.784 387.639 382.557 386.765 382.402 385.839 cv
382.777 386.073 383.211 386.257 383.6 386.457 cv
384.466 386.902 385.552 388.202 385.705 389.331 cv
374.68 386.939 mo
374.696 386.567 374.655 386.185 374.503 385.78 cv
374.169 384.893 373.129 384.538 372.411 383.918 cv
371.322 382.98 371.013 381.253 371.707 379.994 cv
371.785 379.854 371.905 379.702 372.062 379.702 cv
372.071 379.702 372.08 379.702 372.089 379.703 cv
372.206 379.715 372.294 379.811 372.369 379.901 cv
373.281 381.011 374.052 382.452 375.45 382.78 cv
375.648 382.827 375.842 382.848 376.035 382.848 cv
377.559 382.848 378.936 381.525 380.444 380.964 cv
380.629 380.895 380.825 380.838 381.02 380.838 cv
381.078 380.838 381.136 380.843 381.193 380.855 cv
381.914 381 382.08 381.979 381.889 382.688 cv
381.842 382.861 381.783 383.036 381.724 383.21 cv
381.579 383.006 381.39 382.845 381.147 382.781 cv
381.075 382.762 381.003 382.753 380.932 382.753 cv
380.368 382.753 379.875 383.32 379.712 383.895 cv
379.528 384.541 379.586 385.243 379.354 385.874 cv
379.168 386.378 378.667 386.832 378.169 386.832 cv
378.045 386.832 377.921 386.803 377.803 386.741 cv
377.486 386.575 377.317 386.223 377.048 385.988 cv
376.826 385.795 376.552 385.71 376.269 385.71 cv
375.651 385.71 374.992 386.122 374.758 386.722 cv
374.729 386.796 374.703 386.868 374.68 386.939 cv
.686274 .52549 .309804 rgb
f
382.612 399.015 mo
382.381 399.015 382.155 398.958 381.96 398.829 cv
381.342 398.423 381.284 397.568 381.134 396.84 cv
382.019 394.67 382.95 392.204 380.158 391.276 cv
378.522 390.732 374.715 390.096 374.557 387.856 cv
374.616 387.553 374.668 387.25 374.68 386.939 cv
374.703 386.868 374.729 386.796 374.758 386.722 cv
374.992 386.122 375.651 385.71 376.269 385.71 cv
376.552 385.71 376.826 385.795 377.048 385.988 cv
377.317 386.223 377.486 386.575 377.803 386.741 cv
377.921 386.803 378.045 386.832 378.169 386.832 cv
378.667 386.832 379.168 386.378 379.354 385.874 cv
379.586 385.243 379.528 384.541 379.712 383.895 cv
379.875 383.32 380.368 382.753 380.932 382.753 cv
381.003 382.753 381.075 382.762 381.147 382.781 cv
381.39 382.845 381.579 383.006 381.724 383.21 cv
381.543 383.751 381.363 384.294 381.524 384.826 cv
381.661 385.277 381.997 385.587 382.402 385.839 cv
382.557 386.765 382.784 387.639 383.49 388.215 cv
384.116 388.724 385.044 388.918 385.705 389.331 cv
385.737 389.571 385.727 389.803 385.664 390.018 cv
385.567 390.347 385.356 390.629 385.218 390.943 cv
384.86 391.751 385.003 392.677 385.039 393.56 cv
385.087 394.721 384.934 395.891 384.589 397.001 cv
384.405 397.595 384.15 398.194 383.682 398.603 cv
383.389 398.857 382.994 399.015 382.612 399.015 cv
.584314 .360784 .227451 rgb
f
397.315 401.54 mo
397.171 401.54 397.025 401.514 396.889 401.469 cv
396.04 401.188 395.544 400.318 395.223 399.485 cv
394.902 398.651 394.654 397.744 394.015 397.12 cv
393.556 396.674 392.914 396.439 392.276 396.439 cv
391.84 396.439 391.406 396.548 391.031 396.773 cv
390.656 396.999 390.395 397.097 390.212 397.097 cv
389.81 397.097 389.781 396.627 389.731 396.004 cv
389.708 395.701 390.25 395.472 390.163 395.029 cv
390.042 394.41 389.617 394.304 389.192 394.051 cv
389.303 394.031 389.414 394.01 389.524 393.988 cv
391.159 393.661 392.726 392.992 394.093 392.037 cv
394.358 391.853 394.624 391.648 394.785 391.368 cv
395.323 390.434 394.334 389.218 393.261 389.117 cv
393.182 389.11 393.104 389.106 393.027 389.106 cv
392.713 389.106 392.407 389.164 392.108 389.26 cv
392.485 388.805 392.983 388.285 393.512 387.87 cv
394.07 387.432 394.662 387.112 395.182 387.112 cv
395.408 387.112 395.621 387.172 395.811 387.31 cv
396.57 387.86 396.293 389.033 396.515 389.944 cv
396.776 391.019 397.763 391.727 398.55 392.504 cv
399.338 393.282 399.999 394.49 399.449 395.451 cv
399.264 395.774 398.964 396.018 398.754 396.325 cv
397.884 397.602 398.816 399.425 398.232 400.855 cv
398.149 401.06 398.03 401.258 397.85 401.385 cv
397.694 401.494 397.506 401.54 397.315 401.54 cv
.686274 .52549 .309804 rgb
f
389.192 394.051 mo
389.127 394.012 389.061 393.969 388.997 393.921 cv
388.675 393.679 388.743 393.15 389 392.84 cv
389.258 392.53 389.641 392.358 389.966 392.119 cv
390.68 391.594 391.09 390.766 391.555 390.011 cv
391.674 389.817 391.866 389.552 392.108 389.26 cv
392.407 389.164 392.713 389.106 393.027 389.106 cv
393.104 389.106 393.182 389.11 393.261 389.117 cv
394.334 389.218 395.323 390.434 394.785 391.368 cv
394.624 391.648 394.358 391.853 394.093 392.037 cv
392.726 392.992 391.159 393.661 389.524 393.988 cv
389.414 394.01 389.303 394.031 389.192 394.051 cv
.584314 .360784 .227451 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.0.2
%%For: (\736\753\750\777 \700\761\745\745\742\740) ()
%%Title: (Seed-01.eps)
%%CreationDate: 5/5/2017 1:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9?5de<S6>hAlYB<mX2N4L=C,fkRsJZo:ZA7(.s"ZUabQd"N<G^fNoGBM)p0jl^`*8;H/#-_=F<H[\7h7A)#?glK:jk<;?
%rqAb!b02lKQ,/OSa1q'"Ip(Wd>$'9'e;Kl4<,:q\lc#gQ>-:rlc.53nq,^\ACkjD1,g:Xl.[Bj;R=$;3SgE-men]-PXZ)<8Ap\DK
%3pBV\B!TFW-n7Z^9C(]jh8@c`-!IE0X'n)bZ5+81LHLPT/K,_UkVJQPL[.qig5js)!f))4#klj?aiRIqQCnV5qCCqu$:Q%iZ97$d
%bj7J+_Tf/F;^.ETk(lN@5Do`'rq#VF\B7;LgBfF1)[+YU=Gg;W6+;Q*]2iMp>ImSF%?uhVMAt3]#,[uEH+DbfW>^)L<*?cfb+9"]
%+n:+6&cc7IH_4LF%"ZlCTcDCqHsGR6Ku4JkLhID$AjPfu7Xhh'n+sad9onRBpu'/E8.Dqe6%n&5-*Zn]g<sYP!3g.2Jk(s3:MkUr
%C?'TQ2M<Ip\5aTI7ML[$/gJKEWNt'V.UjM':W1CZT&U1-G9g1tJL/]L"9(7Nl*DbVB?sSM4\*q-L]4lW4\t:V/q,@!rke&ClUk+-
%IaeXm@CodJ&Nq^V"T=g`LRCJN*-NfK9m2q2/c++KPgMke1f2W[<]"*"/Bie,DhJhjgqPk#s*N9#5N/rmfGR2?Zb'GW(fFF3?s@q.
%9`m+(!$dgXa\:3c2l^<XX>RfdG^9p$)jRWJYuHh5c+9<'r?qCeY"VO3($CC_kso9LbdbM:.(sMpSg]GEQD;211,#E,'ZGHkCUWu\
%s!E1Q'/@IQSP%CZ;_(4#-nYo"qJ=bV;2(\32.*J=bk)5"q7!>C&2m=Y2T`RWV1[l4aS8g6lrBsp(&j(5fn:5RV\.Ghl>LsBF2Ccl
%2^=,k1;Y5i;tOQ8d.9%[`hW&ZRm,4#R`?Fq=L2:r:HQhl8\)8`8),nuUbJNYX][:L,SuH'ET5m>4R4ADK)!C1Pot"SUKTd*+V0pK
%'2m3"DXV*)Q!.n4?H!Pan22<81e9H(l6k_.mgD@T/intVrq5N:J(_[9O&!A/[A_,<PR5k;8Mg8^&`irh8uGh<#hqu$3!rm;r%Td$
%\Y`"m8%OWn7Cgeqe*ut*nDkj0RQpFl^0#7cI2l=_^ZQQ3##=KT<`glsmh`lR]f(Ag.9F%J8p&j[hc\&,a45U5JGS<PK\=gtG=\kT
%J'j=;3`Oh)O(tMqFZLUEq+nV-.7Njq-;c#_JN@S;)cSc!8+WR']0_s^S.TWms.NDPRKRU\1Z)r#77)cMk)5dB1TD1>d2+Zie?#92
%[3I(UU&=_rrd;!-pgs;<QB%_T\Q5k1F&1'prl`9b;QI:i:Ob5sUY:*ZQD-g@7A]fp=N%QPXgCXjNCp*;/N^*1p0[JnLQGQ>2s8qn
%bp_k+$]CR!1gfV][G(4W<[uPoF)T$r<3B1elD\+U[@dh+_cF$@i>MGT*rbAV9ko<AVd\[hO'rB")%jsc*7G"4Q.$u?'!%GLps!rT
%cN/RlgrfQ#RDSk/2kOI9`mi1(UA7Ejh7BbsY(p+Te627k=_XMR^Z#9nRiU<m7lT'l1t^2sg?H&HP"[Mf._k+i=r#E&Ri%eW]()7X
%j#>dp+8!I'ds@4V,pFk97\nV(&,!_H$r<7(*U9?9DC6U&,E1cC0fgN74OUo5]uJQ%e88:<[E?']3AEq4>:1V:eF\96?+h<*WLdd"
%2c[HV9')[V'PM$!FOQ6kWREeu::JJ$rOC+np_=VFnZRQ[/J6fu_h/_=J;)2t+s`ot=O=/!MKN$o$^nnR7c9q:phB_TSb_koZn+E9
%p]ljFE\6]DP:P1EU4Zg4aN/$9rK*n_95Dmd[X-K^BE$k-V*bdFRe9Ec]lmZ\j'OUt3jT"0cjqr1oMK5_ZRr9)[VP1N:OT[:TH?`i
%<:8+oU,'#1CsV,OW6KW;$@Bd02Cpd.%2jHk/8>tss.ciA(]S1@[o'D)')g]b.C4*fS\FUG1-(BA58Xc>A96F7F4m_7o8J.VGijS@
%20A?DV/eMd..uC:0?rQK"#f1>TsjkVrgTcJ=`oCR?3d*>9Bu=\?Co]:)qg_Qb:u9/?PR)-dH$QqWVqc*o`iFfh56UUDC)@rl1Pnc
%T9'""2(%C1p)kXm"m?\?@Zn!Z9CsTkN/9sipSm:Kd_A)K<;nnn&47rn*i0c)CnHlC8UA#AT4:B9\fkPeJ).Uu&?nT%dNbUJa^<Sn
%HDTDsp,LIea#hV_kn1FgL0LbIP]^("Oa/18?jr`A`besC&=FT#EN`9l!/upeF"JN%Zu`c[M=uF]nW8V2QUA((8CBFlbJd/hfkI!h
%%dN`0DnrhU&6qnNG!^(+7V9U),%?-\'T4WIeO-CX$^I58:D^?38PE[)e95SqWdZ1gdd@E$'glO)f),kgaFV_PqHjE&gZnO]Sl%A:
%1`Rq:9Y&%i(miFR,#d'<+@Jm8#m&*(4ZsT0*=YgrQ^h0Z)2O8Hi5IHFC*9L"1ZWDCVI@p^q(cL0>bWdQXL%q.8;>l"q.PRb_Eo?2
%CF-j>I](t][#l^3dG`#Ihk3<:(+18nNHFm\0%djtpNn]8@9k8JkIJ-sQF3sh_u7&[A:V*#!1NA*c7I>OpY/oUlD9;$(Wo/LCVo5;
%+cdBp1OiKJD_=J"KZId$LjTf?'qW2gD)T<'Fc**XnW9Nk2.U<J^"2U7`38kf=E*nO7Te7?8"'2O2Z0r]8jC3ca40sd>\]m;;QU^8
%FY0&4WV9r)JN8]$S4EZT>]Ea$U]KWH'QEt5hB;_g!Q)%fJWO)#,lM>oC.l__a#XpP+Y/mWJ;-[kK!!>4DISZC3)%@DauF(*!k>tu
%:XXeLDBcCBBc_E<B.?BgZ(kM478(,]OT8@]n$gI[.2`=bMsFdR,gBfmeK1-sa]e+O^_!_WD+6`NLh<Obm9KTe!=)LB%U:f)FXh)>
%>[28Ji5jl]e2l-N@QXLUM?&j*;[T#;-8)Hipi%Ao*=NT"M0WHfrfO8jie54"X>ckc8Ci0GL$;SX'rgTP43_6AV?8:s2"tSNpM''L
%\4_Eom4oICLI7)l?^C$.7_Qc)>mbbcTinV)140/pL$1M&3;)XX%[a5.2dRV#W+Y9e4hL_'cgJ:\P.=\?<A1hY^>23PFt&"q;qGn,
%>e:\*FR%RS?+[(OpJ3*Oe@#22FmWEaK/As;5jtP4YDKic294#h&34aYOZYIifTo)?&11O&cFJd13(uN/45HV+T<[FG;76BZK`t8V
%<mm\;1:e22.t<8f/mGl8;m79#;qci7k/co_']9s"-`Jr/WAc;'>)`l%3"H+h(flMR`KL@t?I_mR,r/q,=rH;ID_"1>MtEG:0&jsu
%E*2pG)Hd_T*1_/@B'I0AYuC&JGZY<7P*JPGHtiAVe4F/pF0/<U1!ErqY#.=P/"Z\.Aa6H`.L;/GG$M1UD@?3\pI5k*$`TFD;0Q!4
%d1e'=RM:U_<%9+K50^*MX,b\`$#AX;.VUSkhS,='&6LDM5KeH$2cV+W=adYPJ$.3Z%<$g@IoNtCbpP7@QO]POpg0_S?`\sP<i[4k
%ns;^$hD4$?7Jp'3f=5o#[0)cIM>3&5U1,,-gZ_riVuB&/2E??4EK^GQ!et?SmFig%"-l@<l(ijG:'6,3hCta6oWo/#GoBkt%*h$R
%`9:S7S)s?X2/9$$]b@4_Y:"uN6qaDcoI!7$VN:u]ZV#6N2^5E8[b'KO;6K/,e3&S<bYdfdl<-gTOJdHHs33^f'Lu-"HcXZ!jGQhi
%h*[e%+^YK^G*'TU!N_.36Y:au?"@Y$VUR3HIH0S+naD!<\o0^e2kKFV:\TjHqo6B(KJ^^,9_XOeB;\'pbW_GeC#j;Am84JK07KV4
%E6p'o,"ra6MR\d3"a&oHN6Do1+hBb[@oBmPf<)gaaNW0K`bP>E\C6>$lS\66CM?2n5`7@`IH.Jm$pJTl;G%DGn((.lV@KI8Z>"u.
%)BnuR%?JJlAe`c28_cgojOTYnlAImMoh*_?Cdt8?H8DX.]#cf=SW-G/be5$jZW'E^1k%?BTDc*qs6mtRKV)]U,lDksg.?Gc<k%4i
%a@rE1-`YP&PgR97h%>EV$>&r/[aJG%p>dPJ_N)X%&]k\Xp12(rilI"eXeD"a&q%JfGOUcs)`rI%^/S_f?hq<"#'[)gf3jf)!LQ3_
%`3[-HBQ(,s2"370]\EKXe%j.O#@:)k70d-m'SbX$e%j-`n1kHc9EQrs^e9(oGkms?]SoVZh4?a$YmDQ?)i&(#,=o<3ZANE$-,r-e
%Ena@LhK[+TP`fa,@0MB,jb4F`?l8VG/(23emMAp"\TD>-@Dtc[b3caT4ak?.q!5sm\\/rJ09*G:Q/`\hj`+@^e(^D46TIn[EuJQM
%QsKcR]jA@K-Tj,pEI*PlmCL:$)XBGt_.e4Je&Z\ngtVIQf2TOZbR7b?`%?5QCH<Rbi[(f!ZgB5`d?i:JJ)NjN=4'CUd8u%\-87sT
%^UP0*2:mS.Qh_cQ42>ae*FL=&=ujEc?JM+Pg[s3X+X1N_VWPg(H]^W%PgUtndKm6e)Apn)+/KR<+1L<-6N-\h't(jec)?kIj*Y<(
%QNlmO#d9f"i#-I<F^1ot90/VciM[A)cPA=JW87f<jn>k]/"=\qq3CC'P--_n\kAGK4#),I&tV['UK%l^6up\W90Z'B=gq7f:;@pf
%XgS^CVdZS(fCJ<lD3LMLE'*O\qs-)h$'U3/G^`lCSPQH]RfL\p^!cAYl(kT5#'L?q1-I0Go#"A?q(4Fu1nVeM[+&s&DJ*_Y9W$We
%9.Y^"HJd"*Y+qE/qf^E*pV1t/cI=82%&7KN'E.W]9M^b2@gIR1Jpa(5psTo;@k.k'_]cST$1dUG,W@kP5/nN3[O&FY:QSA;j#@>+
%EEA1L'BJ2I*2b1*a&k>s:QS@pj5fLF8W4elZWtKA]Jmue^"u?OEEej#ObK"**]H-<M55s^og80.Alrl)PumX!)XgP4)[]ENq[m+E
%^Y^ZQMjJ:gopoAS]n:>OeHPo"[7:C*ek34!GSIT\eRnHK'@htS%N_4B5:Y:q3mFEpL$"JK&oUcj5cmu@+YN\\M@>]68$#=;0%bDA
%EfmWN^Pb9u989Y-`4Y-j3ZL'OWiI%9G:B\kQjBOr7]flrUng_lB32&k\$&u:nJ2eIqi[#p@`[F(M7?FRd)=h(0pfan*W&Jbk&/'g
%))i@C)@8Abs/#=kUZDC\^1?6Sjjm_T:qN"*1BEsjfLc-?n9/]A0UV2P!g-2u6t[.Wl0D4&fZT!p3%7T9:)XpC]Kpt8oFP^'rGg=l
%/N60:rtr3[QC/G\j*#ZHM;G+h5PEVKeS=\$IXg!fPgX*M;_.91U_q4")(RKhZcOAs[E0[M0bn;a6tQ1V-ASg`K-S\Ic*5b[:@e[E
%0r4VL(](Y5R5Xb>kI&Wd9LRf+6T&%?H5cXiBQZ;r/Q\oF4e.!oYL=3/Rn9ltTc)XcQRD<=@>&9"#NM2\^>P81.1FtqgKnd8gKocP
%q>G3[K\pL\mnhrD1`IbTRdaOoToFb1RHQ`@.s0P74LMJ$$:.fj,:;_d/k:qkokGCVcIGAf8MdBtJ#:RuA9(r;CRqe*.\d(mXS`h4
%\kF%7MnsSh9IU3hbu'$k.G(:J`GLmZYYs8ZVf@k4<C^\3e5DB5==eWqSP#7r6IAk[<+*6c8?\7iLKrFL'c:ZOTB%cHUVC7<L9FR+
%rD>j`Y*GaAE\5fN^<NSgL$_4,V+];YSP3s$_DJ/g_G[Ag/mg+-qc9h'25T8O1LZBL<j&;4#WEQURIl,8[r*Q>Q!$9<Ob=[dQZ7%(
%)5a+ViIo(A;i)<&j2]X-;pYGZ/#cmEmC7E&[]M&.>JElO5E9lRilK)UG<l09#LGr^E7[k(SFYGEo3@/ta)1"M'I]@>gm$tSk;fc0
%B5([NQJO69h(J/%G0/\B&<!AM5r1'W4)&0cEQ(f._PQf<6(^aA;JtueglZ2]e=2HHHDQ(R@]+#lq0os:;cCf)!X2NE2jJbhaZ'3^
%:H6r(i<8^Q\WlC0:T!!Ia?CUuVbt%W%Ws:^$Cj,E#+ROEFc>h$Nc[O^8bs<5U5u_na=_G.:8%6BG(H^]#1#B\iJI>\k8^A@\@^kB
%_Y!](8_=GCpO^[^4)cqEVrZ<3fJN$*:>LXtVf'WRCO>f_h`bA=i(KsDh`e`8ng2nip9/RVJCaB_7<?pZ>*$'^^`,b?YHptkFjnrF
%:PQbQ*[gnF*(U$(JWtYFcuF5-5r%fq^IYgNklUp\ZnZaijlp!MVb*$NTdCe,S)?3=Z$Q8TlEQNQdhd$O@'IZjL?T(+D]XX;qa/T_
%p9s7%B_o!cNRKh,%TSOQkQG6?dQ92J+4E/g:@NSbkU`V,5ef2*iC9"JVADX[X3sOYWcOW/0llT$R]8*.qL+g40hp3.&HdLY?Ei2N
%T&%VklmBb)(q5d@X[ab9^=o^\eSa!l%Jt=>h%4H2E5k(e,7P1tEH\*AU@F^k"eA+>`mr@,EDgotd29Et1Q?(,V((cgJqul7(o@n)
%Z1WAiNT[2ONG1djgfA#*d?mB[-7,Bph55ut.UXSMU2^S/U:<'>;+Pci-#TCfqQju3+rj5>gT!C)GMgk.NHC,[rRDs47=+N90AL:j
%>.U8ck`$=dqQ3lNm<pQ%8F^:s]5\9'r$UsP)Pmm+IBUM4*L'+83Fa/qRD)g4lL.IG]rAb*p%SIOra#r4EpE,L#(LRf*oooapeiA=
%:E@/hE;3<^eC<HH3dak]DsHgd*PQ=c8E)NfI(/IRq:h"9S8(VB_WQ"5:%RlGnCMYRp+j?X:LsKdG^1L&,#s'fY+<sIDKK)\Z#;$<
%F'N/Lh(RZq.80<%Da'VIZ)JSP!G33niH:WA:hdcJ;rRE,nL8@l3LJP4ANEHBp.PsGO5SPr2oX\gr9BPHb:r@C1#35-[(X6hk4"&l
%"WjMFoI!'uVoYb1:Ncf[G(Cu/nP&_$Ar=JDXgIQ8)Y)"TDM&j%`>R]cU\@UmZC2U:S-G@chs/:ZfTKE%%;WAMZ6*)@@_.rS@$=I(
%\!LR]nG;V`2Ard..?n%r8m%%P;6@MP2C;>`=IJqkB&KHJq`&stq-t>L-a#G[6=elZ;`1B=;J_LkKR7p-,,R7Y3[t:eP@@BBisiBM
%=-;3]bI9=s`gjsT^J`J3\;RSd'`RacE;a]=C,(S0.4J*?Y,>,dp!KmO$AicXXB3jr*-&A`_/\7hU49'HruRLWQ#t\XQ-fUG<rNGU
%?"R:698duG9IVT9bu'%&V#][,3_:X99taDT;CU4l0ZB<!`NW7qY,Ah(.8b4e5h5/-'\j?;Mk+VGMYrM\:s$kT!m=;(G,7#3<9dY^
%![EEHQ<^82n5haPi="1CIoJZk,E=FQJ?Mp%\'%!7J_$qa;U6PgQ)gmOk/g?Bi"fS=3d2N\AA&G?.)jr*M38(18I8`tE$e2WAJfX2
%QtE'd=shBD^5&e7Ro3*OM@Gu1b=,"/6Be-i-9N(jKkWOj\L=pROf%,sn]sWQhPOPB1r)e+;5UlPrs`gd.s"S+s$/2/.NpS8g?DZ"
%U(hNE/kR$i-H2^Nk+W8demji#P)@9!?%`r2;_CZ\?m^TnJ*/H/,j*UP>0C]#f-o6kZ<s,e.`6&5&sIN"`T/SgNQu!t1UpGo)Y/T!
%[];(Fk0)JkRsG+a,\j\C0u-Akq^6,bcFT3cp!7K'60.^ASXBhrs%Le9Gh)Y-(N_*&0GS\.5rTO#,j=[ZeqJ7V;Cckn*gaDc3dar2
%m8>TSl=b(\Pin2#Sp^+L^KremRBN7M<]]l"LTctsX=Db]U.i;SBq8kE_ch:O,'BedU,`^1R*e]r_b-bQU5?ig4fHs_oCTXn4MB\C
%r1cs:9Se5_T?[mrG00X^_.>F@1[M26-R11#J+-8!SX/.trBNTj2;A#q?^7QYgosq^s&J)t@#::IT0;.]p0<mYlm\Df3;>g)oNBQD
%a.gm4rQnnII3JGRMDk(VI_"127,>#IbRT*@HUdf)5"*L6rQ6VS"hpJ"&!#`S*e!OB,G`23^_Xeb%mmj&5^tAXC/`s4q]+;te*$U8
%ppNJ\^/N]lKY>TQk0k+s;u2+fmX]q&a:ca62^CM9aHP*p!.P;K$qKQ"=Gbc!840e3">Ds,]+b7_$UiqB#6Rb0$-2__>_,s*1b'NF
%dHV8]4e_nq.!8c].6r:\DnR!%)u]<1h;UleT)%_UEHPGO%neD3g8V!r4mbD=12HNGVk793[M#b$olD,1`cCm`O;=/5%Qn0pGK7)m
%/?#oX.Bp`W=e>(mW(S:=l;S)TeI`#X1ENXt8N`O8/a8r^,m2b_9J1lH0`g68d`)qV)Sc@W=cs"fMRjJn-3$ZLr?Lu"MMDh)Ya@hT
%n+mAS]0qd3$p_D<0/8&KK3A!-1::#(;?Z4/a398)oF5sB=Zi"E_%b4dE!.H7+p.l<_52hl(h\kAW?b]pWX90u8F"[Dlp]8[>2OsW
%-mo9'j,)@?[<YU5fcC61q9m4e8'uh%W?Y[0UQ40LUP=;2P(2U!k>n\Q;0U,uBj3]m'e#,_k.4lLE@`P%V)7dZi*>0EKu4#`18<M'
%KHLP4lIPDGZ2[Z`U89E-M+#_;/5pBLn1'!nD>]/8U`j"d;?[O5%[P0/WB\`XU!3-)QgWY80#rMH#aJRGAHO,rn-s@M5QU=P>M$kW
%4WDVoheV,5/lN)6Z[)Nc0pCkTP;H(4G[:c(lGY"rI&>hPRAHP8c9:HQ&9o,>d]kAo1#':"kOG9K;R%d/feqn?]/uVD=Y!fmq]%Eb
%4jrBXk'Q[,.n-Y>X1$0Qp-6o"K;)[roFDZbR7R6ps&\ll?9qZm053J</%oa%"'VC)ll]Z2&@P0EhERNk$_T]R[Ef8ZJqT,4_;i^5
%?E2d<HN.4*r2*=D1QLoG?KkYK5Fd!qCE<B_S#sZ'NWiG&K:uUZG;cT&Y7lts<(AO>?DUsjMh]4[GU@F\-Y!28;41d+0g#Jel4VA.
%8*r,<'mW9jlG&N2rc=l?ks+#h9S\LGGa.4_"K%;nV+48df,"c%5LYMoe/]'O#Frb.X'MohJbZiS&m]1)E''a\M%A'6l@4G)p4j`<
%qesgDG-Q)RpocEFmg5*:X\--KHc3FU^<0&Z4.5oX.'-YSGH*URnP"8tXr@K<a;rQ`+9d/W?=q5V8\E>doFT;>h]<-[cn&*YJT1]>
%#Xm71SeqgdctrfT`NM"IMr;_/lW:oD<,[toYn\:gGFIV-(Zt3t"riP]9u4\EmnN?<nA`AE+C-oAo;G.GYXI'nDjX5f+&D$:ab3>c
%d9ND((KiJ,kLP@.`"+Zc<ZQAeA]S=i\'`]+Y%tX]`jtab'/nT8orqTA'Tj3(&Xd7_iD"D6A/\l$C1^X\^3M,%'Yf.]8k8`EG:+'[
%%3>8CLD$#Rf5?>N<[2G?fQZJR=YA)QrZ.gU5LJ^ALcVT!QXB3gWUG/2EK7m?qb0*@8MfXpaAC6IPssReGFMG[CAs/I#LVGrbY"ki
%%ZebtE]Y&<6J51%VX$58[N*kIL9:CqSpH(/]lmn-A5%1cR8mG>G#Y4?k2G$^6mP%-<icZ_p$J]#Rb8'QmAO1e2cE%T0-X<[,`'=G
%qO6bmg'pC;O@Gt"c+s^(Ksd+>GS4S2l](<NFU-#iU8S2<r&2Ak"$4FVr=dJGk:%UVPZu8OF2_%PS3=V6X[YJ94'T\a2o<uCcW%g5
%=c[3:l^;"U?16bq\e'OIH6W`I)a@T.e;qJh?I\1<>!7Q3\(u[BP\f0N?m-'TC"iFA9>,EZ4/gACQNY0/]::$tKWPUeb-T7&'%?#C
%gjW4J)7F6J\*Cr:!n(h'Ko6[T[l2JpC9ABLl6`,F^_t);(VjN,i$$[keT.'90i0E@Kp/pMaTI'+\b4KJV%T!JgSbEPe'e\lntOE6
%m:Q<uX5f`RY8c?8.'G]U3&e/YrJW5r,5Y[<ma@bfW/,f.ek""*nrg0Rh<p-r.k62Lqs#M@lt,lPN<ZY2/+`299M/aVB@L`?S3I.h
%7P&uQEJ#)rd:JM_9q"c8F$KIgCPM%2jN@q6*2Zge2b4]."S+KcN"\O+lS@HD''O3nd%gE%^DliX)mk]BOm$Os7Qk3(>SZSL;H16#
%YKZpFHM`$7A!WSP)0PPiC,SOZZ23df7uLI!XLD!#R'Pel<=.2QDgb<"`njl_o6Ee.JcGOCJp7MiW?7HWK9AH%X]]DIZ9#GfkXsd5
%I0*oO`qT=,p8HcLL&gV25eit<j.q!e4b=NM+!5,WXb`:+V+SDU?(!b#WZ!eA>%jaLmdmaKnkm]a+.1R8NGQ:*X:M@/l3t^H=KC!,
%_`DOT%DP]2D(0S`UZ;()`m(.3N-SgqKZLZdBE"X"bFcOS64,PO_K*;&3]uTc:9AaE/Q+5R,<YsWm&2:*Ud<Mr*XuVg>/S?,e!ARa
%F9TY1nAT^5Ueb3QfHF6dOBdcodof!TY^pjmeWU#smb%g-W\t*^HLAa0#6a#ijJt!p"FjC/`*Ks3'`m83[Zb*(3,\%=/4Ifs89]a)
%2K-$0<N-b)K\\.&YNW"/UbtPVZq/8'/76fXENMrgHIV3]GmPr5](\N??"mo_b3l2@(=0/EHH<i(P?l*lW1nVpDYOt&[Fu@$2ej[c
%]a,p_=c/6W:8MeGUo`?">pVOi`9Grc'_0%_UH1bb#:c,rA*YF[ZgpH"4#a&*Loc)/`P)UcOM+b):q^n7qup9lj.>f%%]eDZFFErd
%C!_3_oWuinh6spNe!FCl]bC^_G+ZL[JkR(/kiPKh:1c]E6BP=<qGdl<$Tk%>TLJ(V.l+\&XCb_c7?5k4j'6u`\O=&;_Yrc]&o-]9
%0W7*boR6u:L.O@:*;Za!1Cp87FDBrl<_g>[.oSuR]Lk&8]",Xs(u_*jGEE#`J&LbP0;rob+@1c&],5!@1&E:L[`^.dU/q)cQAiO_
%fk&gaL=m,H(Md+C&?hNOWXc9;Mp2k`Y&`R0hYd,0C@u2,m.\4ZdNpaioiAVOJ^Z^5j%2/c\/#nH2cSgA`3Q:TH94jUgWq%Y[Yg&:
%n^eMM;HG@!>$"WNk!_pC#ob;n0GTAfX^/)79u_!B[ubWRV*s<X=tgG[A?OU(pE@HI;ELIl#X%II3iQod&"b5S8A!Xu50F.ej)XP^
%.aLAth5ju&AR#IH/Qo<q\6&E[8Bk#a*!j>bmc5Yc>`.8&qEPJVo#aP#R)2#Popqgt@bN8G-YIH3+2J(2<JF$n?)c46Y4mMcMqqbk
%;XAIEj\-l01b:P(\TnH1+uO=[2$9Oa*#;<#^.cI(ac:5HU,jAL\[j8TAc/uebA4N2apkY#CM-]k\>NO\Q'Bg.QnCl$7f@"k(bCO-
%^;,oQXR,AEW9O4a*E(%PpRq@5mgMUaOo]AB1V*2&)U?/B\fB9n-DGp"$sU3p6D-!`e?(\M58_?,)bWujg4SX%Bh#^XaBZ[Ig*2dD
%bgNR/#/bLJVH3-hrA*IQLZb=gHbkX-W)W1a'@TQWCGF8?g03^$5Qg3i@aDT6j/RSn"LXO-/mL<n_S*[&@BqYLImr2mi=Ve[2>W=>
%q<n!2I(eD9NZL/+d;n&/RQV2$`Ijc:e\UV#ik$:uK3gOU\npRuS`K4k3O3FR[B>!B9P.TVMTW?58ukZAX4%N,`Zep+G*YEtH;[pk
%^@*G38HL3Ee%hWY9Odm7`WY"kFtDQfG`FeH[p)sg78VU<cBE4Q_i%C&+9%5-aic7LM<3#S]C%`Jf>>P>;mM@jlT_B?_a`9B*EoEW
%SH-!_f@q\MZd4#Wk9R1d]'Pa_N[hY<o/J5np-7\M+.sFeYa80R_j6HQR;h*nQFh%)dOqB>R*Vj8.NPsLLaBF'H4u=s761a58Lo4f
%2^>T:<,:sf5WN$9egojbNIG=&mMah"(P`;__jJ8`]iHeX2XAnl;#dSn'0c^jq\:-i>J^\W@UGLAZQ(mqmVk1$?)+/7)6cV>HRo"/
%F_sl&00oZKjLrLgo[a\ba;rgCdCp!J\[\nnS\cjbJ4T(2HLpKrCGK5/a@"N2`N#E]la7q1N3M*Hgm9i;^<Lj:DFs0o>4)PQc.:c:
%6;Kc_&@si)IEB'*ASC]p:VBDN9u>a<f4'M/&uuP23Smu%OP1M)E-q6icn>(S6<o,1+e-<c<q/La`0Dmfh`8OdP)$:I4C11a/,.o(
%7N/.J%VJj/U[obR[B"I"]<ZuIHG.Z!]prQljFn<(XqH#nMiQY[UVB^V-@9SKc<oj.lm5#Y3mu*#9Ill<',6CG'+n$LIksf#FF)nB
%NglWl>E1PJ\3!@L0!o$2kJh\a,G%>425C'2n\(NWo,P*ALX/RO7NKguR#+s/IG,.NMQSSFQN#*+/MUcK/s#\Hi/T`=*@K6s#oiJg
%iU_DZ0nEkf7@l5-!RFLlL*I+Iigih'`hGbR'3@pG'93grNQ)QJ/"SW<Nift^FY^833kE)?"caBU%\%MQ4$b*O=^X0[##@!;;c6PR
%R:(5\L-j3:P<c_.""m`A-cYZ.Al2K$9%fX3R!lI$mNTSBea:LOb^sT2f*[Y3-Gms=C^a*U`Sn"Xl/DPl-KutiVS'uO;13In\n()3
%b^Bd]m4L6lE9'#a150<n0bn2&TFeMgc#P&*;N#[BY'FT+X\T;s/*ne1P5R:!pLJ$:&;:A6EqOaaE2sdZ]4;B]UVgVM>Wi=kk7BNi
%=74X`D4#D?771pXHsa8PEqQ+`jZt(:1r[,bZm#u=*@-9n=/pZsj00OES9Co&[BNn-Uo1#rp_(T`Ab#0ZC\o_&])UE$$8:"HV<%'c
%:r4S-+hWQ9P\?3!@_Tnd9q^J1g$S#(q6.`dY%K'lVg$gbh_K+r%<qs"Q,Y]JgFIZC/$1867?9l$8/t6@0=AgKUtOUDqTq6oUZX\4
%eA"7Me%s$$OM]tf+sZSl&#eAp+2HS&88@Uco&G%Q>h&=aq9#dtb:qK8.phV!pObOmPKj_[f'_82X0e7^Tk\nuQb-[l$_i=BQ*I32
%Z-F_uk4mtS-0urkc0*8iHmuP>]Y<gGKrBe`6[7n/fQlt#p?B2%%i<.X:H%PE4*14ok$%G"iM:X0A+e-2R>8uI0\a1:hRm)jG8HS%
%X?GHa?7]o@I^m)@lkI.`'tN_h(QNRgZ<DtNKp*n8]qr]OfuH`]T/9_EX\CfO_^mBWh.am:2VRtjQ`mlaSiY9uEr"D[@Nh4hGVUu(
%<p9\qkS7.e06eSjg4f!&o$5:d-b3u?X-HoHDkG<==*Ha,"m=aSr:e@OG;N"Pf\/<rYd\scE9t8drTSCk?oe,XnkkVD(;;=_4^7lj
%[*ZrrB+%N'G?/A-9#iasj(n<,;.nk_b<%@a=fT,A36n/)QVY;UU(8L+*YaK@lc7H&(D#EfNbHkCjf^%=lh'GXO2?3WrD%ges*cW1
%5BjT6-h0AOF_I0#qoikrV<GXb=[$s<(SBjXgCIofYF^-2?!;^PAp$-!4F[9Qj6l/@Yo'(k;gEQJGjA<>/ZecpCR4F;>:>!W.-2uR
%?Taioc@53B[e:g@!!&(G(,o!*)Fc<mrN_Zg'd$IhT5?7,He$Hgb+:QL3js+SijtL?>7fUCMhR/A>Jcp)0_4)R<b\8?4<MuqMsY.5
%F&/NX`S7M0(d;cl?WpccHM?7<PJG-H>(uWFlL&_3\c-aFl.aXa"aP4a$hsP2G+V$GXrcK>Z@#R=eE\#LofR`t8Bi"RI9YF2`0\*j
%L&(6&K@N&i+.F*:iPAU`Kr`QSf$U,U%Y'mp^A??,HMVMj;qGB*ZLU`a-9oRoU>Ydsm.9Bj:LrG'aYVDn]4XnU9Aa*)jji_CR/5RZ
%]C@RS/&0K&_O'*n`6>PNe;>4uF78/tLQ$+KqC`i];11+[%LV*+$chk.5?>YjiOulbHLj2M^&S(+DJ(uE><(Ims&f-fA`8;saZCRS
%%Q-R;Wm\qQ6S\Hrn%@!6X;8Ob4'XCf=7_?jeb^_pbK#YIiUHY%ceBu#HNX-A5H:3`SZTr%X+a'?9oY\\f9uk.!prJNp$@UGi=?CG
%F6/0MM[/W6EsEZOc6.)hOIO$R]GU+,GN,e!M1]u;ENRO/a3so"q<dF)K!kH#a_!SYqX*N^JS=-7PM(=Hpj.D&qN77PgitP1q7J\(
%FVmo)-Aea^XgQsCL1%T<3nmd7[Q8KBRE\l1%mJ-+pV&iA1[2r9lKe]%lHFn#UZGF^GIB9=Q!Ne)/+LH23X_GUPnF@FM7BV_J:P9/
%B_g_2V<'9EhsBI;O7M-&FkD+FH/$sHT5,ru:QC$bQ6eMK2OA-Fgqe/JQA!NSTTJ(-E-BWV\S@kqg'@)6QtJikEm<8Y,bOeulD*1X
%ibH=.-tf0UIDa#k4jXJ;ipl;+_=dA6DW`UpSud24p'Hd`R/b`^SH%Fu<V)L0gNr;Go_gr<@ro*56"B"JrKUW90^!l,m2_f_Uh3sT
%jONVJW=b\^$HEZa.[k;S</\\[\*m\D&tMMEr,Q2K/tG+O%se2WE9*P'bItGnD"ZD,OP;kl<:R_)k+8l#lfeQ]e#Q=&Yb("'AfBd]
%Ve]`g+mM;[4V!Zh+l/:mh825<XNWg(nZJd8c92=sca:A!RUEKe:r3/i]=?]Y-M^r[lfLX6ngV'JD.D6]%<C?lT"\IT;O)0=8KM\2
%aGZ+M_q]_(_!+#Db)g=:;I+#Q(EVcd9/>eelJe/!W-I02GZPlU^>'C@\`sQ"]`36,gA(.gTWa>$qYGMF'XJ;Xk39RCk>_/4.c8"I
%bb&PcDNnt*]set_SQhjr06d4B5IEDp8d0#%;6XhbM=8X[X-BAd-[GP'/m4Z"n"6)QO7N0Q#&&,ApSpm.@<dBMk*rR!W,o'\:G<i/
%lR?rok"K\LT3fmJ;VjNQml[ErDdLeo:V#=9%$F)r_1<JY!Qi%[oFG$ee"&W"H?Wa$jN?/:DrM7W,s<82crG=^YP0p&(cNs,8^,.`
%`=QJ]L+>"XghP_-@%K1]CZFHm=1[)48ZTY%l=$ic5#7m`?ds?Oh_tUcARE,G<p9^HLZsG0!4\)6[c3UG)i[omV[#8b.h=F$IJ:Hk
%ZIHeaW/s(r1QSg@HEXM4:S7MLk:m:_o0fnfXI(R3f-BK#1i[Rm?uMDu8fs^(`da_`L;jl;UKd<cDC4lM%sar]c-2;'G@P=Gq1=ef
%b:r&qbl6-gd#4;jP(J$4H:X\Y)B+.W,Mo+B(kA5,1._n#B[hs\f?dbj<F'oEN5[4/_,,R-CCt(O`Lc4?Q3S>G1C[/!rV[d=kRE`K
%+J>At2tubUqJ^ZsOnT.r:!ii\hID'M!pCV@-KIHo$5%h9-uD3fpBbo\(]$j6^UN]%$:)mamPdubk76?denCH$V2*G!Gp^QeWR6<&
%NV*%gf'9a3%h#F^*bS9Nk\.en%?e8KA6p"rQJUGGF0]'MH70FjT*WLKg<?UQAEZ1&bm"ahUMZ`XNR$m%<SrmhlsB&*-*=+Y*t'%4
%a5>0&C&hr`FrJ".\?8WK4oG)^c\esp0"lZmP:r.M>@1LASf>[Rr4'/'F-l%H'OK)7mcHDlm+;**L7_K;oh1C^daL5Fcbd]g?+8-I
%-#XXgoG**Mrog-h4^Qh,K6;*Tp$gA";hficVh6)%h=X:1!R6>L7fGq?m'G%,0##eUKCA!3C3t5CdU'u2B05K&)>Vmin7e8>B]Lsg
%`jHC358V2jg,j>+2U5?)"M(Z3.Zfsp5HqfL]?u?k#M%k;1]KR]+N$_4:_c&a._kh%j`@lr$>-Jb"ac%[8A!Xl6uS[kk"E'a3.B];
%T.fY^+u-Y!@p)09b<J3smG0O,/mOlpn+PR]gQ9CDqe*or:$i0'4Fs/VWkum5UDK@q?J@^0\]o?emh$M`rYWH+fDIOm^ph8E;/(0`
%<;jUc5<+j?Vm)U?7*O_rTo%+ib_e)Th`[IpZ,1e<-KtRXQ?4]c;(%u^?;3(*Z*5D7ArPc4ka)_HqXJU:<E=h6\PKj.dG=J^W%r9\
%bupZ>8q-:\WKltLr3lBF(Jh/e;RKt:)f&o8L"JEb_D"Os47JOO2a@5Nf(ek/:6u)!i2uA,p=DpoM:.tQjjKV[JS(,opZ=\'S*A!B
%s75*aZ$t&rH,#MZ^(a@TQ@f2SGBKn<4FQ6@Cqk>5*A(GJ(;I[K>IKQEj`M7*k^9n4gM,_Uk+,9(&l7Ak]$1$t91&:"f3GPi3S/[u
%JEYpPCcQ.F$3uV:CZFNKMhL]gm,HF0WV:aoVI;(qrK<i`#G2M9acC(YQVTj'=Wgf<n?<G+lt665HhJLRJ_ah6IiZ8ccfDDo]a%hK
%-k"Fnf<=b1-ngn0G<S/8l'd*-YjS(E<f1NS*q5$ihj_IIlIY']LT@u;lQkiK?I*^VBrQ+`N3%KCO_6=sIXCO)%\;@f39?f<cAB&;
%bf5':Bf:\i(rjZNkIOi:#TF#6eb\f)C^aP+*%**]6_(f4G!@0OGl8=B:g:"QDcY/-M4dA%h<+=jjjR#K`9qC;>M$hgp=g[]q!dCM
%)>a/i.Z&b@4%heE'Vfmr+*M](;<(&7.#8]MLc8'm'TTMD>`I0E)pO\Vrb:aK9*(fo<YdU1UMLooH"GB*#I?(UI<LccMgY?r@I@NK
%B>9Pa/'TXt]K.S;<*54XF?''3bJ!X1mn;mYbI%+h-Pt!.*qst:0h`'-m*lMeCa6#%]qN`0#t)ncbL[>6ZG.,42sZCFhp1d&)&R+d
%Y[3iJ9k=PP!Fm=@.6L`s3F/3!m<<1Ao_0.@+'4KbXV:R(Z+TSkA?idfFR\3Y^Nm^(k*(;ai84IuiS=`cX,"<t2T"iO]t)/dD5MGr
%s,<6up_2VjQdk,SS$.(?B+lVQ<_hrEbYiL7ki?&7/fa';(8AgZ;&=n8kLJjm&%c[6W^J:M$Z+'OgO*!NPcDQ`hTuDabR>q\#OdJ>
%T/qB2*hLZL7UNpL*CPa^["`@?LcnC<Q[\!!?LC(qahGABG:0H:Y>&BSk6o>@c-7c>XK*H7MfPI_AcFrtbo&7tm\c&j/&`;8gqr4M
%Sc)sjrqFs>f#H9bY%iX7+>#13s1G6<5;'%a,k?pBk6V9\/W^#]:ZbH>hB'GRA#1,9bL,r?]Cs3j1nShrITc+u?d7m5ja=T/F]H/t
%]j?)15@GS%Ka]*Q$6-,')Y(A\Y2*I^I$gt:]a=SrBr3g`GhLMCE;DRr+^Qd;kOoCOIO*0Y1U252CUYAJ][)MZ9+13;P\D!'SS^m-
%K3WhTDkqaR,O[fo+*4iVO+45p>qNJto^_pJZ;&*4*1NPtolD4S]N@s+>!J^Z]786kU6?m'^\9qlqL2_peXdb&D6.A.\OS<uQC^9Y
%]ZRpUhgE"Uo[(:Yb$0tCfAf@Qkf6q03!#^+n#e;+^7<QR\\lt7m^=,%U\//s5'QLZQtPrRg#Gt4+Zau.G'>m.*ITDb-:>\!7Hf2L
%g06%id$k9`Vf$i?%d@$;aj/d,F%Ba+[8pl]/)Knj)"7*4Y&Tj/](G]&]A:N:h`AUA`lB_=J0C*Cqo,T#iEBIW"s'nKgj]-!\T%K)
%AHbi&gK]-HHV9:EfA4m`kXIk5Xcr*sr*XY-+$>8YpPKBn>]V4hp1YkaUrB0*iT0Fi&*05('N^1WdF4WYI%q%4URuE?UGoJ\f[tZE
%Sn.013?midC]/(V5lC<>T!l7gmp@*abh(QZFh[lVfQ_#OQ*38>?OFgY[;<$F)Wp;-_VklG5Y3gaCm`I0ng+JDk-lJB;_L%\=75#O
%/PBrAN6miBS/:O_oJ>TQD&Ug";ms;a*eCnLQF#>,$b<t)G%'Lrq!ctp0N?#Z$$JkK=Kbe`n!<nCS7]1#I,rp>R5YZ6pCp(p6@Vm_
%Y&6J>3\2(*mMoFI%c`$)m%!AddD>E5c:ZB1EP/\?ZagkD>Uop$H*0lZm![C`Ls2?,ek.[p(bM)H^$o`2S(ZZl)t2\.h)XfPInZ.s
%CTanU%`;sD?R\B=^]'YUIJr[N),'emU^dfR<AGBIh(tXWfj=WEgHTEmY8/T3DolWh53Wc18qnkOB-5[qKcPBQeK<<$eG5;lgqgi*
%G?kT'95@?%i6?IjVN3eIc0H.-bgQ6fe\h+:j.6;%Rs@fen1[84T>+7pQOT\b+8GpFjC&"H;!$IW.J3FPokXL@*06A[\_NiT'3bY*
%H)(#'i**mBV4k0oo'Y@UT8^S6K8]"\$H,pT^lJQ%L"b8Z6Bo0*k[<SEr>l*Tg,77'NV_lZpL.tl8[<,KYY<"aR$I>G$!GA\r1MMp
%fRpFeaA!s6cmgEC<+l,T^62d$jM-3%>q2qB?FL:]1Gc($$EPno4]i4rF-ViDkOD1A_>9^Ik`&>R@=CF66lFXGrH#BTCc:[-ZF>+g
%[.O!Eo7Y]WYdh8LXGV''e4-@\2QpiENRTZPPY/oIKi_WB3ih/PasrhV0C5a]=>rTtM:3)fN;M2Z-b'aE,e+e;<I;(ND"Y#qSPRbe
%1g4QUp(kBfm^&I/T#g7g24MO?'BYg?&*ndk[lL)PfD$@;3[nP,+KR_3X4.FFB;O%1/_ps1d.^it^B?k$8_@;DF6Vq)q^YOhdm(G`
%k^$!+M<EsR24e3Vm4J4,Soq;g28PMi9)T=;.b@VFIluR9'UQ_D_W137EFF4Fr^?,KT^1FSJuU>r=?Q8uZoHlMpS2s%m;<ST*&5rE
%l^R`Z[E?\MQa2(g"ke;Xq^f3S;P`c%mg:GfQSTiGp/3+0VlT/H7*K7S:3iX-XiGp+kNU[>`sqG(,hDldk7hVX&)jgB-GB'1DZ6a,
%nGCAKimGef?)#*F<f+B#4&+!5!AscRP'=B\Ykn.Bg'1dSkFY3O%i,iB4*i"9&W]&(\TVreGdA@OA2M%K(#G>&m8`G]Pg4VCF;"mW
%).2i#^+q&Geirp8DfU3tX`*EDjh+=?O8Yk80alJd@(r35V6/%ELJQHih9nE*iL;4nd8rbSfBQWEH!_8G+22t"=a<Wn;h[lPjk&7@
%0Aj,3F-Z]p[I:Z/Yk_C'oq-`p3:oY1X3K,kleFXgG?QlcGmB>W"^u4NII$.8Q"&oPZ8(q;%TSpt-V<7hkI[N[o0-^=cK=/280'/n
%)*Mf.)mJ)EiPKTKq(Pmr*R?"Q/ab$ro6#+c[;a%rnUV08C"12Ndc0CaS&k!=qt"F8F7l!gcgB8<C\Ln;Y5(0F.rGcF1;;V/&_]a'
%;ZA.k1(nBO2`e3PhR6.SS)^+his<lWQ7/l<pj4Z@nX6:N3ea?ZR=dRWhRi?p#Nc<?#'1lLZQhptdD89E0)Iurlt/gVdkr69l/"sQ
%^jmprH*pVq-=QQkj]0(PX(n,4oA+G9EAbDdoQNLUH"7p;c>CmGJ,Y"t3m?RmVrcFcY:b<Mr.J\SHB+Zuefh=`RCt7Yq\/o8%VJkO
%B*0p%oA>Bf)kEfI0-7h*^ZU)g&+0(_T.TPdbPc'Vc_gs+Chq0L[^f"A5=/Q55k95=4X1qpoGa]ug\'uo]A;8^_'?%<(Fl#'Vq$4.
%'apq/s%'e*Mbd"2f/!d*2Fm]=JrGe?L>P7_EDa;iKGPJGVCis[i);BKnL1_Dj/bb&kFu#k]NHmu(,>t$&#l8BX`[/dhfKCtA,:t*
%PoIJEo)2pFr2\<H^ODI0J+/UbrSl#m0<Q!aQ6r[gF-:ii#pCRVL#lkt2fLQo,07@<->ZftDi""`R[<\Qf?".]QA0H9F1.W^4^2KT
%J,Cg9ZG(@Y0?;Alb47?>b^*1>R5rm@ie;lM!2-mPNH2>I[s`.*AYg(h;d#qZOn"&Teb,oWc]Si\:_:.D??71ETLXY#<d<NYS4AQT
%94e5al[+0"(KjO*>!#AfI6ju4U'PUL,qPLej4V#j$%/c8AgLlP9;Ef35\5R52fi6Ef?J[C@ertd2%qf1hWZu^bH)@:2O0)7i$hqE
%pp=.:-p506O"ff3^lIjph%@L+TE#YuW$fH\Y\g!uEVr)J;u0Y0Ligp`n4lMN.m[ao"?_:Y&h"'"N@^O-$F7+B(b)g[=V%^TRr_lK
%RR/KM.]L>u=UQ&[P'ZV6]p+QJc$0<U9>*n`LZP6K/W1eUbt2),TC=7^T="ih&8%_L`rHGMF@e$c%Eu=UUg-5Lcq4_n(c=GTj'Q`s
%>=A#<<0`ksP^39]aTDM/c&*Wn@GtLEJ^d>kU][&4HBf8LNW=Sq-6QtaKdF^-@=9dBcr(J3b]s4-fnQ/:a3i(<$fuu_/EmG;<R:4u
%'Ef3EWpi&=RrM$u&@2GuZnSX7R1^NIdX5jQY<;G4b[:PiY5o*t`^E;W%Q$16;H+`+ju\T6N!iGWN(Q[B_5O1&Z89[+!ubEQRV7N/
%?(`^I:d@G.pe9-l:mtSj&h\Jm![]$,k%pc:f1%QOL9\P0KRX6e&\enR"(l9+.Si!fe.B"Ud-MKK"*">_=+Zh`0X,N7.!)O8Jdo45
%U"ffgbpfA^T;D]i6,(Th1bB]&i3"XrAi/cbn58X"=J]G0a5c#>cS1J#R.:%)r2+1efNp%hM^5k]ii_R'\sU,S(*es_Z@t\++[KMh
%,VP)uO<A(W$ttK`[CGlM<-*ju+Wdmp?JtY7d'XlGVEDL'(AROWh?#/oI3N(1,!*\I<9KK?\jP[-[AAOuorrsE2hY-:CmH*KhNFog
%91'p1.=19P!0FoB4V\Ju&s4O+6.uN:a!@+4Yd@Yj47YKe@($\6i5Pm581Y8@Q?7i=FljDBA%@oJ%-$l5f2$os+AcA%Kb.56_TZJo
%laU*<K9R+(D;VahEGS'W5`)Nf,sWfj`>n(T>:F/sO&3WtdWMcN[KC6:91U::h&Y,9b"baTJCbgBL&tSiHJ&Bd17Did@6lVBa"T+m
%L%bb'c<T,Sdr[-3(ud*8LgVZ*RTHc>KZGTWR/)FA?oR2pm"?LhDE3#OCn"MUa*Y+/?G?K7D-9LY#B,Bgo4Snjd-=CtDCD2r=o4>t
%WR[-H6LoXp9jV3EhJo578cK,RFV-n$$nT=k0>'erJj^i+lWR1B0!-FV+.#]^^]pQsf(4;@)"En+,kt1K5_7;9.&f$j8=PhtbR"oC
%(6gM!,((eFGUEc!NtNm-L+?G"`V>*YAVRYtpb.8KI%0n?cM!pfI5Va$8*Z[oeD]@k&rN'R9.1?f:!gb@ggdT3+YQ^5,O^O;:)mgM
%12^c.[P=`eb7"jEAm=l9+(t^%8ae>b&6&H\M/#K@1Q%U'Lon(q7(Oi*-$;<pGmS[]1B\#+iTYM2Rg#!(er%%oDXrG(i(@7gnl-AM
%W8Mk;b)V*W#-=g2aZaA=pkHFkHF1btUIm_c;cjXsa<>/7?,<BT=^fOs=:YcH(Q+1&Ojp&cgY+c4nFh,DVD30E6#Sd;"JPof7f/-`
%2^%mP-R:)J"TaQN)UcM"OO8s$@gir"OUh#O(WfqS11Z9(+qZAjaT/.=fSVd/823h",R$`_$=<.NkaU4jjK=g0/kcI!B>Y_HnT&6K
%n];\gF['b/f^Xr#!n7$K3T#QhnsS`RTU!/cQ(]/4o,^"F*s;mEU*0;gp;dsAnN(Mpf[W.cF[QEE'I?<tLb#d)a]d.D'>PCSZ#3`E
%P1@`r&Aguk>,K_Y#kauLfp]1>Uqk+RaNGpMFgPE`3Q,ffc!7A+`&:5>c%qL0_Dj-;;@n=9/=M):7gi)k*Oli/T[b@Ui04/i]IA][
%#O(A`AJc#CbI/.:m/&U_,$Pj!,+GV)_'(g-;dfs*prSin11[K^*ai'r`_:pdLrAC$nBZL*@p2qTHZ1)8Jr!h/fHu=:$L'h"NLgkq
%5LjoZo^$@e`F]V:k3h5/lp)+Qgt--m`$RMH9uF^i&&kq>mF6\"'a1F8s3fs#V4*Qq:(Itlef:[n;ND,gcjUW,-3HtYk"<>*GdG#_
%q83PQ.;98[9"*jmN&Z@%)dY*/p7P;&ri"$:L5LBCBIY5/0uspZCJlLjFQ#?5&%$1k6.`F]VH0jQ#tSS3'G4^cf.k(o@qup[-#LHS
%M.8POMKc<>`"%CPJdC3+[:)<1,dm1c^U7hpJ?,"Sp#Nu)F3l,fKqY1lGGPHT[%_U5Ek7,7hPC6TOb;!%eHBgDSuqfNn17mdP!P8Q
%bm*Tn%$Y8>Tcs!&Te\<H?"Q@-83E&VkL"L[MoFI]e=mC:RoYH/5SU')b_<ifOS9VU2LGtT:8PodU*RGg\AVQ]b;5T8BNu62Cna3r
%dV='SU_)Uo!(=f-8"bh"]Dt;O&FX&mOOGK8,e>>b-*tbEKL,S+C10[W@;VrD-kZYV0L:kfA;jGG_RT$l3of"An?=&+BmDi9Xp?T^
%^<J!c"gpt\OJqhT@Z^K.oRnt:R.)fN8FTGI)mKMM;/Uo%!lZ2c&VNrU#:^-IOIGAQZC2r,8T[Mj3.m<k^kS)BF(t'6b@V-u-(*tR
%-nM!&7Ut.kKBF52'm2cr!\+`C\S(4G;?m\9-oTQinHTZ'mBVZuDhmC2#a6&E"hpg1#_ajPR"Q`B%lU]GAKaeoT2#Ba(5&Rt_se(6
%/t<tJ9!i>C[4K.qAANT`dE&XsXH@oZfUMOfAYET@j?<ieUkqb.7Hc,7)l@g$/EnoiP+TRj"F?^*11Br1.07f)1B&^7MN_J;7VE7B
%Q6[?c7>0pCGHucJLUk?g#cJ;,(&>?&`g?1O*-eHGQ^@n74TbKo6%F](E%c`!j)We/&41.Hf\.C1g7Mp-KNSVt0No0Nl#6[Q3CsTn
%j=,W;6&iLFh@\@J!u(l1,)-FUO&7K;i@0_&lP_U&="AdK,+`RCZTckbbrCMh64Pu<$HT\rFK>ttn1qJYHr!B<ZDLlK:&]_'_/5R5
%",K`ir0fM;SA6B9dV=(/BFZ+8.`7,Wf+LhQ#T,%IoHaQ$R#]DuLa4^UFde<ql/Y2#pmQ4HS.Iol*3GdRRaM8//5Mbc97RSN@*RuB
%<WJOTC\^fR3j(`VWGgFO[($<>_F7qu_M^k2MZ2%J;?g<T&H-oEM0j%_dXmVkm\5kB`X;InaQ5subAt\A9h&N"]G20'8nBUm)3>X9
%N/p$HB6`%1%Yg'i'cQ<jl\4boX@8:,Y_`qVV%9^/j-/.=SCjM-F<fER8e[]u5Zn.j\rn>4K`[mk&1D*FQFg&Adde+"38i0j[)Q&d
%lkr-P[[iDFe;XS]8A[:4*D=Pj&%'_RNXQl<^;D!K$u?rZ6^dFdjN/#M3sER$*kRG-i:9u\PtN`k5aEIL+S=?IAHrsY)+*#TAA`m>
%HBE.M:`p_u*G:YQG"DZE3FM"O6J:</[=doXpYnG&Bca.W^t+V`_$koVY#]Y?]3HE!iXH*\W"m6+L="q")3Hu'(h,KGYZ,.cZ>+!W
%TPcmLa;>%k*,T0[LsRB*LkTA$"CqLN6Z=RsO]kPm,SG,]i!#?A,DashAlDCrm#_iO$p,:^P.94Y[fq.jZ*9>((+9Z_8dH4%-jjcp
%)m#,,NmSFON[:l\2MGG07UZf.5mDQnNYSTad_8llZ+ibMa73Q)_?(l/6i\6/D_&=/pR85**7o0MM'*RJ_S@tE9S*6@,t1l^6-dQc
%4f(eod<4MJs$g"]?tU>n#*reb6cP_)[@e/b[6UCOS1ophBjiO3P),\53Ypf\I_=('Zj.'l\iM`ABX[RLMIU+q-:S39CRa6?Tu;!D
%ZB@]*0jBuE&hQKo3DO3q=2rkSYS8:A_V:FgW];[:lX=3N@gE6q_eh4r/a<D#B0*t?6c&!mXlhZi^P$4#GJo:U"-0rPL``t9YtR,Q
%_H1]aalF[Wb$-rf16TGh7K<KhH:*\pKdLCXfn**Ug[LID75;iE0R*1"Q0&k`r9,!1FJ5W:1TZYN6/GaBf]R5dFceSKGRatR&>P%K
%:EF!!Xql=M"h`gUpu!EYV7`CPd\Iga-Iduf)fNn3W<Rkc-%\)$Lrn;\j\77c3Kb_eR@#+0J-^`:@(HAoX?7/Hn6n(V2PW(49N93E
%/CBH;nkL&0RFD?Z/l-BtOaWl]A8iBE9?<JS;=OWp)]c?F=K"ZSY\uj6JVtO&7.48H+olN$d<$4UJI_]&36.L?X<4Ym--aFAa%t*j
%$/Pog2'),?;qQpQ;4rR-LntcI%.MYbC,S7gC-;J9D!bcArr>>ULjS":+\`1\"GSbSJ2[QA,P1Pskd_h?N'5!0;R]%5'K/G^\qSLs
%9ObYm5e^4'"=UY;a?X"Or(G<^oIZRNhQF^J/mMEMAqC$FJ<&*@;2LYXauijE%UHT;blEK[QRmXf,]$sBR53fTBj%LHJ4!*<WqX4G
%;b<B(."ZXf!aWd"!=lFA&q^!+Ku-<?"_3La$@!pVaD>id548pc9#m3&6r$#%<1nb`pdE8Hblp-L.A\U/PqWYLnE:cFn6Q,R1[Gr?
%VCXucLoiuER>:pDD"bUpK_eR(38,(@#q67>#<4#^(_Hs-oF0`5%Yj6M]nA_A28)>^g#30W8"(>eOBIH,'>-cf/^^e*YcnbjGRM\O
%[(rN@CZ8Mk7aR^Lg?@q!gb!-8a)<eY.#sGdL4Y'g+X[V*)@:(rQX'_8SKp)"2:<SX"b;Tn1/$8;,md:Y\e3RV8<d4[bA5^0(IA]&
%o#'he&HEk'5st5#STBJdRiQ<$0S+$3P2o9[;\p;*f<]%_P%T_Am`.V8W)mG_>NU+?YW&U":P0s!FS;IKnI\t0)FlRV="Wc2qFmb!
%rr#llXBT\&c.g#;#@:NbSHQ5l4I-$(&op%g=QE"hI4#DLe_#*Z(R679*!G7@O<,+47[3*5*&6fFOg9L)6qu>"<T<!n`k3YMDVL)m
%&ejkEc1mV>G(IN%]+c%tn9h\tJ>"&Q+25B0dhP^c?q_:.LA,QF-XU!.Rf`;qQ$lM$GDNAZ`pKC"JBSe]kE*JiS$32k*@V(3QN[lI
%OgJ6O^"luq!_h=.m$9A)5gZ/G?`8V`lAh0p<'Di9-RmF?hHFo#6*DOg@':!FZ8l]X<LT>bP;rjf1Z\VP)BU/%TH8M@%^J#c2,T+=
%.)\E!fNtg$LFJ;fbEN\YMp+/;C+r^O-go+bH6rN71h?f^@l#%"k8@:^\TT&s>bI5CqEjhsHE_?IIV&Si@NQaq5QFi8V(>Er%X^cZ
%H+9rHH_cB/T>R^d+rdDq3P%X<ShW3fV&!NH)Fit3=b&(=a6To7lbXK0M*_@Fqfj:B4lPI<W1ei/B+GJ.XPT@74npC/3e^!n@lj5h
%#Op*d2OqSb"$%g9&qtmC+`p.:&^=Qd?5UIdhE'89YY_+C;fR.qC"Bl*1l6%Y^;@F^['tYCjqeiQ;Jd!=F1;ehHhFCo;3P_R+A]"A
%W41ZD()*3$e1:(^65=X?M()t"8$I?8KI.F,VeL+1MIdZ^miiTdP#OENd187M,QBm&_*]DCV!^OZ^0)hDZJ1_4-@;u']Jk=3Bp-+5
%0U*,8\p#MU-34P1Wh*Rj1b2[6Z^8!5lp)jh)*<io.E([]U&[`LZC@]TB`<'pRL0[YHp9OGNQ]BF`[/gM\]'8,(J_J1&4un:0W-)>
%Cad*X+uCI`7n4I3iqG(Y]9^VpI4@S9*IED>a8&:-,H@hDe&^L2!qB,))2Nb;/A$aBYdNKUF;t[66O9mJE'bO&UBs(SB]NQVN=`'\
%3.`ol@0B4fMsX-"670o'H1qP,@7q+FLWhUr1Ve6!ZA4R/kT_[E9G91hD7u2e4fXQg=unS*C)KJ#8Rr.4pdTcD6=1q]eD_`^"N_o-
%_@<kGJB+pkDMZO=8,L.(''RD:ej2-'jU+D;;+IlEK^8lAD/Y9t'Gm"o]+CPj<?]W*3#R?b\,hhkfpTC2gFSJ9ah_!DYS3W#U*1TF
%l0'U03!+rR70"?r-k6OqPdmmE$(28sH@UZ6()oh9R=Gsl,mMiZr8OdGqg(KHOZKY$6H,q]%abtg3\^ZA=\VO^7#,LQ!dg)$XDjHO
%CCOgkd^>34l_0c#""]jRCr@P`&!F7WV*]"MMhsi@U*3F)23B"lX`o/h:$@\W8&!;2H3f&dj@:h%Nm=lhpaf%i,!h'H!$"T6fRpO"
%OB?-6=rdH++jF*lS@#!EO\GAV`%sO6\4/pjE?$$`i:%E>/:t4<GUHcPo2l8_?t3%V:^nR6Kf4,%:bBHu(J5D)WnZGQK]t,O3ik,j
%OH">e"JcS6ORQ8Smj=-U#[JO&->ba2;@@g'3:OD^KG$T__GBDM+;mNfUY'#HJnW&GFZ^!=B":ShY`T!VQS=L^P?B$]Ium"o,/b[2
%K_QW^[f3cL(g.!iAC;\q*pgaXk_e'L$:*]De)[#k+,P)m+]Ru7&,KZc*Q=,1:CRu_=,7Y+[mNAF`;'[3d0s+]q&EN?dWN&3Jj]&d
%MN9G2=^<G<P#L8B?PJk?9BcJ2fh=c,^]\X4^k^KQ).Wo^`'mQ:8iVcf&nu.]!/5u@C&'%qY(j_H7jTGnMPV[2:cTiJdb>1h/j%@Q
%p;%eTMbuhI"Khq_\su+*rT!!mCpjDEj.3VR@mZUP#(##J^g7l0'!C*jE2?l<+^C5bC/-qm.kZ0_]O1-\/?U"j?=FAh_hX0pX%4=?
%n1Di)*sj=?@jP\PXE04"I3?D/"W-@f3*Q@X7V/5OKVacQ6.VIlhj/ct=]<&PU=8,8";e'93ba,`2e$FH_OTjA/O\&a%Js?`(o0E?
%3$1W*hO\MiU;Y'_dK+)W+38p5p\W=<SgH=G*<W09gX%i1X2S\O%uCgI,gtgl6S[4-)-DgSY1s4^Xf?"LE2]4(4]q(qWi^L)!X)dp
%gq<$r=[Z/[GX*F?/NU9F8f@k234bDgGeu4=S=F+-dg0kf]:<M.Q$AofkZZ-<9aN0kqX@Ql4dlKo3)!P.d;3f[XQ#MRYbf-=dM"Z!
%`V633C1M_sH7&lOPX$D+defA!1(G+^.b1L[(,BEZ/sVr.JmD*B(+@A2FZ(p*\8LLSYlWRK:hZ(IM.]=n$#X2OS7c6qoEldeTBGHX
%VBp0+p.PWRBSCjZgLAof0Z<4l"L;r#=-3#f+fEEC4\aB:p6Og/A7LB$f5m3P1j5!e"<%`6WtSZAcSOAAA/4:kGd4Wp#+)C"9W5YJ
%PjEF&#e!nfcU_9kEiqV#i>G4b1Osl8>/<Oa&#S;&QI*[d+Pd2?Mu%6*lMuuW.)O&+^`5Wl%7_7r$&+9.Zlq2I47#_sH35Q,7)an#
%JgBCS;^$=$:&<3-Iem%nljq56b:]CqiVaWloOQ+^H?*E\PMLg%'Ct&5DIJ1<#>q^5jIIdf'a8Q,I%@"OR1jD;0sMq%c\E"M!N87s
%#',eRDTmRaiDVD^6'YUl&0`FhNS<%&dgN'q9!iOhK5Y2D/,Dg&L"*nY3aDb&kS4nMche-Fd>9Jh$c+)PIc<&Lo9LJ=J[!Z+hU(#I
%8DmFPCFTXVfH>6OUr/D%GqU&7P44tHELK@mrc;X#bT7@/cs!m+neGAfS=p/,!?*rI@WG9rbT%2K&5HX"5fk.7#el_=j!ZK<Ch?2(
%e,*C95_N8,R(/ID`/'P,G!t!8OF/Yg`8EU+R+[M^<^<AL[G8'p\]fb836<+bQ8VR9G$^7S$^<`Cp)V=XQRu_R1O/)MB#*T[>bXAg
%$Sj/V9,u67j`e\0%(%Q1K3tpn7qT*Uq1q3B(*`Stct_9X/3B/%]Pe=.iohWnaO\cKgoj[hE#iiIL=0[ETZp\L#C>'sK3Whh_hF!R
%L]c8inlp(lJJaU8JXIIfN,sTba]PdCG5d.oJN<\E?5@XU8ZEEm@Z1nq'[mpp]eEG00?#g517kU*UgP?r]J!?/l&>Od_6X^BgbCIu
%iDh-;>2Wtr,]CmO\OY=BQh+gl:1\FU+TY;X>G"?j&/cG*c-7jEmj^C[C(WEpL-cL<pkjj/C;`[`NW;.#gOXFg3$aJG"Z?CGD7iRs
%!rI*m%\UXPjC:^6$+@*#$i/#%6fBC;d(aDNq:lG^Z>8]8D,)+f0a8n:%a6^<<j$$!Z&GqF$eV\c%8C#r1Q(cRfU1WBMDE3u?&2UI
%87bOPEK[E.^;p<(LC)o5E--p1kZq_EZFNY"eYtL?hl:/=/iajS$!bp+-ABQC6l*D4.E'8p*gYiX-:n]2=us9b#W?)@@7a5[`?'qr
%D%'Y'&"\`>RK+V4R,!qnlPPo*%M#-1ApY'O![S71m<e]7<T=Id$[lT34>2a!P`IU.$mME";L=[FTuQ)JRD=T:EZE)Pi1nje`%;ZA
%Nb:B=Nq+'8dh%q!`ab5Y6<QS+/FN/`,OLccfasZ0;R)pO*,hZL?k=(-g+:_Y!>38(hdmt8DpBT\b4f@g-$q/ha3@_XZ\r=/1m;bk
%A-U.&]h*>1q68af+\AJe,IW8Q"(ehi0qMcohW;[<_BO4\@/]8@mn"uP;M0[FUkTi0!,q^+Vb^57[<(>=UFpC/'hc&uaNB/L.[6V\
%*0,RI6.e&&X.39oEUjX7RLlL[c]^9LD)Lm;R":>1_'a(b[E(\!E0?m.@(+`@a^gY*^<W7U[/f1Ei&G3mV/>u2-%*'Aab@1L"e9Uj
%&e_HeglBHXZ:f&@FmX3UUof!\!@c-)_7&bN$+.meSO,e.L\-ZK$LfU-4_fX<i%)F*3Od'W,TKNa%]@5P?6,&N8N8sN(f[cQAIR=`
%'nX)"95!c-h*U+9bsIF6[Bl"4.eMsK"cl=1NkQQbUV<<+:a7_<?!S;__iom_o#W>75WB1mo+Z8Pjr^3sZa?-8,8str2"8_7m/ZCJ
%dcRlCNcr'CB\=@?dua&'0G>iK/K^Ct[[8Q^$^R]t]!W^B\4"BXM$,Lf2rnL^Xd%Lh7o(+RfD,!_JA.="Hr/?%-l$3eg8Y[.U9;e7
%pW8AG+N"4&Rj[=XLlc$kUkSZV)B#4c&LkoC6*MVq85*sV>'q!1S!dH-*#n&O\;&qZ-P0b`4'B7#KK7%o+2i-[7Mcb/G;*_9[t:"*
%)"OS-f\.\4;rXH!D@t844(*bJ[b+i5;i>-phT00c>SX&JEfeJ`I[7P6_o<%GX="bHGifbJA]H?9EE]WcaZsDs?Jbh$B>h/Rn8VKj
%mgaoIie@_F,FBpB#`kD5XJF]0+>&WDKK6MV,ILLKKqZlQLo1]gc=;;>/t`0\D&N\[+nY+g#W[9F8J"Mp#9c$lZO27/p-@8WFl4u@
%-Ci!;c!#`X!Z;R?aDc?_&`b'TkN^k<[LaEBWLt(7$9=`G\'#SffPmZ,*Je[-`-JZkm]"NQ8g:6rcdH2c=RtlRTH,ju.ud:C_4a+!
%Y&K%/"h%1Q'l;-)%tq9gOgSi16^`jXk6@Xg]*#.dUsO*&_1i.\!;\el1<3+>c,Q=mL\&l^k#n!3OLdUcM5*JMB%tV^h@\C7.2EkU
%5m>q5[9VS;k!N^Q=)^A<!(TbK,NA6hL_$7(r4pd%=j3@/>tj&dMuui8mQsI%=)74(\R%NC*uTX+mbj2qhu_c:!(W-):P89/g6ghF
%.n=ij$E*;gi&E&9-]u>"*Lr$Ef"<)lblulTU0Qa91,m"jF#=_\ge.VSEg>&h*&()&2:2apaGa,1^E7[;kVG'J.TT5/H3YP.C.n"-
%0NhQ@bb'N(D7&oZ78J;L%(_b-cmSf4heY<h&p!bHMV5habfPlbbkWn^ZUd;iDO,2aVZP^b$hVi!WYS7M%s/L1#^BAiajT?d,_H",
%07i;$k&S&!$1AI@Ns=jeD!>qI)J:N_[f*![\@!9O1eY&=BF![=VPg8We2@dH:dZDC`oLob>d03)9H#Zo/7j"uE&\eXpGm48Bc+]X
%i][Wt])r<kZie#<2YO8QYuEFo;qO;*ZjYEe8Pih[=RoK%I!?H_#\,%Z$M`0[+"hN*BaJ"Q*2U\>'hWjTkRu'sV&rI+REJM1,X-eh
%"IjV6L<E&n6l*@T%NuQE07(2_+^e4k`pUG#pah=2#8?4bG\gn9a#ZcKl@JWD\HsgAFt[i4'(7fiLbnRd0Bb/F#.i1YIIJ-VjL.A?
%3KC5&Du$&5VDmUN]9i:ZM_U`ik"JeE'V`_]<K>T';[M6u_>NA`;id6-7Q_7,C2;,GVg2Ftfq(*>/8X[)JYa+F)^.<i@l)Bm'Lk8b
%"KcQO03&sY$AZ`3o`g!3g.!4"W1><Mm>Z0E'U6@Cc(Ya/-m)Y<.'_#/@:,Dk&.7*Y_3l_(H*FUWhU0+J>TS[Og!4cb=[>^"k+2/>
%kVDkcYne=<mTu"Xf+l#c\X^[G"1tVM3%@CONm/J?R]LIu4G<Ae8DVJh+E[Y0cVq''a%-!JFlHr@Wc@Spd+Y,_ZqEo\M8P(:5eb77
%cJ!eAB6.f`dcnBb2g"go,RQ,/bM`Ql3-'\C'J=CXbJ[OJcgKM@Squc//.<Vb0Uo,O`SR>accBPt_70&^HHH&q`\)9_mU,7p!Sg,(
%EhgS'f-hbVk*Qb6:,S=bX"X[ffdag]/l%o<HT&2_bhTum[O?58:DMh77$iIM-dXfZ=WC`h=GugYE()D3D``0\];NdsZGd-p#YTH/
%8c7X97(@iaUrRLJF/#Is+58=4-8fjO\?MfrY1ssPRF]U@3%n$52&2h<?'RrsmM.%'m1l)>B(!l$fm'%0Hlc*3hBqZG5*8s':mo%3
%,*Ca;/*uCWo9M(gKPopm'#It01M<N&-Ui,?,aALPju0+spPR8TeJ+GtB:[kUS6c8<+"VE#1X@Yuehu!h:mj`75radTREe^iKSo+\
%=!@B%T4`2s+VV:\#Zi2Uc5"J=oNn[Jp>FrZ,frqPXCO)g<l/cc@jb.7lQ#6iVWT=p>Y^+YO>uFRG>3YiS5e@'Uor`'@Xt,6gTA&0
%@0^!Q+A1N!PW8#+9c!FsQ_OhHI9C8.?!+D9DY]V8)RS-.df%6[(3Q)VbjlZ$W3DAgj6=*XSD^OR>R^kYj'tm8b0938UBSiB4[["D
%s3,eRJ`qB/As,r,geHem$TMsnQY#4F%DIu.Yru>&@RH>`I$biXm)_/o,nAXKMu^mToT=57FO/MfY#n%lRZ5Mk*3SFFYAaY^,Xq;^
%G'q/5l?9B;Q#4eQ#8kh9fiR;O4%UaNH3s4]^'0&7:i^7(jY/mq1&shK;osT=%j_^GIr^)LB-$AYI[60GI#bK-)4U4RPto4@HD;,.
%]>1>p4C<H3BW)Hcl1bs"p1V(P%UsNu7^I(K:gXZdqf]=V-IY?>dXs%q85E&6G#O(fl,_VfE>OMWR4E7'giteK?Y"op.@NA2-28BR
%1*8Y]ZXe^K_?<@NUUQHg0JFOR&tXVk;OL!2,"P<-)E:Q@_]ZfnJT`M[R+Qe1(X,D9ZIju=l?7RD*>afBQX$2:hD6;'$Lr@^JJYcE
%D7^b,6MQ0q2qs'Y_Y9`.8EI+!6U%KIo_gDpMQf++<#UYrGp_]G<6N4<07'5+eg+DInkj"J^YLHm:,4X$I'-T<<;5\F&9[lRG91d-
%MsVbY%8Xot6Gt$\M-OWS2)9B(P`_s0.6+OAX7ej'<rWbDeL3+eQp1cCg\nc<EB/]G3/Lb7c.9!;Ql@0`SB/+sFC#22QfspE:rq4N
%5/If\i0tWjIDLu>>V=r6&OYOr1"^;.W!D1cKi<PiWK0-4[$0ljJGDZ2*#H$T`XLlrl?iYe,Um,^9N#4ZZ>e_E10eO/f@G.f'H.?&
%oSp*]n;u#5H9%SH,m##T=F%U]$G2k3%[2M74O-uZUd-trNBdSa%Ipu0_N6CTc%VGF%NJcqBRm/jcok`n_1>Mi%OS!;^A>hJs4"a(
%c6ZV:SbXa!.=_IL6`4k&O9;<ei5A-c#:KjA&.$?'J7&iOmE<5Op:8fChdh$;,9g,55gX^[qp"K[Bm-iV=s>bf'?tZ&j?@\20CD?i
%XEm+7Uu":?qgZt]qY-L^Q!Q28S>,EhGs7LbZGHEiCP)A^_G[Q+'`Wk$7GS$&%7N%Q3q688i)4`W?j<iIh'+]HMAub^9op4)V/',@
%mE/6]pj,?)lS:BfV=M@Y=($NnioNF+IN-jrZ&CqA?FS3eRbZ6S8GDuM96]_FO`aRO=BlecJn0n;9"q<_2un%@j=L)?FgidQ$[Uc@
%!WuL#16t=]:6j6_@D-[b?s]jhI\RLM>l1'EjQnYf054.H1Yc%hBSI.Y`"b&7,dNF/i#Su[mG[[^gnJ1[$.&?&iH/WmXYB5Ml9l,X
%3^HY84,\3F7C3DGbU2aYJH;c.Sgo`h9_'l(W9VpE)>XOKrCVWT2&BdnAUt.54WMVi]OPmd8guidDYhnp6k\aV20'NB=6De&QY$eN
%<j?*\='@YH(bAloPG7=rJ#WbIV?iIOlak8u\DW<:?1]b3FNS&+_EtD'\7[:"X.?HHo_C5%pfU[u=5h4-bC++&eJ8$1G_F3sfD^oQ
%,[gR%;A,?)Rt:WHUSobsr'4k@##(f.L5@X)rbQ*RQHLYBfBmWPU&rT/rrcHMqG%+XYY3PPAJnsg`>K#/.+VF:3G?l7eLhuOU3\RS
%(pGPkE")W#)t#+Ff4j"\Q>>TNeo\04?kH0BQI=PmcX4:"s3umsi%ibjc>((^mU(h\CVJK+?MCl(jb(88FW-K#IGRbcpClhEH1uc6
%^72qle(h0tO&j0aMYV'o]jH6WQfppi),cl;hI\JC<XRD,8t&[K^`;K`'O,B0r"W]X!0G>:@KBJFE%NQ1WV]KQId24#WI'T#Dn@FW
%I]cS%88d*!e7Q)r8[SQ4]Q/``RIXZp?^(b>kq0XO8%u,(jo*'k,M2MDPJjKL/1@AFc2diH_K_7jYX+!86.K'AO6K&EU/m(fRjg9r
%n;lKP!lI]@"i"V'3CUaeq&6Dq%N:lt4(]G"H`DTq()q-8+]2-t"2^>FQ9d-qUWo&$&L:5^;Tu&G,GA'oPGbYXi6(?Xo2N:c`CLTa
%iQ/Fk*Wn<f.PdCM8nQO`,gk^(<]@8IJ4lc?'[.36%@5Me+We>r5S\:u2"iD1QVOT=5\1(MAS_TmD4?Phe7jlt>X=Q1B"5qWkK<'r
%Ml%88[\3?D!_"sIQ^iSL#EM`AFa1#[+jGV^g+IlXd0,Q(nU:H%Ii\Xa>@^E12WChoLtf)j\lPa`G*K*]a2+?NE2iRU01ej;/oPF=
%^;kBYfkgjihQNqa&+R]kCS2fG=s:M^HLi!sWlXVVL^K%7/3-d1-rTQ85\#N4)rfFl\4iJ]CdDS4n3OH8W2C*Y*7/Bf?LSIHhd(g9
%*o;6=Nup9GdEL423G5Sg4A:2T1`WE7C=-cF4@#E^;adrlbplG:DX,-P\(df3\:`^1?LAeu9s1o=#M/NM9OPZa!Xd94=_^3#>GrFt
%%.=qI)F5R^8p%6b'I5UfMqge\$6n3DMbnmc^_;UA]FHVn;&^teo57t8i"#op/o&D!Dgn44:T["?r./YqeXVU.4R=p9Rp(-Tc)Hi6
%@>@i@(Qr+1=YMn:+t]&0p$Vt>RH'pM_c,_OW&Ke9A]B1`V6EqhY_lrG,,RI(Vs7H_[dW%H%1`u0Qat[u+[^:3Yk7l^7F/<Z[h=iD
%9BucXE^:BRgs2`JhRb&BmVY@kSL3!,3m.Z(\b>e69i^`bF]q>A$K--sNs+/oWJh$gLj:E"(8$jiKmS2mq^$]?*rK=j,[No9hr*9.
%WZbfa^-JL,Y60qbT`=k-$<=d`oq&QT%Gs>!\sUa7^V[fJ24&+DoUG)GZa^mJ%.sI%Vs*`^j"]bES`b=slLF@#<9$qA?]p)Q0J/[G
%R_E&;Xp]YZf_*4beo^#])*I4<pBNZX)BNt#>Nkl5m8)%Pc-u1Y^AH8l_:eeb48KSs:YeK"/FgUUrhIM$M]RR)rTD@\l\m`[Gi^lV
%qR$HXlS;RepMs^X\@:A<M98jLflkMp2p:Rl+3$f2;1EAhHgU<Jc[.[77G-naf81U#TWWR)';)0!D4eg(O!luGXQMT2?=22Jf"8E+
%eXuW;;e5.%EoPRC-ms$gF([_[K_IEQQ4k-n[eIu6p7jqhji"(]jTQaG-n":u.?Jeu_#(`+-L/F5gj\sAX#!]3^#oX^`+i33)nc]5
%!@B,e)rD3m/NJj/H#p;S3H&fTi4Qm(jnq>&Do`3Pmcr)C6TQ["[k'@@hWF*AXjB;.r5rnUl"geeX,jCW^Ap[th4G/:NSN[pptTMF
%rq;eaN&Ous"NnC+b#DeN??gEG2M1K>b+"m^aa%q`#3h-HQIrGQS'CPr2q"2Yj5!7E5'Z3#MPmt_4nUc+I3e'Wi(l<2^8LLD/7C)S
%bGt6B5,t>^hV&>Z*&eu4cm^"K^Sgbu_\T7#+.-C&qu1a;:8XY5QN5ia2CjtWi1ES;op-,J*g;tN#/CXa]OI/N$4X1=[Y\^DCadSu
%Z+K#ne6WQS2_Fea`M1f%l6;`r85/;Ac\pVs2'MLNl."VOOY<>\L:/Z$-k8h;ZPTW?U?uIp-`chj[1k$AK]Lmq-'E@UU1,8>/T-!E
%%I#fN,gE&Y90:E7NGOk,;*nin)q&VjkqY[>--OCQ\u5i%asYdK8R^+(9s]Z4P,oAR83Rj#E&BTQJ!]*<PVQ9GU0M#3F:r?p-X(?<
%VU;353';X74)p7t07*":WoIjriDke<.RW7AO[l6>NKT\@5*YLY=]RI^L<?)2UuEUr-[eGAo!jKKVZusPD/#5X\BapJ'cQV>ITue8
%J9tI4e3X6q2Zjh$mE"n[.DuBr.LB2!7N,7b)AuNH60*LaqGF"4SKq`^FrmLDB2`<he/[5X-jdkW,]K^Zgon:`WG[VTdO)(_Ig/Wk
%Xh1fd4?DEoj_7)?T0R5Gor0R0s6<*>Ifm5"g,9(=+dJA\[mR>^r._6*Mqrj8LB(\rX<CSt&'`N\o&lX^:h7=M7TY?d\`u+W-=;5:
%'#4GLW&CJ?j@el-W>\$[Q0)hliRb%>:moOOlbr=pqpUP+LM9^f9r6VjqoFlfThk$L;[-OJ9^S#0n:V-[!DM$"0u;".5&7ZLXAIoT
%W"<+U0pBJu#1'Wa<%lAcf$f`f$<L\G/>Gf0P)gjq,1^*.pB'8aoeJrRBP#B8OC\fSU@j6;Lu$Gu9LdU]d-E>Tkg"ieh4b7+U@2Dm
%(eb':7liALZZ$6XBVFO%`m6WYa9J]=N5!q4L[A-fFSSe3V2TY4D%rIGMQJJ4W@F059=S6&/cPD/G8A3X]1=Q\V!o4iU!:'^-!NNa
%C1'#No!1N;l-l"/;H`uMJp6u=Tk`"LlmfD='LPR[QpiF]'#g*$>4oPoAP.TpqiJ17L@d"Qba?.BQq`k6`'6HW.fp0bluq=jjS,n.
%,ef"14g^_KEj@[_BG*e<:l-i.P2f5lF-N01W+#adAEJoLFV&_K.==lm>4V2=@=lrq_#AdW=(p-"4[WK%7=kY1f>0OFb0fJ;iYl<N
%lsd1?:t]XqHq.c`^lI.(Z?WiN4^)'Q?.*>:.LWW`IE2&uiYh=AZ>UQ_BN+1cZ/]YF]?kMqSdX%1[\RWkn2<Q.hl13Zldb5%8(/2f
%4LL.4ci`Mne6Wj\4cOnK:m(<W)j48gF&E"QV0$uO?tB\H5]cdEk]p]RYZRl74e_OLI`^P)-poQ&G,m6'=i370q(!oF@=l[V3+hqj
%VogY*Fn7,)c::eU2C0%lDEK:3)!9?(nLP35-rV"0'tT<:foHt##$tbs@ZBE06%_ND#aUdI6\XYk-`T2jjqeX)9?J,u4-9Id)q54M
%c8;,7$"I=Y9L*WBnucM)L9k\`RO?VFk50IS698@e!)hc*%c$Hb5t/LkA5VuT=#O=m@>r-i_k+h>gGtW919#V*9>45gZ\WcjEFinP
%6`#`R)'G&q9;$>l)#Aelfor.?/)%t/4NM,);sctl&kcjpMeX5S8:G'`7KRKY0'j5Aaneca>$?T0H?<>Z6<:Dh_!Qrelu4CTT<Ugs
%>*i4poA5"j`3l-"fO+3b8FBK1pS>bl@b"7.%3gq]>X41MU)NW@Hhu:7\UTqNn:nM%,MOC1L\_h1jbKs:"@lSE(gqc<D*CRs+q>(J
%M4jC+>'*2k^f4L1fm2.dNE>Qd!%DS$7P81qQ-jW?HDkcSF-EIBDGdBN1&YbXd7Je>bc<pk=ts7&R8fN&m?Z2D.aaBXGE\U]gkg_/
%T8n"=#c$7J757rjq7.cM$SfJ;aRb^p09OYMgpr0t$b5)2mp:qtl\fn/'c)n:QqIc4I;'3r9!3iUM4E_\=1UnI,&t!VLNFY`N3YDY
%jfHDj,Y;RZr<eAmH%FCZP[e0_ZR_u4cLaFMZXSQOW";_K!W^A@811W5]]#UH6gJQf2_=ZN;+\k!:s!$+K*p,X3WlL/8j3b3*a3&*
%<[u16-.uh]UPb+'\s#amH_c40,*^@2%/"I5A=D=>SEMK#K"C^p,K4[sQPSp%A1=PWD0DaiFa(;X1>/g)_Lgal<\PhRR/1]tlD-0b
%ecpW'd`ana=uHdTi]u3LeO!M-Umu[/SIC*ML+7N63oK4h)C%Y'oMQlQ#UQ(\l]bM(R@Qu;n)@IoR[IIQi8%$(W>OSqV[0`\kD-ON
%8Yu!5c@@&BhQ6]!SM-jS<XS#9TrmggKmuqi3<I^n`F8o0a,qLT0)XGH6(@G?Q\,913Nece?F`Nb]n!)%"r2Is?mVMq#E>pPY\;2N
%qUeF/L9o8V[mH3<F*It,D4K!OiT5m],Lh\c8u7tR>9q);Fp#dH.b=1d-'F6gPIdSM0A#K_a,XdXT2?7_`2uJ'U76tjQ7X_kn6K5!
%Ar&L=q-0R>?J5[2hJq1C?O8&UGD35?qrhH%)/>ZccVf>+?qTSBk'Sb,@RB`"!ShE[Sm.(mdjoUh:WQ7bZTA;)BS;3PI+W!G=tZCL
%Hj12]AoN?*Aims5Q1",<3V5+K[K6oWfe6ESfU0"si6ZDfcB/r>gqI&\\snnCC&MSHmPG+8j6!mKlp=XS2li>;bF'&ZTckJACmuWV
%^uj,D@@O]k`bQ%BgD.DAnEsm2R(eOqR^]Ng4>DpC0`=[G1&E]K-cBUjTV2\$69d=I1s[Ga55AhYQnA#<V%BSFMo7#:0$O<QQ@ctW
%\q>ba&Zed!,o=L?6/p=Q#p",Z#b]*]QH,:BoTi!_a)RQJG#@JNa1RhSLMg7c00d[A*Zo*Cm:G*t[81CSZCDXSa1$=Q.6%@f;YMLk
%T3h,-SRW9jQ8fqQ]3-&:9_-W?*<S6NE'Um34Eo=kTH0gq`tWF2EXHRkX+K;kCeMf"oc;=2<`YE2_]]d@3]`9obRYOp=9t?012VmY
%8:"!]4gi@Hl]3i+m=bmFE,%5*:;T0W,a10RS*B6o;u56egi]ac\Oll*`7JUom9]#EZVLZX!VT`7@;)R*I2*'X9_5NO-?$),UhECo
%&oqjg@tgJtH4\fl+GLaDKlt-'*E`n1n8`ItlHu6YOIAd!_lc3(TSNC#>URsm4e<6Dd9?gh<+Q]9;7LfH-mN]jWmcOpUlKabj)>V2
%=jnO\(UTPrBr$P`?"Ygliq:3X[O/-<Sut(H#!u2h^pT3%LS?npbhPSHd70H"![>hAD^8.cX[-%El:<=&8ke7[fL4hMJO3a:6_<&^
%%P`(-:m;ARSS.VO@ADJmCI>/cHBL2'%;]Ft(f%9R-!#qI^<Rc]XI\aB<<(g[:c9o>>=(@1*7K%#Wo%IqX[NBFWK8rJWBc)u"+3<@
%s&^[B(@bf*@5"b-O<TO?!3%c=%l-=INY$M8B4q.R1sn;^q\eKNcWV)]14)u=B4Q=#Wk_1U`/?CF_=O0c't_e(7]dC36ZG<R;i5OO
%^`pBWCd%K<@\K_5Yd#^KiODaL+sH]CV:.C,$c>s7E@7D-cn#//:JLr>FI$GCT2H]goGl&IYLUt,H$L8mFD3>JRH7gM&RKQB8Th%F
%.HjptD&%u]h)R)\Z^\Y9EHl&NeW]H`UFa=.?,_Z`/8]IL2!egmOTT/f004a!LNeF?+hhD?1<Pu4H'csO<m\cQ@X8Pd(+<2uF&jd1
%b%FJJGD&;p>0N7HJZ&5?D#/9/s6g-:JVMZJCM><Eqf*8X4uP;Q1!*]g.)#2L!PCoa>398*VB5(.,<5`',YgWOocH+SQERG]W2TDD
%IX<fdl`r+L7NQa>c]%Cuhiqc$IApFjr:ZJXO4bVh5^;^,Z]a+.+8@Oi2cKeJ*87,GbKE-j,=f_7<rJ7:T>X>-St7kL_s9R@n_6Qp
%qa"AT_c6!3,!`$`p#F$Dn_$"Ggl[$:6#hI'YPaoGiO]eeX-APb5Eb2TrXMN;RjDtH<S?Fe50"YA[IbS*ZuIhRZWCWq>F1S!H[KVo
%OY>%L4jlgGQeRQj!4DHC3;[TZ\D:4l(WP3N4bi8IgNh1*,'8V[k&m/T5@0;j*:;XJ3jELfJ%9S:b8ZXeB^;.GDoUtQ7sePDk8tX]
%0;1.'Ha/F%I!M+1Zl0a.U+O,4)TY9g'RXT+h>$q>]TL0+Tl5,/AdIHt[Q$1&?TRWsqom=U>[KF"lnhpgT=5j%H+Vg#Z]s^XY8ba2
%G^CCj:IbB.p`,39YOtB_0)kE_UET6%2!B?JPA.KAdP:/t\U!U"2p6%`T#TDspetq@I-`#c4$L-BgTs&PReI?j_,`r%FM+180QN)6
%iBCS$RI0?G/5Aj_[<.E3iqGCOgXQpaqUBce"HTTJZB9R/QSep9e@0Gt+dpgUk*q6IH$J\lA:OL?Xl%:QA[6[CF]`P4kFWQt:_:a0
%NOKjSn5nN(<`H3om;6'8_6o<E[=<P2hJY\XAq+F*5@Lnjm]1=2#-]LbnR11SpRgkMU&*F:Er1'!p%OPDJA2(h0;W/@j<SjfR+k#!
%UmAe3.ALp(8D3rl%q(Xe@T254f^*&C7HOOhk^itAc1KZ!V5P&O*'uAl4+',3%GsMs_7:]PK@hcnjdaVFC_W2VgmcmG.J/]J_^4+p
%MAD'm,r/tp%!gI0/?Vs,Or=m)oc@!5#Rm[<M?^pQ@K1LIJl8`G&sG:emC0R':)#!7SOF6XZe:eV,le*FJ;GdB^Z:=hC0*!3fi>!\
%G@&d]%*MWEY**4`8W7]T9$:#?YKoaNd.$Q^'qDmV*j2LFHeRI*-g>.=8[SUq>[-UAe&?p=!2d.o$u+&9fudoDeA/P,hNrA#'ECNu
%pXZ*!-QoWdZZP#mRIN5o&6CQ+NPo`;L\UU=DFeM?bTo5J<Y4p8BfWu(LM`FH/5cihY&F*@`2;'0o<W*!IoUWXB7E9+*f5s,=_3C^
%au$6TErLY_EK:ulbZR[A*8&UD6Wu8doI]Q?0IR_s*Wd?=9!GClbEl!;6?MjcE`'9"+&_K8?eWeb07e0dHr+;jLWEF&QLjGe*[E3]
%fVNog19"eoa16B$PN`tE&`YQLcKe/]#Jh*-@L\X_a?,dJ<QA9LZ_/bC<g9,>:S8T7R@B.)K/\d5O724c)J4q[GSd<b6qdHilr"s9
%dX$o\F.Mj0E*4%5"gR+qc'c,T6OfrqiA>:%ag2e#01G)cEo^ltKg@-oZ6a3fWIVR&hfk:LY:bYr8Zh$Ab5[C$$#9F1^b"ke[Rkcq
%4V*+.'f1VH6_tR;1d1pg*;+2bUA)QcW1)'%-CGEb(2p!Z@@ZLaVP"pc>'i?lJLmk`od)5&87e?-Ula5>BU3[>N\\=&NSJ8"b9A=;
%VP>/t]`r"7Go.IDjiIak97KcC((#6V2&cc<N/uH!b2Qibb-j/CFO\]LqJL3!QB^1_kT_A_Kk6o)U]afLpYHs!M'+YZo,/i$H*c$`
%oP39(&L!QN>--)fSZWNCU4tdp'SF2eC:AYYp>`[=6`(ds&("F]-"=9F!AC>(X*Ca:Mu$MP%1JH4m<$qA)XN$m(]]U<)/2c=`46<H
%OJiqE/fTPST41gcm`U`egIY(r1eN_JdT1dfGI-dO$>"]'X""\:EO*Q`70YX:njEN7!6;FC^/%eT6+nfHbr)Lqf;TT,NjPoO>RTid
%R)V='A,nGqMp3Qj_/mSnOIIse:t!i)<I]-;+Smb`pJW%t]::MT)T*LJ6ljB"1V4D,/d"(qq"s`s;]6a_0\a_H03*tD.(6_e=OabL
%+[g550;0kXD[UHu4GEW@im/nr4B^68P.>Vj%.R!)YPdhDSf@b`?V=NIGl3IB8E%!K+bcIM(-ZJ`dP-7W5sE!_qi;s%q9^1o;U+2D
%,gEAp/Ub\7AK1`iZ\WG:I&J"fiY8S5Lo#5r3RKkMb@T4\ho+EFb]F0^bX2'PMM\^&&&VUBBghoq!a(Qed8N`-RY+.4FAY3pc"hOj
%k4"_EU:_0[S0I'sl7psD"A0#,f-BReI7\-i#13W=7##kSO.;.]:a=7HLLk]s$Okbu)Fi,$b+!+]_`4*9^W;ZDhlQ*)G+"6"Oqmpd
%P_Liu98F4hPYNGh3SGl31o,4IT`tcGABQjc/]APKb`"c2C5VG!7R)]di1VU5@WU&pPU.q$^`P=ZX]kP0`p2TB[XNgeSRNM7'gcob
%[8U'TR$dq-a4]BkE"EmT\\5t=D*uZhK6"erUDTsPm2Gc;H;l#$:oa6U`(5]X)tuNADsLKG@tjrLG.>]E5I4"2F?jJoEQN`1</0tL
%BWc(Ze@GbCA'qAqj3jnsOD^R*c\D'/nR&CS*r#M)%rK=ocALq)=edUB,n-;C0*pp'9"?jnC\J9d1pL`7g7OBeGGnU\R4tbH2=$2\
%EMno18Ds2V\3,q3huRIJ:0=%Qc/76BN$XacEJE-8</bW]KZ\)#1B)FoN\:USbla7BrFr@PoiZ\>c1,3;k?(8rD<i"QR>\gh0uT-Y
%rq@X7`/:")e80=c5%C^+T</`\CJ;q5\lm8lXE)^IZ?RSQrpKEr0LSO-AK_\RF,Qfs:nPeXg[SPCB]Z$3B&2Qr\$G\E.4#`-3IsB&
%_EV7>aM4_u_G^oqUa^9OFR@S!oSm^)Bk,fb3!7dn/7;/n7Rn)g80P3fkiIuL!"/#IJ[odlQc#g95U8+3Y()$4l&mn;4%A.Xj2.SM
%+@u"q!2m3M4f(UCro6+Q5l'Y*oA>o9;X<%LZY0=[Ib6+r'C>j:46D0Naoa=hRn=j*Ui=r=@S[iN]f"f(NZ;8O3qo9P!D<ra$c98Q
%;[?Too>9(EdLYO$lRXh%bG,lqH%-)aY=JCI8\IK;W'3t1$#^S)Fn8D<aNSj,psuQh%).sXGmZu$G1BhOI:\J$H9RF?]%#P"_Xd3/
%%Y@=ni]-]G>EaXD^D]+-nLI.kX^Pu=b9<o'%dXbgs8.lK43R[cb.M#c.\OKa)&J3Kd6O[d6)h?6Y!7c\$,bP=TQB%E>_#FIS044_
%>k/D#E@C..?9$bS]>\lYLdQF%WNSk`1sjDY[Arg\SHS)jd?Yfus'DCCJor,)?TKaH*4HtM/H)u^N[*/.G9*U9S!NheVOoLsE^R)2
%/<e^T,D6LR&G_JKpZS!Fp<N!p4@@-766ssQ/R"W2i6QT1,[ptEg[mij^&'BXXngoHr#TnZ=1b)p,c1/UkB"#_\<<X53#!B0-EBMt
%dPN0JU:aS:Bq6R()sZ2oJ/e+X0[10"8BR\0rEHfrK(e9c#Jga]0VCk.O"7>J@^[eG+)W4,2H*9N(7e[PE/D1q7EFQb95Z3B]RS\.
%+4B&-`kIgtc5!OU-bgNVcch08-($\V[t:l$@=A-/O0-_0#)0\fY0M0r53jCBB*6l``#,]Ik#N#QX[9rQWWKAAR\koU?EMOD&]X(k
%@m@'hB-Bn4lSIS3f=)9_i9_bl+IfkWZ()$d!=Kd@c@YpV2ks(7ef',RpZF0W971OA_0(3VDF.D2$bR;[5(!#oh`^95KDZ/W#?@-_
%#lX6Uh6\;I;H.Dj9mjN8If&NM^[ND#4PkL7;f0HVep@55&2_!3?B*eI$MdiYGl(ECa51/e"J/R=)U(hOZDa8c5%7IrUr`LDU]I70
%@d<U!IIj4GotJ0<o^MCa\_b7S])RWkp3m#@XpQ=(CPepDQ8T3YkdsTZ&ErZd\:LB"UZW;,>;Hu,3f!W/s5hRk*WGl\XS0F,H*);G
%p#)][i62tASbNF7no,*?7#I)VF]%T6HVSHa[+6R$!&[?Oa*3p>E;"?t6CE]Nf=%ZKk7A"9[+XOWG=i:JW'Pe=Kqr_RS,lX^g+@!/
%PoHiE5?E0&:9SH%5uY`/C0sm^DB;qEabX!HKITrdZCG5;S\.chK\1'?2j?s"h-BEtfK_F9g!%FUjT>Yj2VPmZRdI&a;h9<U3Fca*
%Q5dac3u*/gAFeL,DIFR#Rij669V=t2`uJ%H.2mMU'epQ&*;r/qou4>p%YK#K7*q;P,,GdF7ak_0YgO!e]Lq&<:"gG/>tPQbEi7lu
%7IG2Pc!M@XF](?\Wp8$&K+gUh*o_mDDHis(25mc$.)PUe"%t6\m:kNe`d!uRPQ7&m"Cu3ufIjI*GC<]g;8s+qh*?a`kD318CP@a$
%+3`f<8P,8FPQB1OLAQ\qi20RF<M*0-*?4;5k\X[6Q=Y1j]PCYUs7jd08&#XPdnUYM*"!mJq;i[mE\F'EkrG:U;hi_P!]t1k+OSP;
%ON!n9<[1_7<#[OY*R+]rB?:SDl1?\N/tm':M\i.'?.fYM`@`S[1SrhM?kB[*LuZUGgaE3^9JKb@Pp&!%aC2D'Xq?NQ`_K=r="bud
%=1Nsql!n5GZ"g+&LZrj=\!Qt,'um93I&p1gChDf\-cP6G=0V$S;$"#AWo0g8\XdMsBO^X.V+$iZ&;,B"KtdOm)LE%#?^o7s;6I7n
%07V9Th.Oke!l<7>m?8,t9g/>#gCg>*TS+4JbYg-FJ47m)/>o%3Ho&40*nJi0Bafo]6imu[0cSR7^)nqlV4Cbth",eo[B5=E58l;>
%2J.[VQ-:/DOcE7i3^(Bl+>%,j?I9Q=8i6AGV`?M!`_@9CZU'FM)Z$>SFIh"1'>?uErlAc%Xi2IASQ@?k24/@j.H2hN=EgY&WPX)^
%nW)%L;aOM.h&3hh=*1hX+oT4^qO*32HQCc.2YWZ8IpN2U5>8l*SY4YlRPP@]C9$eQ$Y%bMWa9c=d7kDK^$*[/ik6R`%b84:GG@AU
%M<U+/#pUu2O-"AU[JLLc^jZg/I<fA4X96<<j=5tMHB[eZ&*&HqWm#)uZo^/bFZ3d?hRNB7A",Y`(2'h=`B5i(CQosQBaoZCIah'e
%;lKNRF6P5#g0=._4[-YF]ie:o0U1%<j2JF6ojF7p1nOqYO:mmlg.jr3+Xti303s*UfUd\A)"rK"dK2:aFBlLgO]JLO\A>0afF$n%
%?<2[Qbc&SK/k1#79J(c?8\F(gl%JS-Ps&ef\]"hrs-uAOSm(VHAGBnai0mE]FfY&<jK);,=1'JLF=!U3R<]tY?a7>%Ug#No^RLnr
%r?$%_;\Y$s4PX9Za+A8X%HhRsHI>5"CdJC1*98oY@VQEr`FN#f=#2/K/5HmB)h<c#q=(+=R#WH@%6kd#>(/02=!s85UXQF`l8.Uj
%o$kJbDUBt5C't=SR^(R\Rj>j[gm\FA<Uc@;#"a"tf;j3<bbO53h)Gqe_j4!8@*(mqj>BP8dsW&^!3]!E60d<V$18%ENHo&6^h8_*
%g-2puhi726FgunHPP"6Qr8Fp(c7?d_JA_17XK`&8ikhqG"XOd.eu,sj*S^cH"Tu(3lZ!mMHcM+io2.!=i<KbN+6-S<J,:&rX3o+-
%f&dHdb8ToNf,!;pram$trG4Ur!H7[TcPhSJI'(:3;oZ+tbqO2T%Lr77U+Z2S9?TE-Q*9%VMeQ?so-B*l6CAftl<(JOK0MY8`fWUL
%>_:71p7^lICA6TT]-<N?Q/,d8pA:*G=khCgs-kKqZrneeol/-T\==q3N=oYuAf(@`B>,(Ij<KBBJq5(eIu0Kjj#P>m2<ffY2[%PY
%;:^+YpO%HAr&*bo2d)&G,CrZ?):d294+dPJorPHnY.d>N>)C^4'R0f1_-?9fPRgCul6o)_E\sRN=T"sX[<#a.P*@[N#a$$n$;iRu
%[=(P8B;gc'gJjbsAinEC&7;dZe_F=Q3_!Z#=<+bqWTI0Y>&mSoLVb+.aHbsiQ[R6=j1-)gkggM<.EZsF^n8QlS^%cjH'T-7f]<0u
%\r/qNA3:1-bTTq%j:$RAa$'u_&l#ldIm_'#j^#g*X3$Z8CeCBiT4WdXLsl#Tb3q,TR*j@bPDpr`n@l*)]!W9Y*stkW<'%#^"j"t+
%-N`@SRUk-sTB4R7`TfPhlD)'#U^E=7!ht[M8Q;SCU:aH7k)'.ckMXP::d/9uSh3i<PMebWJ85;R7o-+UN(7lr$()=^!EP%t0Y_@Z
%<Al3%K1ajBSd>1=^,Rc&^\H#1H8q_(cm%>G606^=M\uqif*YstOmuS39qh:7(5p4t`_"4HIV+'b!mrhMWEI5Xg%XUH=r+btZfk^L
%"i!8.s!4Xa-k+];emnb:VOo+)#[%T[`3,su!1,R\kDq'P7e^/KW5;[B]XT7@Q!V-:Y`:^Y01`.Ha(g&k,lMPmS9):/G%S^d,[d6\
%Sg1rL>C%]U_5$(^"lrUGVbPO+"/f5sZDl.^(r*eFa,G*'qB0!CG_0#d)*">4r5#bqG>?Wc:@i_bdlBi(K]n3DZ.*<\<%B+.q5MAM
%9?k-j(VcBbL'E'6%EK*Wd1.@P<#qiRXr;<PV2#gal\@GUDb3=SU<i%m:/)oGR7tTjDDfFY6o7dQ<AnGn9VagrDQ]DnF1^mef\P8+
%#^Eo+7]/8+7TD!R52_4d'fpd1Js0aSFIo"<9@Iod-A@8sZIG'e;(;tKQEa_1IYlkLqe>oaIsR[`INes_o[9`8i"T\i(9Mp#@6KY[
%8]H*C#P)JYVY3ib5HVjgeZq?a`l/7dNT=>KM^IIA_g=_@cO#nAH%X:Ug%hb8Zf1PTl:h5$[b+PD\).,d9CQeplXl,XO.3fmd]NAB
%^J4f3pM?r7[m(2b\Sfu:*a">S*hrpPXXNg8\;Tc%#.BLIYf@*Z>RF%R_t-`'-XUr,D4&&O5%7X/IJD_B']%+SLq.IT\k,)"^9*g[
%XY_0s0%<aj")?D.AE2QH*ikMffBK*/Zm2V.S+`>Deg!TVHMr+c;,+b^Ib76uGC07eB7]tuKVGXQp\_A&s'mR*aXL?ET7>g0lSqm[
%0s3_^nO)>XI![,/5I''8j7*@<1d7u&mml=)W[[os[6YT;_'-o2/+ck0i%;WXe@sER]nCApD42gt,Um]/WMikk0CGM\]K-onr-W)H
%Yn!_uWe_M2K2*U:9fp*W;"]E=gHm`kiFZk>.T<Y?_X8V>F_*jYM!I7sUlpau3[H'tn`Ua#CR+`JI*NMDUNoNjc>8f9b9XM-+"/!X
%T\@mC(hT@"QQUA/;)199*t6]G<2=u6&gYslC9"8[H9C28@@2;b/TJX93C'.N7EpT>KX909`n8Sa*s^[9`ebM#O]HA&f>11g,tnZ'
%6L+odWeC/8<93ZX&.7RkFif\fS!rG%WaT2"M>ik3d*$,pNU&q(c_tY_a:YS?*$TR&X&,uXc2+qn!Ai9\0"kFA60D@D!Kn?9O!=#C
%/&Wa5)r`Cp.&e^&A<jW4_\IA<5?t2BmsHq6^Y9QAlAtU/B^Y2J^EN]#q&"&n9UEAG78VOX!mfk016&B_B$pm/bVcKagAY#Z,=a$l
%9X7KkFFk3tnRP2!]"#@WL2]#H+<oK4[%&t6:ha\XOXr35/EJ"cfY;,Y9#386pY@53g'DDfWG9])*$cmBc\:tnP/UBZ=a?sZDX$0q
%O]O3tYV/dda"gk"(G!@4(1l>2N9&OUPf/8M.Mt1C>Gh8d_$L'?`VB0Wn!"mD'0`P*/:Q5d/p;Y^l#;r+<B0G[OS<Iq<O/EV%jus"
%Zoi,<[a%V:$GIm5@!H<kg@Q<j,=`ob>_/Z+RC.\oFC&((<`lIIBLAu#[/2Nt_Ub0@A6`PC>oV=7,oN,G!tP5>hY&$Ppg??MSLG5Z
%&F38YRC=b7/9W8JrWQ_/]+o?B?pS!j^E?X]U-A=i<RtPLQ6qH@]?p;(#WX6:s'od7W'A2.UO@,N'=SZ_`+`SS%7%9YFqF*XeM-]l
%T%?\k^j2<CNrq/L`"?-D"8^^cX%I2gh`V$FXCtcm8fIe^[0KFON/.F@S:9V,5sDG<c5#?C>Dk-S/IJ.R66*f+2MNWR\b?a.l_Dhe
%AFT7hYHPD'?YooQJ-Qe=Fso!M\Ya!Z6\8S$7=8K=aQ9>LIOmOSCY+#KDm/dMKb?^<.1<.FRSX!Nb>`04nd(QN7e"O>>\@ulfdCYY
%r^bXFFpWW,j05U"WF/IuV$)^>%T>T]Xi82;=tBaJk$A"\$V#$$eiqIhS>&6<cPR:o<6qAYX-Okq_kp:qii#.:Ta'1`_3*905_(:T
%M%:.n,$%U6X"Q=J'%(SYU>UQc"]+K(oG=Qh:1Grh3^'"kBPLb5.F!1!QtbMm?+ZY/82\EuZ`mfrh:)\m^*Q"(`@<W2[F,i@%tSA.
%%T)UpNJKfsDD29&[j1CtIo0NSc*^9\;r[P1W5'qP#Pi#Hq;8)74:UeljsUIKDF]5eX2h+dPpO+Pg7ddmo8a5$+@lfNZ-s4gYEO?P
%G3lC'iFL<Y(528N^.H$u$Si)HTuGWVl[.C*KM._<+$u;c^)jFeZTfN?5+G"s&k&I/\(=3s?Qc%QCn]_1R_.?Ur<Gb5Y8l?VOMiHm
%bEUR*I-P#/8"'l5%_tS6'('h3CgG##SC<0r;2^`@\G]n\AQU3!*.tn=4L#U9CCG58dLttid8g3CL\qB!k`8KgJsGj6[d?7LD"BB?
%CBe`%2DI[%o7N!jf9W3S_UTE5L"o),GMUq3ASJ\F-c`*k>Lc;WP4s!3B"9sSPgXd,&$p[(d"]G^7==&Lk]i*b0)N4b>nq*#/md=t
%H9(T,6<X)K/G^gNqm9.4^^dU`0XP3<dAAP_"puO;LUWQl><t,bF!*%pnZo7LXau]DZ7#_\XN[[VF`&Ou6GaLXQID>;4F+E#0qD"d
%Rn8].84sCjR'+[YSer'!("OW9)6IZ&?3Qn<_e2p@\H[t9M7jTAbo202VTXus)7?$>4_p]mM)h/ESsk@6UM]@cn;u]Kl_R.Fo'KEQ
%K4crn<_Y^Lm*?5Rm\GfNI8e7i;utn[CfcB6K;H\d(`C\:O=OfuKh7usKp!#p;)fuH>&[hA8Qe_D7FG&<qFNFYLL]Vn+1cA9Fk"Ka
%1bA,Vd8a[;e,Vlq]4m1S&Vp^cd@$Lo4A#fOge\4em<bP9`JfWV4hL-<%>E[^1n&b\2BtNBN3m]Q6F'7ml+AX^QouFi7%5er]$$%2
%JbprphipM@)fh_WW6`d(euh]k;ZH['aacJH:f54_$Jb#GA^?KLTM!+"=HXrY&TGEZY/XG#efm1Q6a'2q.YI33?<#kb&5CM,dU<hE
%jQjbZq2+qEjnOs2OW_%+&6;?'5-0#:1&!8_->\h7e&^K7pHkb8eOWi-*VAIiL[j0bS!.W_0m'$iU"jIH:K<IBnglHF)4_Fu'`51U
%LOS[7:ODY;q94/7K_H__-9Vc*8L]GHTmKmKDG`cdpCll9NSj]j[l6d-NB.n@;#01m>O1mAOd\l/;sVWea<Aj$>0l$=IJ=4hPNUl-
%B79B50@n2(%,ut:D"gF;Wj'`DXnN'JJ,ctgW)h4+3N<k:+0S_fhbal7em+l(:TPkQMY-;t07762^0CMh3R[h@f&qPp@H=o(oP(uL
%an%05@\(iW]cW"g"3'+E'["Ta4g"J!@8dlai"PGT`\YXOrlB84Cm!k]c`Qs-h`^;_a-6;a2)^+%X[KE]$&&/P#>-ChdhWI.'Une>
%S!.)`!O*,4"$.*Nq]ff&6HYH9&(%=^.)BfNS>(*7d@ePbSUDbaKo(n,GL=N-Fu:]=V,X>0'7Z#BdB*$"<iLNo9U_rCd3bkRa:"e/
%[;;u+=fGNLOs@+AXOYt:&Unko.6>fh\@6G!h5Hr37696pdn-1sI((U-[\g/sj1Ai&j^aH'__QpB<CBR\:\4YP&V;9Bf!pqX8=UVf
%BH2j&1/&ob'R$`46V9]ol6*]Bn!%VHEEnN^(Q`:1j3"Qks0Kp-nbQO@lekncIS8@7f]>B;#%N7\)tbUjMd[,%hE3D5R06G8b\\H)
%dQR?tn-E^]'em$WBEXR)7Ca,6/d(:(F%X@!,GLLC)9Ja>`#I,VKBO]m3dL7%<6)$I9_3n:@gtr&FA5-eJTmt)*Rd7V8c;r[7,uVd
%a;^$(?2t;XSRI*].6h7_6oNh.<t,k%,8a,P0IK'A&B01>LhIl9V&^hVa\/?>cC5jt8]*_iAdMP(P%i2cfG:P1js+T&.E!A==q<\<
%D#a>T<+li2;OO)n$#6,D0G(qt[_F.m\K\+HqCQ&o+fea'T6\\3Cn3XCSE`R'44Ot@I=ll`2q[GCWXeo1b+SF7cG]$Gh^J\>ib<H$
%9o$/:T%J3C!EAbtNt($)f>8o\O=Z28aNI[@&#Eq@UuBRn4!smJ=%jbSbU8VL+tM"9L$X>Qit`r$g/O<@?4YoCj^r*^=?n'dR*#uS
%!CYFF(9=D`Z:qsA2hGn?\q>co'm;XeqNb5G"erX?`p%-ofY>a@;ecd\]cn"oO,iN@rLK)92.KdnRrbYrg.I!B'"n_F]gOH?n%2&L
%=ohu1bb3KDBBg,[bb2r"gJlXGn3Vt??87KDbdTO1/j1as:(e7lKfN&%2/0)q743Y]NWrI@8[+&-9Ji6he&EA>,-"N.6R%TKU[Ph;
%iBRSfKVO>U5i!r5U)l%o9o-lSPY:9fpbf"JmquoprL5%*OCd"N!u*Q'BdP%TIG9Q85B,G"jF>,@b:,?&eh*%:(*T:'D^.n!DDJ@@
%o$5OmK^uLk)80C-c=PAp.*Y="8a(JT2l`:7]G+%R)WlI3q7.rU__Lr&bkRU$lF5JOpj/_%.&T]ol\A^*"2DYi$Y`?^_4r7gR0k?@
%pn#AIp<$?V6'lC.B-n3G("1-'9u$nT%OS/[au#89oec2O0o^.9%J)e[P'`%U=Wp#N,6t[ZI>D`)#[kX&HW_dg0%8sQHm'e[m=5)1
%`i/?RNHHL`)(cH;>L<_e2@f;Mm$PkEVQqg6LH>[I0>N1u=]A6q0h'!MIYs<-?heMls3M8bbDM]5`&>B=\MWP9Ls5*!d29DGnZ"U;
%W`>cu@Z5A.4,XT43TGGlMli8.>C>:^5cmieEN/#k:!8+j.,+,6/b:RjQLH$+11pEA=a62$fn*Qpk_)@`D6*Hf!4Fha:)>!bBR.id
%@\r6mJm\i=5`]^0gg5ba)gJ_,So.JLEd#n(s'VC7XuC<UM5aWBe7.<c*if71SP>3Dqf(BNGLuVB/[8=(ODO;%9XP%ZkOuJ2"W:NU
%PE;O]YOHZ7=pTPncTI\^-e(<_m9'q]50eXLE>Q1$i[]^-VhI^Zi#bXMhqgS8_';7c='>8>[RSpYk%gU<aOBI",;m,k:U29A!r_D3
%7qnH_*&=%?_@;s="Q)'H]G5o<khIT,lT;_<R,X%l\ja_C*:6c'&<]h#3N$uYUIji'p;2j"P1[i"O,k2kp0eg[PBsNE5:[k"G"f6c
%oA/+CH;j2=0ab_QC_1:fdt,`\LdRVjY:3OBG_7h+gS5AJR'$lJCEK[,8!Tc+(UZ(g`;ucuQ;S@=C5_n=drL;O\Vh2L7,=Ruor1Qc
%b,ek&q5B`6RQu05YrJ`)2m5"?D4JkEp)_d/W^l>#f`O#='PBUa5RH*13QAUJ90G`f6QH3cW%=P[S<i!t;8m3U)O>u!7,6.)LG_";
%6<0*Y+(U5+XIt^=9lIPMr8"/025SsP17q%-:NNL,'?lTkG&0L;=?E\WO`rG/1GR//NalPFaJ)VS&Xrdi1!4/uY7a[E<5n_=-2TZ0
%a;QV0WKemHPS+lB"=t>f:b#]X!M;JC]k(#mpgF(!MAYL!h]N?Fj6J#.m"Lnd%o\cH7g7mg5Wt7$_edDT53eH5M.>%3_%`,igG8MD
%pe`*^?]2M"O;uGn9cU\H$DP97DF.(heP]A6<Uh<enbiHMOcJDT)_aPL3#tn!V9Q_q69<k9%,5I;V'CI=+#D*#Wbl(^!3.nfg4Q'O
%8N@k86Rr5:c).3nmP_s%>fKD?fC"HAT]89PFRF,A(Ce0CR@>Xq`_tX4+bA7DDG3VLlg^uc&QK^"<fd<`MnW@;c-XM.\RLK?<0/h\
%QILH7Fl\?X(='Vf+86@4rMIMs41Y?K'3uh:8e0N;=Es+!6"@8=^Z*$7aD-Bn4/LRgF0t8V`?'%-TH2=?*a(P/V:cn"HYh98S[oW.
%,[:RmM&h"fS`]<PY!=3*p_#?nL:19%(JTL8[VQi``'S-o/t-YN$&P%T4$:b%C)/+L@Ih.K%i3ic&l"#L;:CKFNdM7^5YB<;_T+bj
%g@/]n^]3pBr7r4X:u)_:nQpim[@SAG;EZP^:T_+]1Y/\XlR17f`SlG^Gf03?l004,dd),CZf3)4Arc\doi?(BrIn%Kc\d@&V+5C]
%A*[VqkQF_npClk@8=k=i'C3<emG0b7-,fu4=7U.?N?bIR-j'l#WSd-`QUaI:nul/&*`8iW)^CNA@f3%K38/+cX=q?-7k/F)cI7)h
%K_I.np<>lgXo2jh4KU8d$mqS>p7jdQpEA-XQi;m8roiF!b5U1BrsS:ep[&=hhG%oQjjSOj789J#qMFn,2;eAg2`F2-Un=[;@n1dK
%55s3r"#o<q5I%pb:(<`H-eA0TnGX<^4sW[Y'(`2V=9%4g]T'LtbRLXRcM&d/QQAi)4k4s:l.@,(5$rb?K'cC-BfU>q'5bC;jS!:^
%Y4(u6qJNRoLnn.HV6CWeC\Au08-gQcQpCF=DIkqR22/P99>'/+O2/"q_uB%Jf3"3l*3CYH6m&:NffmIB&,Bffb+UTrh6'U*g`[ha
%r\`Oj.c>o>R2Q^+$T0BuBr!Q7nm`G/^STS?kF+?YM3$.1nGFFOEh5%&;[MPt&f&:Da?J2B*RdT3*@>WigfOD2*n,OJ4fI5F*.u!c
%U.'?.H@2M3=5dlQRg27Pc!!sLpu9%('55hlTt<M2lS?H63c9EGYcd1a`7+eK(D.MJ;rVa]9_7qp=oW]1DI'sS/QD./B\SG>F@^2J
%?,`=G1);bb*5aP+k<VNBW:]@pFDI,aV?jlLW-U/\jhME[3&(^4RRK\J1#uRMakk3X<p,[?@GU>&1Ij^u%^BfcdPrL@)D!K8GfDEh
%JoOk&mU40Y3?k7-Y`L-<@9qg26P<fi&e/O(&7q'KEC-9Zd54VuY55m*MTtX$ji2'YC_N%?5]<[]<Fg-RSIUgt*lXF#S3C[E2XE\S
%/[C])mL+6-,[chOe$^>^WnXVE9"W'&VKQ.1Z_N9-/Vqc,eiHBnDDFk@,$KigA)e8@1Rrbh2)qeD8'Vi(oiuC"i-!g(5m!Y_/VkWN
%mt<NK&d<\X>lb&hn`K6TL`T;t><ei>aCt^if/4TiqH0Hi8>%t*6pi]raE1LH$0m9u-i^HT^Bm65N^sL3IJ!UsM583Z,gpiK]Pq&C
%:R]%Ks!T*),cu=+SAjdT:4r_gKN^a@\+8JHK_!f2MB$LA<='eQ0&mL,?f,]-/QY&2*F'cc"fDY\7jV4;:65=h2>Qq^OR"\m+h%Mk
%'F#bP_Hq<`!iS8ko#s?8!;I8'LUq$Kcj3-B4#)._@[Ru(d1ponm]2m@RhV<p=oWBes%JIDf.i/fdBM9Ioh1>a[>l@*JCSFaMTWE4
%:eMkW9\.9G;,$@?hDbZOKRLaL]Y^Z4]jeqG&_=k6251s]4FQ+`pY5i(aPhO&<s0PtjCmSjh3gluSh@hH\fA4!-Q;7(l#C.u3Pa=O
%n#&!.O(Q5Ylq6cIA],(Bo(D>p=kol@M\8h'^=Q7b7arNrkgpM1=J^,=-DDCokmare"[3'P#(p:IT@oYB6P.*07;<A[StX"t1se8J
%@2[7*'*)0jeq=s(OD.M9(WT:"r@%_c``e18=P!SYQmj/\;Ut,3'o:[CKZ,dDmXkmI/V+;o<-G/MfqE2u\)mIe^@YgNUDn>92`">1
%dV!C`dC-9MKVM]'ST_%N4YQ*WPAQ*XVFejV3.`fZAY?M.j]R&Vm"UY_&]7C.:F`J0rjo%WJP!#./5\Em!^\mV9!`d8P3Y!&G<#aQ
%\[``o;M2-/pT*;_XqW])M#'snK1NE%\R:s_f;gb`[RDsSdErE8X?chZqj>\m')+8V+VR=Wo\`t[J,p2KSh?/Njc<MF3g6B#*oD::
%Y6hj*#Gek.N#?<<SY,!0:G%ZQNFOinho7\q/(Ur!U%pr7$rs%/Ht[acY"BiW@5i0uMQ,q7g7S@=M"@@3j#eW;rAqG:)V5aZ"aj[j
%I``Hm^_s4,*!=Tk6Ufr02WPL7V`_<_3Z+_4#.cB!\FKj/7u7[O4nXtDWlMEAG[HCM!%p1C^KWA/_qnhI)q?>)'Ru^/=5#l2k=q;V
%V=EeL(Z,+u?$=VEKk$6am^qP!4TA(H>XBb%<?frAeDs.*3Hq#`>"RD(2%HSD6:k*3=EO$HH9<.?8<<XZ')6CCk=ZTh-ah$ErLrkP
%5Eht@;rR@g2N_?3_W#<aZt?I*Y8Z>ZT-Y,4SRT]#9oD2-@G3C@%Ia[_#6T8J'].`EBpT$*Vgro](sl'^j6UDO?sAhJTFWj:/([&i
%k,S0C9<"D($s1J5%,JbOC>i"EI71hPQ\GIFU?*n"QRu<k,PLF('SaLbGqFoLJ]1MZ45N=6B4sNf2;-)]^7jLRifO-`FfuDt#._>U
%$9HY=Uf<oTBa>$+YM<Oke9jico/u$E,p2T6d`eH9_t.RmHtCBUq9s3#:7^S<]k6Yo</+qTRI8BK;VA-*Ai@POnFjQI/MSf2EP^0f
%%o3h(9iU<3+ai_5qMB]BF^BE@K+Mk.#6mN.DdjTSrA]J%pZf4aqAWZBH#u$SapOl(9L5.":.hb]f'=B<1LGV@^_%K/ODK1!Ur5a_
%$R2G@PUf&$L.6uD@f_Zm@,%W5!9)j.pB"OpmA_3?,P/G@h:n"++$'s75)i5<,S<Q-4L?CtR'>>&LL@VO%fe"O6e=A4(B()pL(X8Z
%gH$;#..NiY?.bl?h<2;%YO)5ArN-T.K$/9r<qIUV=JD]+T[1jq!R322g*5OdfiUrtp$aCKT>qoNln`qufg?%7UO^<!I!lE[3$*V!
%f\tIM-"'1ScG.Og=X'LHPhRGq[7'&![[#q,7>W2uc=(9Z<p+;XDQ.k-;S*Z<64&Ge(XcSrikk#^C"^`N?Au7In=E%:Y8skeTg>kk
%al/IihqsB<_r&$*Xalh6TB1-B`?"8^jaA=Pe>kQn;a"eL;F4=#I]%c;ZnpjJf$ERW]iM^Db%fk*`8O3I^o29e5iYd6XKdPc1XTSS
%BJY7i?ES4%GHr<am;i2V8pcee@GeZa,R86WQosWdPh_!Dq'8o`H:]`o74n@V\%p#O*l)h$p\eq*q31>s[cfYJaF69)71XE&?QFkb
%!D"[l7_gE^i"%hu1ki7\-\rp9@!klCB]^l6bCK%0SXIU[m1[bUNhjikV32`^WpMI,$gD5`11KYJqAJ\G/LCr!m$CL?WAFC2Y7i%]
%gp"HbGR4k\>_Po^*sd01IM@%H-/dhUV%Nfd:mG!LVW*\<*.Wb<Si<%;6p.oJ--63H6o'W4B[1_p7<P!CJZPBDZ,?W3Am@iriu#"&
%i]bgu:pe[R"bAl_-^L`N^-/i#\2J?t]<P5M@!ifOR:s6,9[^&'?emT/FSE@EBq^_s],[a7]V_ZN"Z].$s/TG?*/&]m0q;Af%BB']
%HqjF+@gaD-I6WL9h^ep"2WGfJ[C"Wu)7Ngu+Vt/p#H*bM3*LVbA,qh_-8)i1cN'>%4aEh3Edbbt,I<e.nBjAu5tTQ3%T9NVB=(a\
%n^]HWSsG*-1%>"dMRea[1c>iQc7j<S(2mT?*E^j0-HrVS4Jq+0[;craF>9dW9pq*nh5o\*:r#K'dCBId7fZU=daik(eYJT%oQlH0
%#cq-fitTHYOi&(kgCS8O#VfB2B.i_BMqTHahn)?j3eoET.G"[$\^&3B(2-<0(Vi,#LR+^J7$lnq'#V(%5qbaFKX`So4:b2[Jfiur
%b%,0\$5&,oc5rZW>pGu\h>1Q#8K](!ipaH$RF7Q7DftP#6ihp+;Z,td&j?("q)/-FQfs;,F[HPTFrCW,@qS1bic8r9L,98>,sHI3
%eL/Y2W[2!t(!K9Vg#XGjg$"lt3gP<K,f*HSD.-_n<"l].-VlDc=V9?3HI]`(<%mqpVkfQ/043S>S);r5!ncZ[_2p/3&"0<b=\#!-
%.hNS`67RE0:aO/F65s7XkS[TjGR$.#6AsrpY$_FVFTtRT;/4)[A$ii).&LS;4EG>S-R!70Wc%]l>UN1?Lm3D?R6c$/$jKq)3,rA\
%8qTWNa&%bd"?gD]j9W"<KBV@AB>Se.:FdLO0MlKT*p56bgMo]NV=j%E?]9lfhN\Qc?N;IYDL403)_fSN17gLL]LCbI+[e*fG/2NA
%/U2!>/)9'[U`]#3U1#IVJSiZc6XH%DP5uZl:TROE*WW@Gbt),mr5mr</<Mi)3G)rrjD[o["ALRDE@OO2!HDI-;G%JP=rp_eAJZ>`
%G*'0o[,7]<K?B$+<gG#B"3KU;.TZ*T[DcHLiEOZPf+2B47KYt]S!,'r0mnMV<M\8ZYbK.]mZASZ-.!oIg3q#F<e#?/c0+^3/8Ws[
%ET7PUWPlCa$1N\KkLIjaRE[<5W"`>t9GU&"(^2pU9YhbN)t/&_on#>ITmT;sqq-3"U+;T^B_Bg7<`fuXXL<:mE`k!R_d)jEi,p$K
%ChpTI65jB,D#$LY+HfOZ+uHSI3lfYN3EG<&F!B6-Fef*llGsQGieDD46QPE?:6*-VD2\3NK$0(=W)[JP2k1OgNeSgVIu,SRRR]0"
%N`lZm2M#U7ip]$miW]AYm8iqAb\8g$VZDEABi`V4CgW3R:F1:(cZ%K,9("Lkc^`X54\iMY%L\>4O7F+BqPYlSe![[Mk7@dcq!#o>
%P!>@fLUk:uN.A>b*77*eS<(`iQ9JdX=;90"#p3,?QikTi1&UU$+LrKT'$P8U5L*8%!2r7[lQYY&3,FtloZSC7(HI<joT`+DT#\t+
%DnFeQe4@pqq+D#`cQ5[H;?FCtL:%9"j&O>['!C)Ni.^6/i=bYfQ#uH)(;=c/b*6DC^S.s`C=LYSjk7_-?W%DDW^66R1BkYH*lP'!
%FIo2<;+OKaI5PFQltPDQ3S5UNc&&1+^3Yn_Cb6>s[q8$M.dp2IVt"B<r<D4<6!2Wn<,!4WUp<0Z`P6`V0G(jC0I-lmJ6tdM!d7lc
%e@=Nu5&kYn#!b2N_eR[GkXeO=_g@umFXh8uPrM<omthDfWIq'[jruFY7r;I*/E!EH/USk[4`#1bN(Cuh$6be6F!2l/RU86\E5/f]
%PgqgV@pN,5N'BG\>,7D4rMJs874omU16!Rn<,b7A;&KacoX(r'H./q.<oj$uP/&0Lj3L5f<EA-\MYAd/'hD-Df9HUSZ3eY&/:Tcu
%8Q\I68Et5[+V($)(D.(-UEi@e)$D_"TQ.[$_*WLje/@+1%Sbbg5$seA2DXZI!fA2e^+[JOkb-+4Stp"VU1s2JkTE,&4X(4ok+f8W
%5X"@nD+<D(E$7u>D3>r\7mYQJpWAUO.gWNnQ?2Vg5nH^>So,h:M)e*IoAd?,i&\e-7*s?IgIS)@<ob65q^bbW`7%tH*H?Y`Od#64
%MEG-f/F[6arONEdmtG;D,)&,*i^b`-OetM5dV4T7;*Q.W*O$be]cucVpoZHUWL8faX9ZtY:oMQ]9<r3h1>>+^/do3Prt;IaNOdC4
%*K-,DnPkRA4eA/gM?:Wc"n?.`;8;B"]/u$<j(/n#.mn8`G$;r9F(Pof+V@#t*[<3g$)N))Ked\g/@2q7qdrN%=C,A4(paaLkFX5d
%Z[!F%=o@:L@#ppC*hL@ndX'5``;_'9jqiO=\R,rC\,p78gLL5-0c'M$E9d0ZC(D-L603/QHdnI&So-dQSB:[%QYr,P\3,a`6AQ:n
%chj&82bKc"+aC/9BO54s5.ggDjfZ=I`U?T.Kdk^9nbW5DUBD#^O0\t0Gi2n8#2m:,Q)8nU-B*NX(rf+35MlprVg03,oN>p=RC=Vg
%HiMhoUeu9Aqp->0Y!4f;QhR]YrOi15nP4DZ3UjCq^3$%saXV.[o05!roY=ZpY5ZfAKL%,QS"CU;+DA0mO7oRC#nVU\2Qr=9A$G(j
%qR/?Co?D6bC9F0HDm/lIr+"dSh4Q.kb]\=h=@q6$c@MJTq.fBUkKWlj>FFC<;r*DY"q[hHma$j$p5eCu*ugis+'\]gl`V/O-r<'1
%@t&%&&&[GuO,^WRH2$a1@tV\'?<]sL]NUp061A&X-iV&1)iEBWpr*"K%0"+'n,8sM$q;!akLcD1Do;,C"!8KFm8i\qi+E)>$m@Gl
%,->QO%8W=0VmI%Qm.>30[]9C]AJ/?!\&`jbYS`le&\u$W9X3UMFKKBN`7un+YIhtq`bt4,kF[oA!tOmAa(+otUiSZNj(FF.QXeM+
%a2C'^mEVG7&C.J5YsV+R9u\A8@>om\S+JPoKe/&jkhBU#,mpMY=FU7NqGqp;$6\PE\\7de.&tqnjnYgQ\cE1a)/<=PipgE;T0470
%'$'Vt[o]@[dA0S,5PXQ5!r9.]$P&7C5AiA/'\a'm!g/N9RIOP\c(:fDA3VuX(?"%qrL4lILU6d5mSEJ;m<12n]W6El]KOWRpO4nL
%d=CdK/e@"@Y>`('<;ss`^ZE)Bq8U/_KD0[tRfFcpXrg:Mbr&KL+)>aC[(EM.]/MG^NY2-^jJa.mo4E9nd$lbUk4;B>2>=cDD.u0U
%m.%FRlt9lnhse'0E<,-(KP+jGcWTRNAP1mjn(X#;4iMJRMA7f#QRc1;P]$s$Bm@Abdh^-tq01,1HPttP/>#`2pt=]L@p.[Fn$t",
%J*T%25Rt3Jqtu'k%Jm/m#m@49n2J$UWP+"PQ\?UGI:eoGeTeiVi#mG_]Zo]qhu(hlo2_jLj)b8F0>Ac@,c9mob?)%l2l2YVq;n)i
%J*/"-H!l]Jj@WR'*"4T?JS%Bq/(b5J((b`9B\\Qo;m1f,nCSIbZeGr,o$s>.qFD[IDg17/dFAYtgLnP'(qk:&DpRq9G/NQiAC#3$
%c1iuAEuK+qFu'IeEjg&nD)]XT/=o=/,esC&("fcN1R6YJ*Q.G/(h*@9d0"lF+3^[@-VeGa\g*F5[)2$kmJ;VJWIJZYY^W\"lT_b6
%r+%`j>I6,6DLHmipk<efb]s#"\*H8`[bJLPNPQRS(D&ua\M&S')8,jFUl&XlA<NU\S\=B(m;C$jH#co08q(Cf#\LbuoOYae=)0/]
%3So_9#L@ada?94)[tYPqB[$D5^Y^/(oTm8<]<$&H1&^[tLY%%B![$LTJ!O43j\mH?O+qVLcqJ9n:F)0I1r?.9Z^rWmNs7nC`PV(:
%e\5-$&>M9DeZEhF(spr?l0It[aJ,IH((-@iP]FMkF]q[2[+;3#M+&+NW3Oe9o-ZM91QL<n+Y[,L>Y+C38G':0KcU*&#b$W(]\`-7
%Qt9t]+NTjnmA?apr]X-o$N,mUF.LfY%@D(@N:B).cU0nKKO^-uT,YUM$crn+`%sm?eNT=Th"`3PLgdEC9I2/XD986fHq#UNJRLs)
%UhU92jPd_djuSBeBb]5*?)a8?\O^W5]>c-)Y0gWd@QUJr8)5+d(19q28"O'jiW2g*&U*B>!G2BAGtK)?qp-Y@,!]/.p+7NEBAPgE
%0sem+2u4REo'$.S`4"as,VUH$,n\/M8YR3JQqrK!Phq;'FfSYgNikGUg$khY5XNR#$*&PK77X,3fsGVD]$uA5P=:e%rV_6NZk_&"
%B;bR*o7PP<,7Tp9jqOcAkRWo<fs7k,:^f7/g-Xc5X"@gPc:D[YEuZI=6nT$f!ApdIep2_oP&d0E@U`He^e2q/E&uc,dkCruIXAac
%\'qusJ^08RDu]Q]r(m@hDu]W?^Als&r6PE5?iTg!rUPGGqklXr*'F+Jq!oO,YCHH$J,(2dmE7`mjY-YuqtL-Ra+*oWs7TgqnUL?)
%^[oqSPQ155!I'rH+aq-6D[VXpV70;PRBlfL2jE/hk"*p!r.!Eb)!@kt/&!mRa-!h^9(o9a@d,ZWeM3k%Jgu\nkkOINFT,lZFSn:/
%2#glhoZ`trs.2B]T5ht\0@Z]Y,m&=k.J5pM@/t&HQt'/F71TKrJPD]"C22/*;(e7Pd\<NFgZP.5DS9%Tdn3&pKs\RIhdrL*LmPRn
%!>gLIoG$q*q!W->3R/%/8a5=in#+C]s*r78l.KlkE&BK$AFiBf?MFFf(=cHOpc9dg[5=k=4a&u*m8EM<6mPS9Mm(f1$(>N:?.rSg
%SBB)5262ZB30&;c<E<3A?VBR!gUm<MKRNS/C/W$Melu%'7oDGr9OH"rC2+8V-+PO]#$b/Y,p8$M/X<KA,VMY:.tXoKkCQ.C[a*i1
%M@YN%B!(3`)At"nG5u)u!#79iE@8XCO:i1g2b*<S67^F]1FX?:6ro?V"6c\'T>"YQDAL!W\)K=\Qdr\YpbSanfYQW+?#Clt%M0C7
%3E/\Db5X/.RY9:U`)j5Yi94hPk<H;Yrpo5&$@]:<Nq/+8fas'=T_u^0OId\$0$YYb-3hUW<>Df"p@4_d$q-sOb?e-7.RaD1UrPrF
%d>T239**rq'cY`"<)AA)<rnfuqUjk.?fM4EFP=Sf\@nTYK8(S_g,hP(<\jfPnEOJ`=-Nbc&>52tlH8U'>/@532Q:FqU338)N(92u
%38YkQiF`f"h@I1tmZmtd38Yme-Tr9?`=1#G+oRf^qs1q-YR`@4MCkpqe6@7L=AaqSC!mebK`Dl!F\"&Pqlqh%5/!c_A@Jms\K(N`
%$8ki6O$^El>?C\t#TJcP]>G,Z_\'ruYRI3Rg)1c1mC,on1Ic<5"6l4_HtVLJ?03>pXRW9:+QCqHLMrW)0*esCPi0T5*71YkQNAF:
%?D\Y8"Ihs@N!ebi81P&^A$#a/K[LL@YoM7_@gBeF26CkN1A:lQ<`IE+@9Q^\#'erBPA]pY!hotL_HW#@gdTgabc*.L(M$8R$uEf"
%#1BCZqs0CL-jSth>`XCR'A/AMT>UP"(FkH[2UtPO%H-AEA"\e:@9UnV8S3WM]EO(t0-f!^m;[g1&QnKj5Q1,8o:"';Yi?F'lu%c/
%'oesuem9F?BWLAiLMKf)B4hB<]!<dFPDsQaC(cf,5^>uUE`G7V9H5;tj3MY2SP=rf]XhOB.&pb)c`IfjX?s!nnQ!!?1&)EO(:YCr
%hh&P(;aHXsh!b[CeRd178648C8djCcAbIq'qVQ;0HYE7cBZ_c#rY@k"IX5\k%ZpQ]FrCYl#-491;CglFKkq/u=seUMP((V56G*^A
%DcYMK_LQMpMh(h*V'BWC)gW.FG^2FT8+.5H]\53GB45GA/M:6.?E/dk$"F\Y:i-ZU^OV,jS-:+q0t6120N*(dM&='DDfJCfYgXBn
%.C89,N!nDq8#PA7.Yqch<,UO\Q[P=9s+:9<1LA-\e[aUBN-^7;/U\b4DcN>k*-k-sF"As<qUFaMS"@'o%_f[)d%^KAP+a'3<N:Xp
%c<XiClmK3@'U@1Z.TUhrX0"@AMfA&$+L]V_jo-RD#tl9<=0R*g9&"@MeFQNu.HcP58`BNbNhW)RKh;ZW#^qJ`Tn[5HnOnd.aWsW-
%5>Y^:CPiO0+O/^oeekA&p3\'a/R_Lr>q?TJlP-3jcWh:(Vf8%72^[u-=X.p=8.0nBABl;l7F>r'(I-@[EEnuF0,C6PPCli$_!+?>
%6[i45EDpaK%7K5f[#R/d$)i-2>LKd5K@fJheDa8Z$r/s.k`t;;Z";O\`E@^7X3?I%BEp3S>$V(jhP0j7ELSP]c%AV2QA-FMh=<>M
%0]=0gBoGF@r)Y,!Qk\(9$T(O>#h`^XAj%1-V29GWrcU&toQX%!)bU:VcU"M80pXuH`(OUT=I,2(U=XC=X.h\Qh1U,)U7m\s'cd`V
%"'GN#1](h&>bC$#T-??F&oqV!7OVt%WB`Q8QeCo+&?jXU=l_;6,u;j+382i48#_bEBsqe;$/mg.LWYYZ%OWS:jh#N-Jo"i!+0TPA
%TM^d'QGY/HkHCr"4?U.q(k*<=e8WR!&mi:<8/:#BiRttQ'JJt&hd'-E<j1RU2Y"1je@Aas%gQtYaDT@a63K'L>hJslC<AU9=nB.J
%PDm/As#"atLd6.UK#eQk+lH(tpWr$Ke$+qP4<&cWq$K6dfcSs]&)T(ggU/8tZ)S[=d]W+-j49V?-2uV#iQb%PBL^pDkX^o:Hd`4p
%gt`6<jWQ(P4JG2s\qjNm=N$])QO4@PS_0'\b'esV>f7$7B.mo<)CMuM-!HKY0MOAgM<b.i(["u<.AssN(UUm;ii)C6mT#N0>Jqe6
%[,VPK.jks$%kRJc?QJX6\l-@s[W;p4!WY$A+4.g,qWOd4ic*>g!Ve"#HhChLp7D5o+rnNF+e8"@lKoUc7*F+EF)ji#QY6W%'>pLg
%a(_!i6U\@N$%6gg(,bMkd3E,2L>:UBY>b5ZQdFUo1]9dbd62ZaHYr.^V%cPf+.SuQ3'lQ5_b?b%)qs\]2*i?^hYr4aoj09b<W1XD
%>&P-7r^-$q]sTV"VokYl3[=&^IPd%n^ZFt\e9H=l&'!`@Bl,2<HqMYCoDck3PoOVKP/[U2_R`3HlgeoHc1Ki)g"T0onO#Dj0iI:t
%+['j)`Eg7Tg1.h2(S4)KT3KuFkBq&F01V/o>>nJ*!$5+Y?D"kuThKKGq1(9\LGcU1N490#X^d7cILY7uYhkuA2MrS\j5&UAP&;-G
%Nu'r?6'uLU<m;0I9+cY-fNM'E'0CU0ja<p<P\2\dRi(kp4$$dO(4b;t?;9aPaJ%CKdjme8XeYq;WOl,5'g7"F&'_h7"Nl9HbS'b$
%gM;u4B!3!a<Q4RJ:MVaUd^"T4IaX-dTSRd7c#hf#SSGlg=RI\7\1Z0YMqggHTY:#6]P]`C$/poZ"d?[u/,^5-+AB<`[*VJ^Xf"a5
%h+Z]Xj'gpDgCK&Y+Co5?)g;rIUTL+"4P&K:$iZZmLRX`U]9NZF$u"ISCn#Mil\\K$W&$bLT&r(i$L$X?-9f!/qD8Q4<%[i)SEaW^
%9@JlWQ6.'_R#e`$l*2W2LBJGOY#Y32VJD9;9KmKJ?U((SDq5(`/ob(PJL3>AIGY^;_qq"hD_MX"kEZ$JXLH.V8?/ch\b5q<hEC=s
%(TM![qY_ReR&Ra-2s:bXgGdW8n#Z>;\"(_g]im;iD\&C2+8K,7(XKKZHM7[$4m`[k_GaMnIbc.jh":/:!\InQ85\jL6-p\B`s:4G
%J2MqD]!V=dB9T4nnm/BlRoMT&UVo+Y/Te@[8^+K/YW(SrSkH(gFTih)mOBjU)'<mFAA7ogRIf016GUe!eB?LH&FS]J;EuK>_V=)a
%gWS+Y4hZRKgoT\@^O8(.041\O(<]o@gKQA]k;E.]qTXXr7\)K=7V3L-$Np(&V*?l"Rh<DLR/^FDb1hAo]5*eJ^-#eMl4UaVlAqf3
%CV`bp#8JGH->rLS[>;!5V\Oo[okJds9(,fN$#&cH?'bBU:>P>b9OH%-?c?OF3]S84qf7&`jS)IDo(R3)A9j9fp>(&6PeZi)i:-rj
%dEQ]]X,!r)s4[-Df3^NL_&a5YkE3Uq0=>#!2s[phlZn_5+$TDUL3S+Y]baGJ`=2JU[,LpIdb)]3FpY*RZgTPs:@H-4W@:C@K,2l%
%R[%H:SS4;.'@KTc*F6seFp-iRb-!`bl#lWB<,5$e7Oe*j#f^tQStSh,\orU`br55>S5"j]*;Xc\"7_NM>Z<HpAD7k9f!_Rtm%ZRq
%%.9'B>pJ%gF'4X(MVH7q@;Dr8:<uc*.:O`o#>RUBLj,m$q,K0'8oO%O;#Ncpq;:dtUie$iWJ[LX>K!:mN(;D!YV*Uk.PD,pN#UcN
%S>BMJ9<q[9pPa6q&m.TKKd%2u:?pZ=PuA"bfi=e>[;$2Bg67^)4sup_:.&$OAQj>E*(se="%C9_oFdfqYKbY2V!p'uF=jAF7YY"M
%I>:XSBOLE50/fZch+AC\G`*g<@B?@l-YYg;*V*+g&NCSI(6ZRSBalVUVBXWL4b?J3G4P*.UfQrd7fW7=`G.&JqNA:Li(3RNTLn_<
%%!"JpLTkk5\k#%T4YJS,h=AD6rS?WM0Hi)&8@h;Qo-n=O@&QeJ=W"6ONWcYk=Vn.l<u%a39Y]=Fge-"X;B2C<4SFfbVlKIGFc7)=
%[mPBj$!5/=Us'Z-AlDjmPRto'i^1m%WO%i+B<DLDjN%XE#T]=,eI=o<Su!`8HKbZ)Yj.WL/(Z15j;qZND3nH$jJY&D60A>d9FoGS
%<5FO[fsNb=Gt:"i`DNYk>B^Mk/9)mSKbtBU3Uf;)Or<`'h"dk.J7]hF2kT9rW`0FH>U$:DiRnr?kWP.=JpH<@n7Zbo9r[0c80quj
%T"bcG'&..FeAO2,e%q8`fE?L!.ensY\pQnTD'Cjc-;D$?-MR1re)@@n%UpW'#pF!A,S@[Pr6uJ.f5"APW^WjHHs#M[YdNMqH:UBs
%0dj$)KhGOMEN'48`DKZ(f;g0@%dj_JVf+e=,21HUbPA_>G(!%a,cUG.TX1>l0O)>O1;I0`!mPGRb(LULhN.3qngu/OSYO]fH:UbS
%Z"E&FG="BACK>eB_lH>aa>F'Ch]86E\2n+:M9BL,ii**TLYkf9*/sB`*b7kCXg%6Y+'.EFGW<l?\eKc@-fj=,oq4nnMD+'2?S1P&
%AG.;^^<\2d1,SLR9i6>D4Ncl-gJ-(1`"M,30K$*pA'4#+=>JFb2u]SgDkb&65(\l7aSt/@#F1XKQ5-g!_L#]LWk4pK^b)0a-Y_!b
%?XLD45Y#.a;80^C4?j!Lpf0.I#Z_HB<aYn%bF_;>D>Y(h*an85N]nRl;%MsmQASm)P*,D+]+(6=jJY73\quZ^iV[.17XIbp(-^`s
%/_FXgkqO:]"dLrq/0QAcDf?R*J8h"e-G,N$.(lEjD"2IVOsP_&eG*NJT:[%r0(EbU5c[;N;CI9ridmm?oI,#gS<s!1oT/fSUb$om
%E7C`NF.*ck$YN<%eA8.YRBV3$?'rilX`EaMERp0A*S;G=9,"M4pJ^F36kiR6m?gAQj@-Jb3!4\k.9f\t"K5%fb+oLWj3Ypik>Jd;
%9809G\%UF$gf!1@WPoP2HTun1@Lo*<B"(Doh8LuH%=,U1KCk6#<_]RAD"gft&!:;R-9V@BT&k9=ri"BYoern51<gNX/S4[(S<V4C
%?FC2oXd]SX+C'+>TgX,$@`D"$,)`pR>e94-J=.fRI1ODt_[BZ<,f'_^oZRtY^8@N@Q30i7[%cao53j?P*d'X6Rig2mk`]Mp^O[^l
%EKjq&;MrgoU2Jq$D`fV^q\HfmV.@aqke<+WQcCeFHH%bGO>T_/qO$*$aTnI$pGn%d[gk*@6o%PDR#X@BdOZ_nm;G95]X(;,SlUSh
%:.2?h$.M@q!?JDU5lfu(.;gGZ?;a0&3LUbk(mBS<BRa6P9Qur^l&n+3Phhj!j<q!%I<U!YHgaAjXiRoQ#JeIm=1/\8FhSCD\&J/=
%G--]:*Aq+0d7K>$gTpBR<#C"uFB<@p7gA_3jZ-H]8.Gln%W3ji%TCu-T]0Q4kD?NA^Y8&uUt<"L"`V7f.ff%hifm8[rHff7dt'VV
%BT(u;pDop9N#J+.Ynk)PShmh)WJgk@Gu`b1s5M?L/S4KGDl:N`if-/(99FpQ2bG82=b#(Ph:3oTkl!cWlDQDr3h$*Ydo^p1LhKl:
%^kt>M^sO*faQ/?p+JhR;]F@6XkEDbW]O\K=2[EH(bo>TO3*I*mQRk[mI6=ZLa5c%Es4JT@^LCP(s,nK;DJCRc-&oK\\/F\I6k2q-
%Q@pD#F>NI+2ZF9(kRA2ekp1X2&??E$\cl?6#@tR5_Vu2jd(gbChN.1K$^a4RfPWic9ieMKT;]H"aOO;#A#\"==eZjFYUEM'Fk7n/
%N"Op.$d1[WJDLV2Zc&<>S5:sY/lB#qIaq)S:CV?&"'%K38dE0!&ke>hc;hte:9."T/"\TLWqg1bkW;YTbaXQ5o12Mb4J;2gbK0'J
%^"bbg0b?6@ohDfD<=pb`TITETG_suqBa@Lpj=(pt6JV"WYJXb:+_uusAOJ8dY'EX!He.[`V?G8b,s!)]cL-kq9Lc8f--D9*B*j'H
%kKERjqd\#Eq@;S?I07t*;f$Xh#gO<];?qC-HMrj0D$(2q5:c`k=\3ll3^#HX6cPPPZ3UAFd/ml\Z:,Es=2^mIq$9oeq;Fr+8EM%`
%1$gmNI?n3UZd:ECf?uG%c7UabUfb#c^Oki)3^oJN:$mHRf8c5lMG#_OIZk$Pdl#rko13u_E:D+Q,F(F;N3:bb\5mE`gl0b02!,i=
%10@[ZGuX&D%P`bl-)J6Fl1:S(6LJ@aZ6\$7ISrsMg20!qF0ceNLf:,I-D3WA1?kX\:0X#Tk'&?&7(T`n9L,e40-,X1O;`1?C;a6F
%]PX9Bh5LSs3(_"ianS-;D4nr<Vo0Z>-)Iu=O7s3B&ql$A$=a5@/MZGEUGF)]/WE?GdB^.WE*V]WkBEG!*p=V=P[1MabG5W6BUCng
%3hj25(*+n$P=Z2'6`NpBFI#jmHAUjrW^f=$)u]"Yk%&Of*7SSD.^b<YVGq1l9>Q;qde_WgaLiUECi4a#R>qN*bBqfI'#CW])`V2-
%CiuQCDm%p)l*F1-_n)nTN0F1`l1C:mW^.sY3mF7bf^HT$+$;d/6+%IS0DpVJ2@et!WHmeTVXib`fsi\(4`!"@9KNNJaWsRcBNtr+
%QV:;"9npS#85*=$7j'DX=]$2rM\69)30ZueR@uro3g5ljP*P"&!#B^8%Q=1EdM@NMdXfA+MI"F0G6Qs?)!O`[EU6e5aO*Oa=-Z7r
%er;I6P>8IYj7L)+]Wm?*@3<Ps?*r4mX:c[?A50@1%:G6S3k4Fd7G>_nh;(&Ln%htt8hN\lr.VmMFC#=l_)M>XCB[fqL'[\fVHj]l
%@\LPU2m!=We_LS(.f!8+:d8oc]^=g:geHQ?PuGSlD?.qNoo&q&pZ$BHVq38Iqfl$pBKpmdWp+F"jrnn6fP%\SJP&)E5XA4q[rdOR
%`k*:-o/#shqDctelMf=t#!sq9?XKBYN8HgFCql1*Hl].\mZ*17f=]j_*oZZHp&goC]894gI>#3IkkB4Ql]8/8K;XCamB/m[Q#E8K
%[[5#u:\*njBDqnW;,PMSLE%j0VZ"ud5ksg8W*4Xdj.Ve]kB?NR<^@JG1ti1Sor7U=&[1$71)lifDbutY?hhRnDKgFd#-T7O@CbiR
%]G[N7oe@TYka0d`Ze^ArG4gXAqf'pT?i+1b4pHWL+1o]<>OR47p]DTWDZfY2rSJ%1'Nr`9=nK)84:JWkp%Bn"XY2Vff;P%^Xg][e
%<;WT5g\($-p90'[6iruOnhqV^C?3)Uga:Ko79GeC6")70:+!A7>kR=N-4>5"oUl.W2#N\)YOr)n",ZT;,LVXb3UX^ua],QR"XKi;
%QgHl_Nd-6kPtHAmO,2+&]2\Wf]4k!8*-#gJAVQe[dXZaT=t\)M=X\h/Y,t<!7e/,Um8:uj3B.T3cZOJ6i#6LlPSUMi#dm:g-ITAU
%-G`l"TcAj2"PTG>d65QSRUKC2(/I5Q*g(t[%S1I%Tr@M*GgP'eWA_ed[;OnjD%)ME6H@g<g(q7O)?M`MXufc2ahR,dr*s"Be#+*j
%Y6RHe]Tj>78mrB36qodLM3GA>7A8GHT\%O$jlXAjF8=-!]#hTVe7Q1C@,7kO4)\[4jcJ:NrQYS&LgqABV;iDjgr$=gcS\.!0n?K/
%eAGA;cjJtCp;@^A9tFHnX0KtsqgM1i;&iB%YNqu0=nsgQ[f[H3h=Fle))?F'l=a\.B[Jbdq#X!^+h^)TN8&Vgg+nT(MNW(e;0m!)
%NEspU^beOjV@e[``beq"c3V],/u@7]&](1eX\88br9TNi@oT`O/spW>@Ss9\&R?bLV2T#3UfqAKnZqpJ2%kV<q'[:Z2K*V&/A=ls
%=,JuPc^rIZ27KeB;Oa%+:O4upOK"]=Bt#8YZs><Yqd>un1g/ff?nlO9$Rn(e=4D<>Y'\)dUs!bsV6t$O'/n(`a%:lV[M`8Y^4CDH
%YZd,m<b=PeF)a..Y.JBhpDQ77+Wd?-,7ua5-`VVd0R5o">Q8m><FDH[KELO]DDcI1mVFAM4EH$h)BY+'?;6BGGfKM<%ILHCg5RNf
%<>$=k1aRh4pjo*;g1a.p$^.q9Ftbj.!Z&X7A;a'8];/8]W8Pt4nNLVuQcJf37<4-5?=\6!=]:tiG%//FF,Q:#LaRB``*OD@PXT&o
%$M;!+O%nWFR*l)?;Q&j%g<GPL."l3oH8e3?i^q^a$+@qo?S"(0.^?EI.Bt[693FbSWe%C:dU?.r7#JN\JoQ;CW(O6]<q^cXmH^1*
%"0\fG%!!_Y5:a/[1f>B+J;b:M8b.lDmo53)VX1bh*AgR'(64Onka@qJ[fGDk!rPo(LrD4JLihrB:Flj7(:65>)l[Q[3G_%Kj<TAS
%,q6j-8?H9*]gmla[dHag0V>:jYdr5A;OpCVFj0[n=A*ND!)KE:oYX&HdQ+.7nQA>Ggs8^X0LCG1U?ae#]L29#=<P2<ZA8#j69qEX
%V<FV]2q1Mg\&S@4`5IpG\=A0OW)t/1=j:e1Ne9OgAA^Do&Ku+<,02VdK,"1>bQ`]dF``T0BsZq-5))KY>Gchk=\#5e;pO.(&0lQf
%>a[F$?u1uDq7mI9LK*C^O&:+3?omoSLTP>Sar/]oA9+s3RWhd#OFmF?]!_75Uu80_fp#f-mhEE@S[K_9iaVG=c3I9L75*h%%JrLo
%A>ts#]_LYM3[Ng^CRIT!AX7NT5bc8(1LF'"e#JPcRqLjO&?c_T[l!Je3<p?k@jAlh>Vi8b>/i[+[Me;+K_HsGZ906i\5u\oJ>ff_
%+L@8qRHGaX?km0dAp_FN5q`i!.ckW9N:tnkb>.0o0MEgVRk=i%B4]9R9^;\A<odpDi0>#u<^Aj,F/)I+egM[dW`Y`YTVMM#]4WJA
%.tg.ZU!t5?8VtY<4G)9^B+AfbLfADH"Vb0UCXZ@FG`G3]$-S.[.:,;'pRHAs`B*+L1*eGJH^WioNCnL)T_%D&k:dW/?Im9cdj\PJ
%%i[c>*S:6$kEMR\nQ/XQ?oHs\\TY@mH]T)O\3hqHPjQK\cH@jeT;`;]J[\`-jtu%\cL3Yl>ZjG3\uM7_eE@f,P-6iCMj`FpX2&7(
%8<St[:4R>L&T4@I#5Hb0199.Dg6c&Y5sJG&GuUAf&_8'/jjYt5r-Z?rZD1LK@2GP.!nYADg3#jsAcdnB,9&B]!&38:'bW\;.4(Mr
%#i*<Yk@%M^`PMcQjJ.W'0if<WPq<#V_`E1XkiA3Cd<[HcibTXm/?!ucnQRc?Jb@Y)<&AH<d1RI3)Zm+@r#;MqUR[b,EMl]Jg'Jt3
%E-<\7)%<uS!Uau0<]]G=O`JCkf&hoGm9;e+a4Ze7+3E+.]CGo&gpO6;Frf2K5lYdaC0JiMmqO1W6bj6lg^b4u+r`)T>`".3IJ.p8
%3jC5g*Fbuqc+DS1H`o;>4[tDLp%*D3nA6Wb_BL.dn#pRm-qV?B%/DD4Xe8m]!aoQD];;M5+ggb)#0"[F>QduMFuU=cR6a#V3um^g
%p(:1P.Kmc'mp>D!LHZtS#[5/,](YPA*?Olod.Xs`3E6[,&gr<I.t^gIgTKWf_/qhqfCiFSM`B6hg*<Z\JA@HTBj9BO[3ZkEn4M),
%WuR.YV<nC;OErK^OOd&AijN-I.imtBX)BE"cd>?3%0C(a4)QLF77>h2.maq#p%pKLg9$5g7#I*h[8ZX]IIsIKXQNNf=j4n&6S@oF
%*/)lF72-P,U1/<.O*Z3C2L"A;B,#7c_iX]W:@STbg>stILO@#pV@ps(1BU6)YXlP6XI;N<bH*NS='::_V-5FP)b$;eRkq3al8B2n
%k1&jZC\%Y'_q];lGBbD*5-_J41OF/toq\_AAdXrLf<nX@3Z=EHmh)E>T\dBL=K!BC6m1hPVPCQ9RQWs%4+(c.6G]Yu<?28A.U-/Q
%"SNUuTNjO+<t7?*D5c&2Yn6XIoY1t9=AH.g3ud%XHYHeJ(8Rbl3c/ZV1slZ)Yoeu*Qs?*?4O"/teqq/-C71HrUhHObWh^GUacBPm
%T?#qW6T2gR]'2[[X<%bs/b*GmAg-c>BHlit=#CoT@$TJ`(-o7J3P&<a)Y_,ZrAUCb@B/A;kka0C)]gN1X,:U!QK1@UY08X3Q4E9g
%`1j,dU0O6u/9XRVlJ%`L"jAWE?c\#f2h7mm(P^JVOD1WfjJ5K?9^k=J.fi0h<G@<5nk)I/ZM>Dgj(2J&h\ZI@<Q9a8/k@&]ScUN)
%7+"FT^nSt6M,Rn[*!EH37iO/?f2FoSZUok@:H`/87VSM:AF]IJ5Vs$*"L'o]MF/&[YJ,%`\>@jJI'oFGG[B8F]LO\A2p,*UNu9D;
%*9/>HMM#<!`e/TRE!'nnW@+,R0'YdM8#k#$J27%Uf^<19?8OSsGnQ/[DZf$UBnKWn-d[gf!Y^e?j9riEi2g7>6I7haUCH64`=S9<
%p+$387M<\M$!\[^qpeu+namA8'>nE#%,Tgn0F?mTOC+6qBni)Nj$j'"Lkq3[aG*(3QC"oEh0YPf[fd&5prB=4CWT9Tcq;_37LIS(
%>=T=cA>0p?!jKFe<[tGITn%]PX]3e'Ak:C^7'Ti0>,Ooh;EBL1N$EBMKJ$n[?4?13(oqh_J`Hr.K1k4+@XbG\j]!acKC`bLpYa8,
%"bZYe1gbq>XoA<mk-@@cJE)Gfh==G0V.EVjNhiF1^Oh4Yh')M=LkOA);0@&T!W&Z[QpOti<'.HRoFs@okT&@Zh49?ha>a8;96#qE
%$^`=ATc2+Y6^`pLed`6Y80="1A%lY,>N2KHOM0FO[d]WOBOs3;H$T&/%M^;j[NP]9FYBTI8ldOi%ti856I:N7Nm`#oW*VG]b`0'i
%a<MOt]Ncs>/XSr]W1s(I;d8()["P\7oVWp!k^VFA*OIXB@a*<GM9QrF316a*P,T9""tVdd"+t[bdPR>A*]kUGoGGOL7C[<hpLi9W
%@BKhAm,"rpm5l):h3`mj-)+*2Ys,4>kX%%kB&-<+Ebu&q&GnZ3a!\],_NG+P^uU*Kb0$\=ES+kbDQIGL>=P@&O*e66h8G)QnR"B4
%^W5U=,E*FL;Oc^oq8-/<eq3nRoL[0<"nHsN78h[$3>`((8d;T**_6Z6Mm>"?N<TW]Q'OIh&'4]UGC:ZXgKoEf1/\Bk@5g[M@l3&b
%q^)X`:1;&/79D]/*N]PW"rM+.NPku/#]ea@VLd2g3@TE_?&6(*!$eGGl,E-eZn__XacFBS#M125n%%85gOo"qH9)(g2`,+>HP@DK
%7]#8U#0aiaJTSp^k\X(D]ED(ZY=)A#?FaS$3^C"`Ag)0>_bkG4AU5e0Xsn!ZQDe+nA3.d@&\[m8YfL6j0o&C]"9lelI:hY]&i("L
%+UX:/5%@3%+B7gtkp$(F<BZ38jSXpmem3t)Ok2PFKR>,PYAW\QB-CajbmL]DLIE_tO1N(u$K-M`liViE-YsXCdopbI`d>PFndYpg
%Yene5b&s&'`(A?.-cNbRr5Vp5eB7-u/(Z8;m8bjU2JgiQDnim&(B"\TMG1/:#paZ;nu85Jen[,GaD''.6n4_CUcEkqmnX-$Vn9EH
%c_Zld`,O,cm(?TG^$KOUB(E@SP5^Oi*j2j*Hl1&Oa](11_5H'I*U5E/+X[;WDLE#&5Tp3h<'?59Ka]!/AQ?uc9M;*p.BL#HSNT@s
%JZe,;d\>W.BlQ!4Li%t^NqOeDFD7:N9)hp<C2fp7XY5VT2K0G[NV`sHR2K(alK'\:NDe_MQG;lBCIICQc.O`VK;*aR'\6DXp(0]O
%#_mMSig\K7cFf2Y6dm]>Nn7ktDY9AB1*/&.$qRuhdL!*?F@KOt/*!:50#E.aGLO`R+.;]7F995S8bo[eh*U):BUGY#G)ePD.n*di
%"h/he+N[XN,1K?hH3>?kf2\a4#3SPS!:F9T0Et=l4Zra.QcB4$YRa(L=r[-?!0=r687irMIMf'O(1q5hd!0=G.<Qc7@_H3f=uf"=
%WHuJLdgV2FP-H?AG_ZYDNA_[.&%t!_?t!oVGKiPE1$8X3V^a-o<=fS1oHo#^@lKsm^+0IlGh#!+e'oP^a%rsUQ6IbS:n[6.,tEU_
%<%mS[H3Ho%TVG&adT9J7!u-28%CJdf$'0'J9@M+-B3uKq]3YSfmKjI5LALKoFmE(re[qjc?BcL?:ME,iS0VYg9,WcgeoB]RR[WA=
%+G8<!Q:;A)Oon-S,#ena:q^'DIWf1gVAr8liK8kcBWt_o;$?p(qfkf]G87p1.u&#D^92Tr-p@cthe&6:IuBYG#A$dqAZfkWB@Yp2
%`>>;C7\DJ,Xghm`X5?_WS].d5)Z2,3;)LTM0A@'\oR=rkTQC;o#99[BgN0Ekqnj*E'3bkV]`_\]DVp]#3)Gf"*a(@nZqGecHo<h(
%i/(mdPWB>;_G#*o8sq&#2&dZ4n-Y"?M"7B).!2gW[#CRITP%grV/K`A1=grJ0(;CkK5>gah5It!&69D%=:lf]CEMGc_@LJ9ck.Yd
%Gi'/sc1ODA)&#XWMmo$2K2M&n)H&IUb=m7lf=.N;j364UPWTpKScGeJ9$?EZYs`SPH54[*X<_M=&/DBf.0j]hO806?J-bC_F*>KF
%3%AV.1:NH;O<\D`U]"R6M=A85:GuW#%$jj1@kfq!'NeCGafZl0$H+c@Xb$F9b^4Y#o*u2uDQL.eo)Wr&N@bfb&HS9Y@LhNK^`]d3
%n10;N?uR3^B$(J'HPa&0J-enE0!1alP`eoRr`!mM"'4M]Q86D[P"R@i/5n4u&-kUVYiV>O7`UY\iY(2/BM4MMS-lSaJ*U8@Q'GM`
%i.$Q&L3aamH3e4,_k-7_IG*Y$EE1TAcuIB)D`VKCpr#tMJ`E<&2X;lc$tkls-PTA!ME2#9;i&`d<I.hLDdrV4m*:X2op\)/JZ"Y@
%C;EG&B2ln'$6dM0$@ja(a9k`m9S`8;#$\BUgP$fXgs*](\,FK<+bB'[Pp4L=b82+cDN,d42E;:1l:e>R%p>\2YH'O=X@kmOm6TM_
%+2")6!aP,+5poX*R8'3uZb5@B.%n<;_5t7V'-IU:kV4>b>3Q9R>Og<Gp&ALPs&m"u+1_I;VO;;V_3Xn#Aj!AXdI&\Xph)PJU%!in
%"GB4V-2dIG\7i1.=3##1]hKgP_ofZom'tf%(GY8?cl+:Y#f[Lh%Km'*'MP/'q2oJ6`He,$A0L;q&V_MS:8?nON#LE'SKR?%bsitO
%`(LUr55T)T9Tdhd%6uU8,"F2b1%./,'uT_O6h1LWT,,gYEZa5S/E8$$r1&kNcg&b%(.7:a%g?KM&uP8_35Z$rk+YS5%IPY*:7kX4
%5@6>+p,At*9cLQ?YqGRk>7;:1,LNb<gCYSV$#ko*Y>8kk#H>5%$A,kk3KY`NWaEbt!/-EPWe,Tg,DIdj'S`&R#=aa6?V;>(h;m(k
%1l:47_JRCDojsoKOqrO<HJ=-s)9V8s.XKBaPZ:Bdd3SEY/A7I<6['Z[*mVpMkaClDop+gP^R:lE;,]?N"_#^';CC6j#-Pr,8/$u#
%ah<FnL!NNjj_2(sq]8N_BTT360qUK:pHD1KGgdqKb0l-(WPC9:LZK"Y;*]"u&JSjXN"V>*M/.'#c(-2kH6s&EhX&g(6V1(mokED8
%Ufclop2R\AIKH21kDYo?iB0lA=;kD1Jnb5RWnl)g,@@k7%9e<f[HPYp;^.Y$8G4%X^g!1*Z$I"c,ISI>EqkQYaSKD+`[-8-%er$(
%3djqE"<+Ie9F^.N-;Cm"Cni"@:K6YZ.6IhN6P4'54tmb2L2.P3d%b?2TQV&!l)M&"eX4Mp\W()YIo>1IK`FKBGdiK)fQ<heBD8C*
%VRs?%dnOd4%'Bh4*.mTW>$X^gi8i<81@;1aaL\&9Zs50+U2d$*)B's4YaB8*(0#dr),SGf[EA2;6M0)iEW`qr=MCbI7B#8Ycuc;<
%<2;c]P#Z7)!>6^/<HaEIF2$rje?)UN^@2>cI&bVFBrJ,!82LMs\`O$B,<FF+JMIs'_>u`$<9rpASE/!`)h@Z^r=pPm@5@)KQ_HPb
%n%bKV[uGK?8s13Dh5k]Ymlbe1L5DU3$gMdYGrk881&SItmrdE%:JaGGJsUIQW#4suHNY#&Rkh>G<],G6!Q#J##@>[t>>JnT,3k1Z
%/8B&DGt,O?8dYPnDDKU*Cfe24)t%%Cc*?^uQ<[q0g#(ll&N!t/AAK=WBde8HkI0D""&9.rid!:`"#dlON/T0WJ"g[oQ)gTbX4f_^
%dRhCi:%Q>1B<Di_VfaO;<S[+t(2K3l>l3f=YDC&lSVF8"V>JL/m:d1pK;#;h%)Um1Ecr0Z89;Qa?,[)=UC@"</9t<^36d'NAM_$b
%1;>0$^Clq%&1fj(-RrhD$=Dd6k7OoM?6k-:S%58%Es6a&QnFtP[(faDc@qgg'EhaE.N$&):(..SIL/qs<E:1,qY/md+uNYLV+h,6
%U//Oj[S/%)#(?`RiCVU]Hjf::YGA9G(pRM?O<C)*T$T$qM;]t6kd0EAD:_[as"H$pa4]R=Z"t1JH=aR@)f1o?M>7eX5hO!M4s,`-
%7:HfT5j$jrTI_m"d;rbNMh=[!SI4=p665i/M8W0FQU])hC:c]CB=S#J1l4u^I@A2;ma?Mn<>DR,LGdOlS/LgnfK(NtT2=Y67kEEp
%H]8fZ.'k<%\NG/_^1LF$m,AJ.)D,BU"opge7Ss_+L4_(fk$G9!6E(&[P1<qM3^d[k&R(T;^6eT?/Qn5Ep`)s&%$'/>'c[<-8kYXH
%[$].p$9L8aOJ@_@Dh`TpECrHS6COd0A(LB+jL5<[/=Nf;H5'GQNaU9qpNb2u;o1M5]r5;$iUDq1<\jBdXIX(0-[-k=%6qu&QigG:
%5?_6,Qd,YE4%laK<kG$ciV^McDL"@3AnWPf=n8I:VmOus>cN]oi8>/V#fAWQf-`#6=jlT,JkUj=NB5_^;n"nmh"lb==Vu+_nk2]C
%Vg5]8,0;F[h-@2bPMV_phUCiB(,e\`:TRGfPZf0)GcqLf.>Xfj(%b)#o6p(F`fCTJ*,'-+p-RT$YRo&T=r!EG5KbHX*.$TE#)uMQ
%jrNR8Uih27e2'"U`=p<3/gIK?nT1BO^b.KTMEoV6Q+`?!i2'E5FX(-!IUtLnibleNVTQHe%02](@ob6T?>dc&rc"o]]@_"X?)@*h
%Ot+4]8"S,`90cKG"sGU[^J6e07HPI4r2?4.)FYD4[-qGM<,J&IXiNMR4hKY[r&lZ)K>+d\W<>6&E*VLjU#UQ;$ie(?rPV,*o$kRN
%blp]'CHH3*-q7PS1W4uT`TQ33qn\7)Xh`72FE,jLLIDae\o[g5!n,MCqY]mb%4H.1*]A^UR:bgn:(Cm@$6q0;4k?hH3/g_YCrB*<
%Nh0636),.60k]4@c1N1oI90m$i48'9GA6;"-uW;9d*h9US#&R`oAS^q'fg0af_4?im8dFWGCB=j2(S.):'T'tA[Jn*k.]:S%3")3
%el9cC1#$j.APmoL`-`5kH*1:C8//?/215r/p:djSEgtT2*LFE4ZjkW+a:V`VBV4bRYBb4nF\6W:Mtl[OZQ6Dg1%'p%"LmfV3bnts
%=?J;;K++"+G*e5W\pWh]R5FU7$ohUp0!X33>/tLQIPMa<6g?*m3kr@8HeL2!MrI;:?`i#$fki3hKZ8<cd@3Jg=uZCT5So%3;]CUJ
%B:eDDQ=3S4Yd;p@<Wiub)9B^:g9-);2$Vnoe%9L_dguqkViM)8)aip/[QfDe3:*"a<'R*"Sb?Wc*S.70&sPgG(qRY8EVp=Xe/g%%
%$<omM)s$ra(.%a,&"AG@5HkcM^R=q&W`/rp^OQ3cT7?RR^\lj_O'dA-qd4jJmuO)inVc#9(Vfe8e]6QrqXDNiIJia5B4$)]iBKQ@
%IJDroDnl>ArPq.;rorgN:ER@KrnC3jhnK!*\,V-s>kD:j`>?;epKr@Jg&D&j2fJT~>
%AI9_PrivateDataEnd
